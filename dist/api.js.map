{"version":3,"sources":["webpack://AceApi/webpack/universalModuleDefinition","webpack://AceApi/webpack/bootstrap","webpack://AceApi/external \"lodash\"","webpack://AceApi/external \"@babel/runtime/helpers/interopRequireDefault\"","webpack://AceApi/external \"@babel/runtime/regenerator\"","webpack://AceApi/./lib/client-config.js","webpack://AceApi/./lib/db.js","webpack://AceApi/external \"bluebird\"","webpack://AceApi/./lib/helpers.js","webpack://AceApi/external \"path\"","webpack://AceApi/external \"axios\"","webpack://AceApi/external \"fs\"","webpack://AceApi/./lib/assist.js","webpack://AceApi/external \"@cloudant/cloudant\"","webpack://AceApi/./lib/roles.js","webpack://AceApi/./lib/email.js","webpack://AceApi/./lib/entity.js","webpack://AceApi/./lib/schema.js","webpack://AceApi/./lib/fields.js","webpack://AceApi/external \"request-promise\"","webpack://AceApi/./index.js","webpack://AceApi/./config.default.js","webpack://AceApi/external \"password-hash\"","webpack://AceApi/./lib/auth.js","webpack://AceApi/external \"querystring\"","webpack://AceApi/./lib/ecommerce.js","webpack://AceApi/external \"nodemailer\"","webpack://AceApi/external \"createsend-node\"","webpack://AceApi/external \"nodemailer-mailgun-transport\"","webpack://AceApi/external \"inky\"","webpack://AceApi/external \"mjml\"","webpack://AceApi/external \"mjml-core\"","webpack://AceApi/external \"mjml-validator\"","webpack://AceApi/external \"mjml-mailchimp\"","webpack://AceApi/external \"html-to-text\"","webpack://AceApi/external \"moment\"","webpack://AceApi/external \"i18n-iso-countries\"","webpack://AceApi/external \"node-sass\"","webpack://AceApi/external \"pug\"","webpack://AceApi/external \"ejs\"","webpack://AceApi/external \"juice\"","webpack://AceApi/./lib/embedly.js","webpack://AceApi/external \"embedly\"","webpack://AceApi/external \"@babel/runtime/helpers/defineProperty\"","webpack://AceApi/external \"json-query\"","webpack://AceApi/external \"deep-diff\"","webpack://AceApi/./lib/instagram.js","webpack://AceApi/./lib/jwt.js","webpack://AceApi/external \"jsonwebtoken\"","webpack://AceApi/./lib/pdf.js","webpack://AceApi/external \"eval\"","webpack://AceApi/external \"recursive-readdir\"","webpack://AceApi/./lib sync","webpack://AceApi/./lib/settings.js","webpack://AceApi/./lib/shippo.js","webpack://AceApi/external \"shippo\"","webpack://AceApi/./lib/shopify.js","webpack://AceApi/external \"he\"","webpack://AceApi/external \"handlebars\"","webpack://AceApi/external \"jsontoxml\"","webpack://AceApi/./lib/stripe.js","webpack://AceApi/external \"stripe\"","webpack://AceApi/external \"hashids\"","webpack://AceApi/./lib/taxonomy.js","webpack://AceApi/./lib/tools.js","webpack://AceApi/./lib/user.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","Db","Helpers","DEFAULT_CLIENT_CONFIG","_id","client","assets","schemas","taxonomies","users","roles","provider","constructor","config","this","clientConfig","connect","merge","slug","set","createOrUpdate","Cloudant","dbName","url","db","maxAttempt","plugins","retry","retryDelayMultiplier","retryInitialDelayMsecs","use","Promise","assistUrl","assist","doc","resolve","reject","insert","then","response","id","_rev","rev","error","statusCode","docs","chunkSize","chunks","chunk","promises","forEach","push","bulk","all","entities","groupSize","Infinity","grouped","group","entity","groupBefore","length","groupAfter","ratio","thumbnail","groupRatio","JSON","stringify","Date","replace","array","replacementObject","map","thumbnailSrc","settings","cropSlug","cropDefault","settingsArray","split","setting","crop","crops","x","y","x2","y2","g","join","settingsString","test","thumbnailType","ext","thumbnailUrl","axios","passwordHash","ClientConfig","deleteFiles","fileNames","cc","assetsSlug","post","auth","username","password","generate","result","data","permissions","entityGrid","entityCreate","entityRead","entityUpdate","entityDelete","taxonomyCreate","taxonomyRead","taxonomyUpdate","taxonomyDelete","fileCreate","fileRead","fileUpdate","fileDelete","schema","user","userSettings","tools","ecommerce","role","freeze","find","path","fs","promisifyAll","nodemailer","Createsend","nodemailerMailgunTransport","Inky","mjml2html","registerComponent","registerDependencies","McSection","McImage","htmlToText","moment","countries","sass","pug","ejs","juice","inky","getTemplate","templateSlug","templateData","templateOptions","options","inlineStyles","mjml","skipValidation","templatePath","email","templatesPath","statAsync","readdirAsync","templateFiles","htmlFileName","fileName","htmlFileExtension","style","renderAsync","file","sourceMapContents","sourceMapEmbed","css","toString","helpers","pick","html","readFileAsync","renderFile","convertMjmlResult","level","errors","Error","uniq","formattedMessage","releaseTheKraken","preserveMediaQueries","preserveFontFaces","removeStyleTags","removeLinkTags","preserveImportant","webResources","links","scripts","images","text","fromString","sendEmail","emailOptions","nodemailerMailgun","createTransport","api_key","mailgun","apiKey","domain","emailTemplate","sendMail","metadata","subscribe","details","listId","createsend","cs","clientApiKey","subscribers","addSubscriberAsync","EmailAddress","Name","Resubscribe","RestartSubscriptionBasedAutoresponders","emailAddress","catch","Message","jsonQuery","diff","Schema","Assist","CHUNK_UPDATE_SIZE","Entity","flattenValues","fields","size","mapValues","field","type","isArray","filter","obj","undefined","published","childrenMap","omitBy","startsWith","rows","parents","entityMap","row","_filterEntityFields","uniqBy","fieldValues","fieldSlug","searchTerm","viewWithList","startkey","endkey","query","isFieldQuery","queryParts","trim","selector","modifier","slice","locals","input","start","end","sample","sampleSize","paths","copy","pathParts","match","pathFrom","pathTo","allowRegexp","queryString","methodArgs","queries","emptyArgs","times","splice","_entitiesById","ids","include_docs","keys","view","_appendParents","children","limit","isNumber","_getDocMap","rowsOrDocs","docMap","_childDepth","childIds","rowOrDoc","isRow","_queriesFromString","concat","flatten","_query","childDocs","_childDepthLimit","fieldQueryMap","_mergeDocs","_extendRowsOrDocs","select","_removeChildren","updatedEntities","indexOf","chunkUpdate","_updateChildren","title","entityList","_entitySearch","Math","min","sort","isString","include_fields","bookmark","index","group_field","search","groups","total_rows","hits","entitySearch","__entitySearch","clone","entityFind","updateEntityIndex","entityRevisions","entityId","revs_info","revisionIds","_revs_info","revision","status","open_revs","revisions","childrenIds","ok","fetch","console","_appendChildren","restore","entityIds","entityOrEntityId","isObject","oldFileNames","oldEntity","newEntity","mergeWith","a","b","trashed","forever","deleted","_fileNames","filesResult","_deleted","entitiesResult","files","Fields","read","schemaSlug","update","findIndex","delete","schemaSlugs","updateAll","ddoc","default_field","enabled","analyzer","$and","fieldRef","dataType","Api","defaultConfig","args","Auth","Ecommerce","Email","Embedly","Instagram","Jwt","Pdf","Roles","Settings","Shippo","Shopify","Stripe","Taxonomy","Tools","User","environment","process","env","ENVIRONMENT","debug","DEBUG","SLUG","baseUrl","BASE_URL","DB_URL","host","DB_HOST","DB_NAME","requestPlugin","DB_REQUEST_PLUGIN","meterType","DB_METER_TYPE","superUserId","AUTH_SUPER_USER_ID","tokenSecret","AUTH_TOKEN_SECRET","dev","userId","DEV_USER_ID","DEV_ROLE","cms","CMS_TITLE","CMS_URL","ASSIST_URL","ASSIST_USERNAME","ASSIST_PASSWORD","MAILGUN_API_KEY","MAILGUN_DOMAIN","embedly","EMBEDLY_API_KEY","pdf","__dirname","google","clientId","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","instagram","INSTAGRAM_CLIENT_ID","INSTAGRAM_CLIENT_SECRET","spotify","SPOTIFY_CLIENT_ID","SPOTIFY_CLIENT_SECRET","stripe","STRIPE_CLIENT_ID","STRIPE_CLIENT_SECRET","STRIPE_API_KEY","twitter","consumerKey","TWITTER_CONSUMER_KEY","consumerSecret","TWITTER_CONSUMER_SECRET","accessTokenKey","TWITTER_ACCESS_TOKEN_KEY","accessTokenSecret","TWITTER_ACCESS_TOKEN_SECRET","vimeo","VIMEO_CLIENT_ID","VIMEO_CLIENT_SECRET","querystring","providerTokenUri","authUser","superUser","active","toLowerCase","authProvider","params","refresh","providerConfig","providerClientConfig","grant_type","code","client_id","client_secret","redirect_uri","redirectUri","refresh_token","uri","providerAuth","begins","floor","getTime","access_token","getType","setType","item","deleteType","items","getOrder","orderId","body","verifyDiscount","discount","now","dateStart","parse","dateEnd","message","EmbedlyApi","oembed","urls","opts","format","request","version","_request","method","endpoint","requestOptions","qs","extend","jwt","signToken","payload","sign","verifyToken","token","verify","_eval","readdir","getTemplates","templates","getPayload","templateId","template","readFileSync","getPdf","assetSlug","assistPdfUrl","encoding","form","webpackEmptyContext","req","e","shippo","getQuote","address","parcel","addressFrom","object_purpose","zip","fromZip","country","fromCountry","addressTo","distance_unit","mass_unit","shipment","address_from","address_to","ratesReady","attempts","object_status","retrieve","object_id","val","rates","he","Handlebars","jsontoxml","getCatalog","shopLink","productLinkTemplate","shopify","headers","storefrontAccessToken","compile","products","shop","edges","edge","node","handle","encode","description","originalSrc","vendor","availableForSale","priceRange","minVariantPrice","amount","currencyCode","channel","product","Hashids","hashids","getSettings","clientStripeAccountId","stripe_user_id","checkout","order","customerDetails","log","findOrCreateCustomer","customer","createOrder","updateOrCreateStripeCustomer","stripeCustomer","updateCustomer","createCharge","updatedOrder","sendReceipt","orderReceipt","messages","sendNotification","orderNotification","updateOrder","finalOrder","retrieveAccount","accounts","refund","refunds","refund_application_fee","charge","stripe_account","charges","amountRefunded","amount_refunded","newCustomer","createdAt","modifiedAt","phone","billingAddress","shippingAddress","orders","source","customer_id","customers","param","price","quantity","newOrder","shippingMethod","Number","subtotal","tax","rate","includedInPrice","total","show","currency","iso","capture","order_id","statement_descriptor","kebabCase","storeName","toUpperCase","application_fee","ceil","paymentGateway","livemode","from","emailSenderName","emailSenderAddress","to","subject","taxonomy","taxonomySlug","entitiesByTerm","term","entityGroups","createTerm","terms","updateTerm","_term","parent","deleteTerm","getDb","getChanges","changes","importDb","dbBackupFile","fileConents","unlinkAsync","cloudant","destroy"],"mappings":"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","file":"api.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AceApi\"] = factory();\n\telse\n\t\troot[\"AceApi\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = require(\"lodash\");","module.exports = require(\"@babel/runtime/helpers/interopRequireDefault\");","module.exports = require(\"@babel/runtime/regenerator\");","const _ = require('lodash');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\nconst Roles = require('./roles');\n\nconst roles = new Roles();\n\nconst DEFAULT_CLIENT_CONFIG = {\n  _id: 'config',\n  client: {},\n  assets: {},\n  schemas: [],\n  taxonomies: [],\n  users: [],\n  roles: roles.roles(),\n  provider: {},\n  module: {},\n};\n\nclass ClientConfig {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async get() {\n    let clientConfig = DEFAULT_CLIENT_CONFIG;\n\n    try {\n      clientConfig = await Db.connect(this.config).get('config');\n\n      clientConfig = _.merge({}, DEFAULT_CLIENT_CONFIG, clientConfig);\n    } catch (error) {\n      //\n    }\n\n    clientConfig.slug = this.config.slug;\n\n    return clientConfig;\n  }\n\n  async set(clientConfig) {\n    clientConfig._id = 'config';\n\n    delete clientConfig.roles;\n\n    clientConfig = await Helpers.createOrUpdate(this.config, clientConfig);\n\n    clientConfig = _.merge({}, DEFAULT_CLIENT_CONFIG, clientConfig);\n\n    return clientConfig;\n  }\n}\n\n\nmodule.exports = ClientConfig;\n","const Cloudant = require('@cloudant/cloudant');\n\nclass Db {\n  constructor (config, dbName) {\n    this.config = config;\n\n    return Db.connect(config, dbName);\n  }\n\n  static connect (config, dbName) {\n    const cloudant = new Cloudant({\n      url: config.db.url,\n      maxAttempt: 5,\n      plugins: [\n        'promises',\n        {\n          retry: {\n            retryDelayMultiplier: 2,\n            retryInitialDelayMsecs: 500,\n          },\n        },\n      ],\n    });\n\n    return cloudant.db.use(dbName || config.db.name);\n  }\n}\n\nmodule.exports = Db;\n","module.exports = require(\"bluebird\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst Db = require('./db');\n\nclass Helpers {\n  constructor(config) {\n    this.config = config;\n    this.assistUrl = config.assist.url;\n    this.slug = config.slug;\n  }\n\n  static createOrUpdate (config, doc) {\n    return new Promise((resolve, reject) => {\n      Db.connect(config).insert(doc)\n        .then((response) => {\n          doc._id = response.id;\n          doc._rev = response.rev;\n          resolve(doc);\n        }, (error) => {\n          if (error.statusCode !== 409) {\n            reject(error);\n            return;\n          }\n\n          Db.connect(config).get(doc._id)\n            .then((response) => {\n              doc._rev = response._rev;\n\n              Db.connect(config).insert(doc)\n                .then((response) => {\n                  doc._rev = response.rev;\n                  resolve(doc);\n                }, reject);\n            }, reject);\n        });\n    });\n  }\n\n  static chunkUpdate (config, docs, chunkSize = 1000) {\n    return new Promise((resolve, reject) => {\n      const chunks = _.chunk(docs, chunkSize);\n      const promises = [];\n\n      chunks.forEach((chunk) => {\n        promises.push(new Promise((resolve, reject) => {\n          Db.connect(config).bulk({\n            docs: chunk,\n          }).then(resolve, reject);\n        }));\n      });\n\n      Promise.all(promises).then(resolve, reject);\n    });\n  }\n\n  static groupEntities (entities, groupSize = Infinity) {\n    const grouped = [];\n\n    let group = {\n      entities: [],\n    };\n\n    entities.forEach((entity) => {\n      if (!entity.groupBefore || group.entities.length >= groupSize) {\n        group = {\n          entities: [],\n        };\n      }\n\n      group.entities.push(entity);\n\n      if (!entity.groupAfter || group.entities.length >= groupSize) {\n        group.ratio = 0;\n\n        group.entities.forEach((entity) => {\n          group.ratio += (entity.thumbnail || entity).ratio;\n        });\n\n        group.entities.forEach((entity) => {\n          entity.groupRatio = (entity.thumbnail || entity).ratio / group.ratio;\n        });\n\n        grouped.push(group);\n      }\n    });\n\n    return grouped;\n  }\n\n  static now () {\n    return JSON.stringify(new Date()).replace(/\"/g, '');\n  }\n\n  static replace (array, replacementObject, key) {\n    return array.map((object) => {\n      if (object[key] === replacementObject[key]) {\n        return replacementObject;\n      }\n      return object;\n    });\n  }\n\n  thumbnailSrc (thumbnail, settings, cropSlug, cropDefault) {\n    if (!thumbnail) {\n      return '';\n    }\n\n    let settingsArray;\n\n    if (typeof settings === 'string') {\n      settingsArray = settings.split(/,|;/);\n\n      settings = {};\n\n      settingsArray.forEach((setting) => {\n        setting = setting.split(/_|:/);\n\n        settings[setting[0]] = setting[1];\n      });\n    }\n\n    const crop = thumbnail.crops ? thumbnail.crops[cropSlug] : false;\n\n    if (crop) {\n      settings.x = crop[0];\n      settings.y = crop[1];\n      settings.x2 = crop[2];\n      settings.y2 = crop[3];\n    } else if (cropDefault) {\n      settings.g = cropDefault;\n    }\n\n    settingsArray = [];\n\n    _.forEach(settings, (value, key) => {\n      settingsArray.push([key, value].join(':'));\n    });\n\n    const settingsString = settingsArray.join(';');\n\n    if (/(image)/.test(thumbnail.thumbnailType)) {\n      if (thumbnail.ext === 'svg') {\n        return [this.assistUrl, this.slug, thumbnail.name + thumbnail.ext].join('/');\n      }\n\n      return [this.assistUrl, this.slug, 'transform', settingsString, thumbnail.name + thumbnail.ext].join('/');\n    }\n\n    if (/(video)/.test(thumbnail.thumbnailType)) {\n      return [this.assistUrl, this.slug, 'transform', settingsString, thumbnail.name, 'thumb.jpg'].join('/');\n    }\n\n    if (/(oembed|proxy)/.test(thumbnail.thumbnailType)) {\n      const thumbnailUrl = thumbnail.thumbnailUrl.replace(/https?:\\/\\//, '');\n\n      return [this.assistUrl, this.slug, 'proxy', 'transform', settingsString, thumbnailUrl].join('/');\n    }\n\n    return '';\n  }\n\n}\n\nmodule.exports = Helpers;\n","module.exports = require(\"path\");","module.exports = require(\"axios\");","module.exports = require(\"fs\");","const _ = require('lodash');\nconst axios = require('axios');\nconst passwordHash = require('password-hash');\nconst ClientConfig = require('./client-config');\n\nclass Assist {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async deleteFiles(fileNames) {\n    const cc = new ClientConfig(this.config);\n    const clientConfig = await cc.get();\n\n    const assetsSlug = _.get(clientConfig, 'assets.slug', this.config.slug);\n\n    if (fileNames.length === 0) {\n      return [];\n    }\n\n    const result = (await axios.post(`${this.config.assist.url}/${assetsSlug}/file/delete`, { fileNames }, {\n      auth: {\n        username: this.config.assist.username,\n        password: passwordHash.generate(this.config.assist.password),\n      },\n    })).data;\n\n    return result;\n  }\n\n}\n\nmodule.exports = Assist;\n","module.exports = require(\"@cloudant/cloudant\");","const _ = require('lodash');\n\nconst roles = [\n  {\n    name: 'Admin',\n    slug: 'admin',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: true,\n      entityRead: true,\n      entityUpdate: true,\n      entityDelete: true,\n\n      taxonomyCreate: true,\n      taxonomyRead: true,\n      taxonomyUpdate: true,\n      taxonomyDelete: true,\n\n      fileCreate: true,\n      fileRead: true,\n      fileUpdate: true,\n      fileDelete: true,\n\n      config: false,\n      schema: false,\n      user: true,\n      settings: true,\n      userSettings: true,\n      tools: true,\n      ecommerce: true,\n    },\n  },\n  {\n    name: 'Editor',\n    slug: 'editor',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: true,\n      entityRead: true,\n      entityUpdate: true,\n      entityDelete: true,\n\n      taxonomyCreate: true,\n      taxonomyRead: true,\n      taxonomyUpdate: true,\n      taxonomyDelete: true,\n\n      fileCreate: true,\n      fileRead: true,\n      fileUpdate: true,\n      fileDelete: true,\n\n      config: false,\n      schema: false,\n      user: false,\n      settings: false,\n      userSettings: true,\n      tools: false,\n      ecommerce: false,\n    },\n  },\n  {\n    name: 'Guest',\n    slug: 'guest',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: false,\n      entityRead: true,\n      entityUpdate: false,\n      entityDelete: false,\n\n      taxonomyCreate: false,\n      taxonomyRead: true,\n      taxonomyUpdate: false,\n      taxonomyDelete: false,\n\n      fileCreate: false,\n      fileRead: true,\n      fileUpdate: false,\n      fileDelete: false,\n\n      config: false,\n      schema: false,\n      user: false,\n      settings: false,\n      userSettings: false,\n      tools: false,\n      ecommerce: false,\n    },\n  },\n];\n\nclass Roles {\n  roles() {\n    return roles.map(role => Object.freeze(role));\n  }\n  role(slug) {\n    return _.find(this.roles(), { slug });\n  }\n}\n\nmodule.exports = Roles;\n","const path = require('path');\nconst Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst _ = require('lodash');\nconst nodemailer = require('nodemailer');\nconst Createsend = Promise.promisifyAll(require('createsend-node'));\nconst nodemailerMailgunTransport = require('nodemailer-mailgun-transport');\nconst Inky = require('inky').Inky;\nconst mjml2html = require('mjml');\n// eslint-disable-next-line\nconst registerComponent = require('mjml-core').registerComponent;\n// eslint-disable-next-line\nconst registerDependencies = require('mjml-validator').registerDependencies;\nconst { McSection, McImage } = require('mjml-mailchimp');\nconst htmlToText = require('html-to-text');\nconst moment = require('moment');\nconst countries = require('i18n-iso-countries');\nconst sass = Promise.promisifyAll(require('node-sass'));\nconst pug = require('pug');\nconst ejs = require('ejs');\nconst juice = require('juice');\n\nconst ClientConfig = require('./client-config');\nconst Helpers = require('./helpers');\n\nclass Email {\n  constructor(config) {\n    this.config = config;\n\n    this.inky = new Inky();\n\n    registerComponent(McSection);\n    registerComponent(McImage);\n    registerDependencies({\n      'mc-section': ['mj-column', 'mj-group', 'mj-raw'],\n      'mj-column': ['mc-image'],\n      'mj-hero': ['mc-image'],\n    });\n  }\n\n  async getTemplate(templateSlug, templateData = {}, templateOptions = {}) {\n    const options = _.merge({}, {\n      inlineStyles: true,\n      inky: false,\n      mjml: false,\n      skipValidation: false,\n    }, templateOptions);\n\n    let templatePath = path.join(this.config.email.templatesPath, templateSlug);\n\n    try {\n      await fs.statAsync(templatePath);\n    } catch (error) {\n      templatePath = path.resolve('../email', templateSlug);\n    }\n\n    const templateFiles = await fs.readdirAsync(templatePath);\n\n    let htmlFileName = 'html';\n    // Support mjml templates\n    if (_.find(templateFiles, fileName => /^html\\.mjml/.test(fileName))) {\n      htmlFileName = 'html.mjml';\n      options.mjml = true;\n    }\n\n    let htmlFileExtension = 'html';\n    if (_.find(templateFiles, fileName => /\\.pug$/.test(fileName))) {\n      htmlFileExtension = 'pug';\n    }\n    if (_.find(templateFiles, fileName => /\\.ejs$/.test(fileName))) {\n      htmlFileExtension = 'ejs';\n    }\n\n    let style = '';\n    if (_.find(templateFiles, fileName => /^style\\.scss$/.test(fileName))) {\n      style = (await sass.renderAsync({\n        file: path.join(templatePath, 'style.scss'),\n        sourceMapContents: !options.inlineStyles,\n        sourceMapEmbed: !options.inlineStyles,\n      })).css.toString().replace(/\"/g, '\\'');\n    }\n\n    const cc = new ClientConfig(this.config);\n    const clientConfig = await cc.get();\n    const helpers = new Helpers(this.config);\n\n    templateData = _.merge({}, templateData, {\n      config: _.merge({}, _.pick(this.config, ['cms']), _.pick(clientConfig, ['slug', 'client', 'assets'])),\n      helpers,\n      style,\n      moment,\n      countries,\n      templateSlug,\n    });\n\n    let html;\n    if (htmlFileExtension === 'html') {\n      html = fs.readFileAsync(`${templatePath}/${htmlFileName}.${htmlFileExtension}`);\n    }\n    if (htmlFileExtension === 'pug') {\n      html = pug.renderFile(`${templatePath}/${htmlFileName}.${htmlFileExtension}`, templateData);\n    }\n    if (htmlFileExtension === 'ejs') {\n      html = await ejs.renderFile(`${templatePath}/${htmlFileName}.${htmlFileExtension}`, templateData);\n    }\n\n    if (options.mjml) {\n      const convertMjmlResult = mjml2html(html, {\n        level: options.skipValidation ? 'skip' : 'soft',\n      });\n\n      if (convertMjmlResult.errors && convertMjmlResult.errors.length) {\n        throw new Error(_.uniq(convertMjmlResult.errors.map(error => error.formattedMessage)).join('\\n'));\n      }\n\n      html = convertMjmlResult.html;\n    }\n\n    if (options.inky) {\n      html = this.inky.releaseTheKraken(html);\n    }\n\n    if (options.inlineStyles) {\n      html = juice(html, {\n        preserveMediaQueries: true,\n        preserveFontFaces: true,\n        removeStyleTags: false,\n        removeLinkTags: false,\n        preserveImportant: true,\n        webResources: {\n          links: false,\n          scripts: false,\n          images: false,\n          // relativeTo: '',\n        },\n      });\n    }\n\n    return {\n      html,\n      text: htmlToText.fromString(html),\n    };\n  }\n\n  sendEmail(emailOptions, templateSlug, templateData = {}, templateOptions = {}) {\n    return new Promise((resolve, reject) => {\n      const nodemailerMailgun = nodemailer.createTransport(nodemailerMailgunTransport({\n        auth: {\n          api_key: this.config.mailgun.apiKey,\n          domain: this.config.mailgun.domain,\n        },\n      }));\n\n      this.getTemplate(templateSlug, _.merge({}, emailOptions, templateData), templateOptions)\n        .then((emailTemplate) => {\n          emailOptions.html = emailTemplate.html;\n          emailOptions.text = emailTemplate.text;\n\n          nodemailerMailgun.sendMail(emailOptions, (error, metadata) => {\n            if (error) {\n              reject(error);\n              return;\n            }\n\n            resolve({\n              metadata,\n              email: emailOptions,\n            });\n          });\n        }, reject);\n    });\n  }\n\n  subscribe(details, provider, listId) {\n    return new Promise((resolve, reject) => {\n      const cc = new ClientConfig(this.config);\n\n      cc.get()\n        .then((clientConfig) => {\n          if (provider === 'createsend') {\n            if (clientConfig.provider.createsend) {\n              const cs = new Createsend({\n                apiKey: clientConfig.provider.createsend.clientApiKey,\n              });\n\n              const subscribers = Promise.promisifyAll(cs.subscribers);\n\n              subscribers.addSubscriberAsync(listId, {\n                EmailAddress: details.email,\n                Name: details.name,\n                Resubscribe: true,\n                RestartSubscriptionBasedAutoresponders: true,\n              })\n                .then((result) => {\n                  resolve(`Email.subscribe(): ${result.emailAddress}`);\n                })\n                .catch((error) => {\n                  reject(error.Message);\n                });\n\n              return;\n            }\n            reject(new Error('Subscriber list not configured'));\n          }\n        }, reject);\n    });\n  }\n\n}\n\nmodule.exports = Email;\n","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst jsonQuery = require('json-query');\nconst { diff } = require('deep-diff');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\nconst Schema = require('./schema');\nconst Assist = require('./assist');\n\nconst CHUNK_UPDATE_SIZE = 1000;\n\nclass Entity {\n  constructor(config) {\n    this.config = config;\n\n    // Expose helpers\n    this.flattenValues = Entity.flattenValues;\n  }\n\n  static flattenValues(docs) {\n    return docs.map((doc) => {\n      if (!doc.fields || !_.size(doc.fields)) {\n        return doc;\n      }\n\n      doc.fields = _.mapValues(doc.fields, (field) => {\n        if (/entity/.test(field.type) && _.isArray(field.value)) { // entity / entityTile / entityGrid\n          field.value = Entity.flattenValues(field.value);\n        }\n        return field.value;\n      });\n\n      return doc;\n    });\n  }\n\n  static _filterEntityFields(docs, role = 'guest') {\n    const isArray = _.isArray(docs);\n\n    docs = (isArray ? docs : [docs]).map((doc) => {\n      if (_.size(doc.fields)) {\n        doc.fields = _.mapValues(doc.fields, (field) => {\n          if (_.isArray(field.value)) {\n            field.value = field.value.filter((obj) => {\n              if (!obj) {\n                return false;\n              }\n              if (obj.type && obj.type === 'entity' && role === 'guest') {\n                return obj.published !== undefined ? obj.published : true;\n              }\n              return true;\n            });\n          }\n          return field;\n        });\n      }\n      return doc;\n    });\n\n    return isArray ? docs : docs[0];\n  }\n\n  static _appendChildren(docs, childrenMap) {\n    return docs.map((doc) => {\n      if (!_.size(doc.fields)) {\n        return doc;\n      }\n\n      doc.fields = _.mapValues(doc.fields, (field) => {\n        if (_.isArray(field.value)) {\n          field.value = field.value.filter((obj) => {\n            if (!obj) {\n              return false;\n            }\n            if (obj.type === 'entity') {\n              return childrenMap[obj.id] !== undefined;\n            }\n            return true;\n          });\n\n          field.value = field.value.map((obj) => {\n            if (obj.type === 'entity') {\n              obj = _.merge(obj, childrenMap[obj.id]);\n            }\n            obj = _.omitBy(obj, (value, key) => key.startsWith('_'));\n            return obj;\n          });\n        }\n\n        return field;\n      });\n\n      return doc;\n    });\n  }\n\n  static _appendParents(rows, parents = null, role = 'guest') {\n    let entityMap = {};\n\n    rows.forEach((row) => {\n      if (row.doc && row.value.type === 'entity') {\n        entityMap[row.id] = { ...row.doc, parents: [] };\n      }\n    });\n\n    if (parents) {\n      rows.forEach((row) => {\n        if (row.doc && row.value.type === 'parent') {\n          entityMap[row.key].parents.push(Entity._filterEntityFields(row.doc, role));\n        }\n      });\n\n      entityMap = _.mapValues(entityMap, (entity) => {\n        entity.parents = _.uniqBy(entity.parents, entity => entity._id);\n        return entity;\n      });\n    }\n\n    rows = rows.map((row) => {\n      row.doc = entityMap[row.id];\n      return row;\n    });\n\n    rows = rows.filter(row => row.value.type === 'entity');\n\n    return rows;\n  }\n\n  static _fileNames(entities) {\n    const fileNames = [];\n\n    entities.forEach((entity) => {\n      _.forEach(entity.fields, (field) => {\n        if (field.value && field.value.file) {\n          fileNames.push(field.value.file.name);\n        }\n      });\n    });\n\n    return _.uniq(fileNames);\n  }\n\n  async fieldValues(fieldSlug, searchTerm) {\n    const result = await Db.connect(this.config).viewWithList('entity', 'byField', 'search', {\n      startkey: [fieldSlug],\n      endkey: [fieldSlug, {}],\n      group: true,\n      searchTerm,\n    });\n    return result;\n  }\n\n  static _query(data, query, isFieldQuery = false) {\n    query = query.replace(/(\\s\\s|\\t|\\r|\\n)/g, '');\n\n    if (isFieldQuery) {\n      const queryParts = query.trim().split(/\\[|\\]/);\n      const selector = `fields.${queryParts[0]}.value[${queryParts[1] || '*'}]`;\n      const modifier = /\\]:/.test(query) ? `:${query.split(/\\]:/).slice(-1)[0].trim()}` : '';\n      query = `${selector}${modifier}`;\n    }\n\n    const result = jsonQuery(query, {\n      data,\n      locals: {\n        slice: (input, start, end) => _.slice(input, start, end),\n        sample: (input, size = 1) => _.sampleSize(input, size),\n        group: (entities, groupSize = Infinity) => {\n          const grouped = [];\n\n          let group = [];\n\n          entities.forEach((entity) => {\n            if (!entity.groupBefore || group.length >= groupSize) {\n              group = [];\n            }\n\n            group.push(entity);\n\n            if (!entity.groupAfter || group.length >= groupSize) {\n              group.ratio = 0;\n\n              group.forEach((entity) => {\n                group.ratio += (entity.thumbnail || entity).ratio;\n              });\n\n              group.forEach((entity) => {\n                entity.groupRatio = (entity.thumbnail || entity).ratio / group.ratio;\n              });\n\n              grouped.push(group);\n            }\n          });\n\n          return grouped;\n        },\n        pick: (input, ...paths) => _.map(input, (obj) => {\n          const copy = {\n            id: obj.id || undefined,\n          };\n          paths = paths.filter(path => path); // Remove empty paths (tolerate trailing comma in args)\n          paths.forEach((path) => {\n            const pathParts = path.match(/([^\\s]+)/g);\n            const pathFrom = pathParts[0];\n            const pathTo = pathParts[pathParts.length - 1];\n            _.set(copy, pathTo, _.get(obj, pathFrom));\n          });\n          return copy;\n        }),\n      },\n      allowRegexp: true,\n    });\n\n    return result;\n  }\n\n  static _queriesFromString(queryString) {\n    // Remove white space\n    queryString = queryString.replace(/(\\s\\s|\\t|\\r|\\n)/gm, '');\n\n    // Match and store (...args) from query so we can split by comma\n    const methodArgs = queryString.match(/\\(([^)]+)\\)/g);\n\n    // Replace (...args) with empty ()\n    queryString = queryString.replace(/\\(.*?\\)/g, '()');\n\n    // Extract queries\n    let queries = queryString.split(/,(?![^([]*[\\])])/g);\n\n    queries = queries.map((query) => {\n      // Replace () with original (...args)\n      const emptyArgs = query.match(/\\(\\)/g);\n      if (emptyArgs) {\n        _.times(emptyArgs.length, () => {\n          query = query.replace('()', methodArgs.splice(0, 1));\n        });\n      }\n      return query.trim();\n    });\n\n    return queries;\n  }\n\n  async _entitiesById(ids = [], options = {}) {\n    options = _.merge({\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    const query = {\n      include_docs: true,\n    };\n\n    if (ids.length) {\n      query.keys = ids;\n    }\n\n    const result = await Db.connect(this.config)\n      .view('entity', options.parents ? 'byIdExtended' : 'byId', query);\n\n    result.rows = result.rows.map((row) => {\n      row.doc = Entity._filterEntityFields(row.doc, options.role);\n      return row;\n    });\n\n    result.rows = Entity._appendParents(result.rows, options.parents, options.role);\n\n    return result;\n  }\n\n  static _childDepthLimit(children) {\n    let limit = 0;\n    if (_.isNumber(children)) {\n      limit = children - 1;\n    }\n    if (_.isArray(children)) {\n      limit = children.length - 1;\n    }\n    return limit;\n  }\n\n  async _getDocMap(rowsOrDocs, docMap = {}, options = {}) {\n    options._childDepth = options._childDepth || 0;\n\n    if (!options.parents && !options.children) {\n      return docMap;\n    }\n\n    let ids = [];\n    let childIds = [];\n\n    rowsOrDocs.forEach((rowOrDoc) => {\n      const isRow = !!rowOrDoc.doc;\n\n      let doc = isRow ? rowOrDoc.doc : rowOrDoc;\n\n      doc = Entity._filterEntityFields(doc, options.role);\n\n      if (options.children && doc.fields && _.size(doc.fields)) {\n        if (_.isArray(options.children)) {\n          Entity._queriesFromString(options.children[options._childDepth]).forEach((query) => {\n            childIds = childIds.concat(_.flatten(Entity._query(doc, query, true).value).map(obj => obj && obj.id));\n          });\n\n        } else {\n          _.forEach(doc.fields, (field) => {\n            if (_.isArray(field.value)) {\n              field.value = field.value.filter(obj => obj);\n\n              field.value.forEach((obj) => {\n                if (obj.id) {\n                  childIds.push(obj.id);\n                }\n              });\n            }\n          });\n        }\n      }\n\n      ids.push(isRow ? rowOrDoc.id : doc._id || doc.id);\n    });\n\n    ids = _.uniq(ids);\n    ids = ids.filter(id => !docMap[id]);\n\n    let docs = [];\n    if (ids.length > 0) {\n      docs = (await this._entitiesById(ids, options)).rows.map(row => row.doc);\n\n      docs.forEach((doc) => {\n        docMap[doc._id] = doc;\n      });\n    }\n\n    childIds = _.uniq(childIds);\n    childIds = childIds.filter(id => !docMap[id]);\n\n    let childDocs = [];\n    if (childIds.length > 0) {\n      childDocs = (await this._entitiesById(childIds, { ...options, parents: false })).rows.map(row => row.doc);\n\n      childDocs.forEach((doc) => {\n        docMap[doc._id] = doc;\n      });\n    }\n\n    if (!options.children || (options._childDepth === Entity._childDepthLimit(options.children))) {\n      return docMap;\n    }\n\n    docMap = await this._getDocMap(childDocs, docMap, { ...options, parents: false, _childDepth: options._childDepth + 1 });\n\n    return docMap;\n  }\n\n  static _mergeDocs(docs, docMap, options = { children: false, parents: false }) {\n    options._childDepth = options._childDepth || 0;\n\n    if (options.children && (options._childDepth - 1 === Entity._childDepthLimit(options.children))) {\n      return docs;\n    }\n\n    docs = docs.map((rowOrDoc) => {\n      const isRow = !!rowOrDoc.doc;\n\n      let doc = isRow ? rowOrDoc.doc : rowOrDoc;\n\n      if (docMap[rowOrDoc.id || rowOrDoc._id]) {\n        doc = _.merge({}, doc, docMap[rowOrDoc.id || rowOrDoc._id]);\n      }\n\n      if (options.children && doc.fields && _.size(doc.fields)) {\n\n        let fieldQueryMap;\n\n        if (_.isArray(options.children)) {\n          fieldQueryMap = {};\n          Entity._queriesFromString(options.children[options._childDepth]).forEach((query) => {\n            const key = query.split(/\\[|\\]/)[0];\n            fieldQueryMap[key] = query;\n          });\n        }\n\n        doc.fields = _.mapValues(doc.fields, (field, fieldSlug) => {\n          if (_.isArray(field.value)) {\n            field.value = field.value.filter(obj => obj);\n\n            if (!fieldQueryMap || (fieldQueryMap && fieldQueryMap[fieldSlug])) {\n              if (fieldQueryMap && fieldQueryMap[fieldSlug]) {\n                field.value = field.value.filter(obj => obj.id && docMap[obj.id]);\n              }\n\n              field.value = field.value.map((obj) => {\n                if (obj && obj.id && docMap[obj.id]) {\n                  obj = _.merge(obj, docMap[obj.id] || {});\n                  obj = _.omitBy(obj, (value, key) => key.startsWith('_'));\n                }\n                return obj;\n              });\n\n              field.value = Entity._mergeDocs(field.value, docMap, { ...options, _childDepth: options._childDepth + 1 });\n            }\n          }\n          return field;\n        });\n\n        doc.fields = _.mapValues(doc.fields, (field, fieldSlug) => {\n          if (_.isArray(field.value)) {\n            if (fieldQueryMap && fieldQueryMap[fieldSlug]) {\n              field.value = _.flatten(Entity._query(doc, fieldQueryMap[fieldSlug], true).value);\n            }\n          }\n          return field;\n        });\n      }\n\n      if (_.isArray(options.parents) && doc.parents) {\n        doc.parents = _.flatten(Entity._query(doc.parents, options.parents[0]).value);\n      }\n\n      if (isRow) {\n        rowOrDoc.doc = doc;\n      } else {\n        rowOrDoc = doc;\n      }\n\n      return rowOrDoc;\n    });\n\n    return docs;\n  }\n\n  async _extendRowsOrDocs(rowsOrDocs, options = {}) {\n    options = _.merge({\n      select: false,\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    let docMap = await this._getDocMap(rowsOrDocs, {}, options);\n\n    rowsOrDocs = Entity._mergeDocs(rowsOrDocs, docMap, options);\n\n    if (options.select) {\n      rowsOrDocs = _.flatten(Entity._query(rowsOrDocs, options.select).value);\n    }\n\n    docMap = null;\n\n    return rowsOrDocs;\n  }\n\n  _removeChildren(entities) {\n    return new Promise((resolve, reject) => {\n      if (entities.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      entities = entities.map(entity => entity._id);\n\n      Db.connect(this.config).view('entity', 'byChildren', {\n        keys: entities,\n        include_docs: true,\n      })\n        .then((response) => {\n          const updatedEntities = _.uniqBy(response.rows, row => row.doc._id).map((row) => {\n            row.doc.fields = _.mapValues(row.doc.fields, (field) => {\n              if (_.isArray(field.value)) {\n                field.value = _.filter(field.value, obj => !(obj.type === 'entity' && entities.indexOf(obj.id) !== -1));\n              }\n              return field;\n            });\n\n            return row.doc;\n          });\n\n          if (updatedEntities.length === 0) {\n            resolve([]);\n            return;\n          }\n\n          Helpers.chunkUpdate(this.config, updatedEntities, CHUNK_UPDATE_SIZE)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  _updateChildren(entities) {\n    return new Promise((resolve, reject) => {\n      if (entities.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      const entityMap = {};\n\n      entities = entities.map((entity) => {\n        entityMap[entity._id] = entity;\n\n        return entity._id;\n      });\n\n      Db.connect(this.config).view('entity', 'byChildren', {\n        keys: entities,\n        include_docs: true,\n      })\n        .then((response) => {\n          const entities = response.rows.map((row) => {\n            const entity = row.doc;\n\n            _.forEach(entity.fields, (field, fieldSlug) => {\n              if (_.isArray(field.value)) {\n                entity.fields[fieldSlug].value = field.value\n                  .filter(obj => obj)\n                  .map((obj) => {\n                    if (obj.type === 'entity' && entityMap[obj.id]) {\n                      obj.slug = entityMap[obj.id].slug;\n                      obj.title = entityMap[obj.id].title;\n                      obj.schema = entityMap[obj.id].schema;\n                      obj.published = entityMap[obj.id].published;\n\n                      if (entityMap[obj.id].thumbnail) {\n                        obj.thumbnail = entityMap[obj.id].thumbnail;\n                      } else {\n                        obj.thumbnail = null;\n                      }\n                    }\n\n                    return obj;\n                  });\n              }\n            });\n\n            return entity;\n          });\n\n          Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  async entityList(ids = [], options = {}) {\n    options = _.merge({\n      select: false,\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    const result = await this._entitiesById(ids, options);\n\n    const rows = await this._extendRowsOrDocs(result.rows, options);\n\n    return rows;\n  }\n\n  _entitySearch(query, options = {}) {\n    return new Promise((resolve, reject) => {\n      query.limit = Math.min(query.limit || 200, 200);\n      query.sort = _.isString(query.sort) ? `\"${query.sort}\"` : query.sort;\n\n      if (options.children) {\n        query.include_docs = true;\n      }\n\n      if (!query.include_fields) {\n        query.include_fields = [];\n      }\n\n      if (_.isArray(query.include_fields)) {\n        query.include_fields = JSON.stringify(query.include_fields);\n      }\n\n      if (!query.sort) {\n        delete query.sort;\n      }\n      if (!query.bookmark) {\n        delete query.bookmark;\n      }\n      if (!query.index) {\n        delete query.index;\n      }\n      if (!query.group_field) {\n        delete query.group_field;\n      }\n\n      Db.connect(this.config).search('entity', query.index || 'all', query)\n        .then((result) => {\n\n          if (result.groups) {\n            const promises = [];\n\n            result.groups = result.groups.map((group) => {\n              promises.push(new Promise((resolve, reject) => {\n                if ((!options.children && !options.parents) || group.total_rows === 0) {\n                  resolve();\n                  return;\n                }\n\n                this._extendRowsOrDocs(group.hits, options)\n                  .then((docs) => {\n                    group.hits = docs;\n\n                    resolve();\n                  }, reject);\n              }));\n              return group;\n            });\n\n            Promise.all(promises)\n              .then(() => {\n                resolve(result);\n              }, reject);\n\n            return;\n          }\n\n          this._extendRowsOrDocs(result.rows, options)\n            .then((docs) => {\n              result.rows = docs;\n\n              resolve(result);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  entitySearch(query, options = {}) {\n    options = _.merge({\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    return new Promise((resolve, reject) => {\n      const limit = query.limit || 25;\n\n      if (limit <= 200) {\n        this._entitySearch(query, options)\n          .then(resolve, reject);\n        return;\n      }\n\n      let rows = [];\n      let groups = [];\n\n      function __entitySearch(bookmark) {\n        const _query = _.clone(query);\n\n        if (bookmark) {\n          _query.bookmark = bookmark;\n        }\n\n        this._entitySearch(_query, options)\n          .then((result) => {\n            if (result.rows) {\n              rows = rows.concat(result.rows);\n            }\n            if (result.groups) {\n              groups = groups.concat(result.groups);\n            }\n\n            if (rows.length < result.total_rows && rows.length < limit) {\n              __entitySearch.call(this, result.bookmark);\n              return;\n            }\n\n            result.rows = rows;\n            result.groups = groups;\n\n            resolve(result);\n          }, reject);\n      }\n\n      __entitySearch.call(this);\n    });\n  }\n\n  async entityFind(query, options = {}) {\n    options = _.merge({\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    let result;\n\n    try {\n      result = await Db.connect(this.config).find(query);\n    } catch (error) {\n      if (error.error === 'no_usable_index') {\n        const cc = new ClientConfig(this.config);\n        const clientConfig = await cc.get();\n\n        const schema = new Schema(this.config);\n        await schema.updateEntityIndex(clientConfig.schemas);\n\n        result = await Db.connect(this.config).find(query);\n      }\n    }\n\n    if (options.children === false) {\n      return result;\n    }\n\n    if (query.fields && query.fields.indexOf('_id') === -1) {\n      throw new Error('_id field required for `children`');\n    }\n\n    result.docs = await this._extendRowsOrDocs(result.docs, options);\n\n    return result;\n  }\n\n  entityRevisions(entityId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).get(entityId, {\n        revs_info: true,\n      })\n        .then((response) => {\n          const revisionIds = [];\n\n          response._revs_info.forEach((revision) => {\n            if (revision.status === 'available') {\n              revisionIds.push(revision.rev);\n            }\n          });\n\n          Db.connect(this.config).get(entityId, {\n            open_revs: JSON.stringify(revisionIds),\n          })\n            .then((response) => {\n              const revisions = [];\n              const childrenIds = [];\n\n              response.forEach((revision) => {\n                if (revision.ok) {\n                  revisions.push(revision.ok);\n\n                  _.forEach(revision.ok.fields, (field) => {\n                    if (/entity/.test(field.type)) {\n                      _.forEach(field.value, (obj) => {\n                        if (obj.id) {\n                          childrenIds.push(obj.id);\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n\n              Db.connect(this.config).fetch({\n                keys: _.uniq(childrenIds),\n                include_docs: true,\n              })\n                .then((result) => {\n                  const childrenMap = {};\n\n                  result.rows.forEach((row) => {\n                    try {\n                      childrenMap[row.doc._id] = row.doc;\n                    } catch (error) {\n                      console.error('Error: child no longer exists');\n                    }\n                  });\n\n                  resolve(Entity._appendChildren(revisions, childrenMap));\n                }, reject);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  entityCreate(entity) {\n    return new Promise((resolve, reject) => {\n      entity.type = 'entity';\n\n      Db.connect(this.config).insert(entity)\n        .then((response) => {\n          entity._id = response.id;\n          entity._rev = response.rev;\n\n          resolve(entity);\n        }, reject);\n    });\n  }\n\n  entityRead(entityId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).get(entityId)\n        .then(resolve, reject);\n    });\n  }\n\n  async entityUpdate(entities, restore) {\n    entities = _.isArray(entities) ? entities : [entities];\n\n    const entityMap = {};\n\n    const entityIds = entities.map((entityOrEntityId) => {\n      let entityId;\n\n      if (_.isObject(entityOrEntityId)) {\n        entityId = entityOrEntityId._id;\n        entityMap[entityId] = entityOrEntityId;\n      }\n      if (_.isString(entityOrEntityId)) {\n        entityId = entityOrEntityId;\n      }\n\n      return entityId;\n    });\n\n    const response = await Db.connect(this.config).fetch({\n      keys: entityIds,\n      include_docs: true,\n    });\n\n    const children = [];\n    const oldFileNames = [];\n\n    entities = response.rows.map((row) => {\n      const oldEntity = row.doc;\n      const newEntity = entityMap[oldEntity._id];\n\n      let entity = oldEntity;\n\n      if (newEntity) {\n        delete newEntity._rev;\n\n        const diffs = diff(oldEntity, newEntity);\n\n        diffs.forEach((diff) => {\n\n          // If any reference fields have changed, update all references\n          if (/published|slug|title|thumbnail/.test(diff.path[0])) {\n            if (children.indexOf(newEntity) === -1 && entityIds.indexOf(newEntity._id) !== -1) {\n              children.push(newEntity);\n            }\n          }\n\n          // If any file fields have changed, remove the old file\n          if (diff.path[0] === 'fields' && diff.path[2] === 'value') {\n            const field = oldEntity.fields[diff.path[1]];\n            if (/attachment|image|audio|video/.test(field.type) && field.value) {\n              oldFileNames.push(field.value.file.name);\n            }\n          }\n\n        });\n\n        entity = _.mergeWith({}, oldEntity, newEntity, (a, b) => {\n          if (_.isArray(a) && _.isArray(b)) {\n            return b;\n          }\n          return undefined;\n        });\n      }\n\n      if (restore) {\n        entity.trashed = false;\n      }\n\n      return entity;\n    });\n\n    if (oldFileNames.length) {\n      // TODO: fix delete orphaned files\n      // const assist = new Assist(this.config);\n      // await assist.deleteFiles(oldFileNames);\n    }\n\n    if (children.length) {\n      await this._updateChildren(children);\n    }\n\n    const result = await Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE);\n\n    return result;\n  }\n\n  async entityDelete(entityIds, forever = false) {\n    let entities;\n    let filesResult;\n\n    if (entityIds === 'trashed') {\n      forever = true;\n\n      entities = (await Db.connect(this.config).view('entity', 'trashed', {\n        include_docs: true,\n      })).rows;\n\n    } else {\n      entities = (await Db.connect(this.config).fetch({\n        keys: _.isArray(entityIds) ? entityIds : [entityIds],\n        include_docs: true,\n      })).rows;\n    }\n\n    entities = entities.filter(entity => !entity.value || !entity.value.deleted);\n\n    entities = entities.map(entity => entity.doc);\n\n    await this._removeChildren(entities);\n\n    if (forever) {\n      const fileNames = Entity._fileNames(entities);\n\n      if (fileNames.length) {\n        const assist = new Assist(this.config);\n        filesResult = await assist.deleteFiles(fileNames);\n      }\n\n      entities = entities.map(entity => ({\n        _id: entity._id,\n        _rev: entity._rev,\n        _deleted: true,\n      }));\n\n    } else {\n      entities = entities.map((entity) => {\n        entity.trashed = true;\n        return entity;\n      });\n    }\n\n    const entitiesResult = await Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE);\n\n    return {\n      entities: entitiesResult,\n      files: filesResult,\n    };\n  }\n\n}\n\nmodule.exports = Entity;\n","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\nconst Fields = require('./fields');\n\nclass Schema {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async create(schema) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.schemas.push(schema);\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(schemaSlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const schema = _.find(clientConfig.schemas, { slug: schemaSlug });\n\n    if (!schema) {\n      throw Error(`Schema not found: ${schemaSlug}`);\n    }\n\n    return schema;\n  }\n\n  async update(schema) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.schemas, { slug: schema.slug });\n\n    if (index === -1) {\n      throw Error(`Schema not found: ${schema.slug}`);\n    }\n\n    clientConfig.schemas.splice(index, 1, schema);\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(schemaSlugs) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    schemaSlugs = _.isArray(schemaSlugs) ? schemaSlugs : [schemaSlugs];\n\n    clientConfig.schemas = clientConfig.schemas.filter(schema => schemaSlugs.indexOf(schema.slug) === -1);\n\n    clientConfig.schemas = clientConfig.schemas.map((schema) => {\n      if (!schema.fields) {\n        return schema;\n      }\n      schema.fields = schema.fields.map((field) => {\n        if (!field.settings) {\n          return field;\n        }\n        if (field.settings.schemas) {\n          field.settings.schemas = field.settings.schemas.filter(schema => schemaSlugs.indexOf(schema) === -1);\n        }\n        return field;\n      });\n      return schema;\n    });\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async updateAll(schemas) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.schemas = schemas;\n\n    // await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async updateEntityIndex(schemas) {\n    let fields = [];\n\n    schemas.forEach((schema) => {\n      fields = fields.concat(schema.fields);\n    });\n\n    fields = _.uniqBy(fields, 'slug');\n\n    const index = {\n      name: 'entity',\n      type: 'text',\n      ddoc: 'entityIndex',\n      index: {\n        default_field: {\n          enabled: true,\n          analyzer: 'standard',\n        },\n        selector: {\n          $and: [\n            {\n              type: 'entity',\n            },\n          ],\n        },\n        fields: [\n          {\n            name: 'published',\n            type: 'boolean',\n          },\n          {\n            name: 'trashed',\n            type: 'boolean',\n          },\n          {\n            name: 'title',\n            type: 'string',\n          },\n          {\n            name: 'slug',\n            type: 'string',\n          },\n          {\n            name: 'schema',\n            type: 'string',\n          },\n          {\n            name: 'modifiedAt',\n            type: 'string',\n          },\n          {\n            name: 'publishedAt',\n            type: 'string',\n          },\n        ],\n      },\n    };\n\n    fields.forEach((field) => {\n      const fieldRef = Fields.field(field.type);\n\n      if (/number|string|boolean/.test(fieldRef.dataType)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value`,\n          type: fieldRef.dataType,\n        });\n      }\n\n      if (/array/.test(fieldRef.dataType)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value.[].slug`,\n          type: 'string',\n        });\n      }\n\n      if (/taxonomy/.test(field.type)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value.terms.[].slug`,\n          type: 'string',\n        });\n      }\n    });\n\n    const result = await Db.connect(this.config).index(index);\n\n    return result;\n  }\n\n}\n\nmodule.exports = Schema;\n","const _ = require('lodash');\n\nconst fields = [\n  {\n    type: 'attachment',\n    name: 'Attachment',\n    dataType: null,\n  },\n  {\n    type: 'audio',\n    name: 'Audio',\n    dataType: null,\n  },\n  {\n    type: 'checkbox',\n    name: 'Checkbox',\n    dataType: 'boolean',\n  },\n  {\n    type: 'color',\n    name: 'Color',\n    dataType: 'string',\n  },\n  {\n    type: 'date',\n    name: 'Date',\n    dataType: 'string',\n  },\n  {\n    type: 'embedly',\n    name: 'Embedly',\n    dataType: null,\n  },\n  {\n    type: 'entity',\n    name: 'Entity',\n    dataType: 'array',\n  },\n  {\n    type: 'entityGrid',\n    name: 'Entity Grid',\n    dataType: 'array',\n  },\n  {\n    type: 'entityTile',\n    name: 'Entity Tile',\n    dataType: 'array',\n  },\n  {\n    type: 'image',\n    name: 'Image',\n    dataType: null,\n  },\n  {\n    type: 'keyValue',\n    name: 'Key Value',\n    dataType: null,\n  },\n  {\n    type: 'number',\n    name: 'Number',\n    dataType: 'number',\n  },\n  {\n    type: 'richText',\n    name: 'Rich Text',\n    dataType: null,\n  },\n  {\n    type: 'select',\n    name: 'Select',\n    dataType: 'array',\n  },\n  {\n    type: 'taxonomy',\n    name: 'Taxonomy',\n    dataType: null,\n  },\n  {\n    type: 'text',\n    name: 'Text',\n    dataType: 'string',\n  },\n  {\n    type: 'textArea',\n    name: 'Text Area',\n    dataType: 'string',\n  },\n  {\n    type: 'user',\n    name: 'User',\n    dataType: 'array',\n  },\n  {\n    type: 'video',\n    name: 'Video',\n    dataType: null,\n  },\n  {\n    type: 'vimeo',\n    name: 'Vimeo',\n    dataType: null,\n  },\n];\n\nclass Fields {\n  static fields() {\n    return fields.map(field => Object.freeze(field));\n  }\n  static field(type) {\n    return _.find(Fields.fields(), { type });\n  }\n}\n\nmodule.exports = Fields;\n","module.exports = require(\"request-promise\");","function Api() { }\n\nApi.defaultConfig = require('./config.default');\n\nApi.Assist = (...args) => new (require('./lib/assist'))(...args);\nApi.Auth = (...args) => new (require('./lib/auth'))(...args);\nApi.ClientConfig = (...args) => new (require('./lib/client-config'))(...args);\nApi.Db = (...args) => new (require('./lib/db'))(...args);\nApi.Ecommerce = (...args) => new (require('./lib/ecommerce'))(...args);\nApi.Email = (...args) => new (require('./lib/email'))(...args);\nApi.Embedly = (...args) => new (require('./lib/embedly'))(...args);\nApi.Entity = (...args) => new (require('./lib/entity'))(...args);\nApi.Fields = (...args) => new (require('./lib/fields'))(...args);\nApi.Helpers = (...args) => new (require('./lib/helpers'))(...args);\nApi.Instagram = (...args) => new (require('./lib/instagram'))(...args);\nApi.Jwt = (...args) => new (require('./lib/jwt'))(...args);\nApi.Pdf = (...args) => new (require('./lib/pdf'))(...args);\nApi.Roles = (...args) => new (require('./lib/roles'))(...args);\nApi.Schema = (...args) => new (require('./lib/schema'))(...args);\nApi.Settings = (...args) => new (require('./lib/settings'))(...args);\nApi.Shippo = (...args) => new (require('./lib/shippo'))(...args);\nApi.Shopify = (...args) => new (require('./lib/shopify'))(...args);\nApi.Stripe = (...args) => new (require('./lib/stripe'))(...args);\nApi.Taxonomy = (...args) => new (require('./lib/taxonomy'))(...args);\nApi.Tools = (...args) => new (require('./lib/tools'))(...args);\nApi.User = (...args) => new (require('./lib/user'))(...args);\n\nmodule.exports = Api;\n","const path = require('path');\n\nconst config = {\n  environment: process.env.ENVIRONMENT || 'development',\n  debug: process.env.DEBUG || false,\n\n  slug: process.env.SLUG,\n  baseUrl: process.env.BASE_URL || '',\n\n  db: {\n    url: process.env.DB_URL,\n    host: process.env.DB_HOST,\n    name: process.env.DB_NAME,\n    requestPlugin: process.env.DB_REQUEST_PLUGIN,\n    meterType: process.env.DB_METER_TYPE,\n  },\n\n  auth: {\n    superUserId: process.env.AUTH_SUPER_USER_ID,\n    tokenSecret: process.env.AUTH_TOKEN_SECRET || 'change_this_secret',\n  },\n\n  dev: {\n    userId: process.env.DEV_USER_ID || 'dev',\n    role: process.env.DEV_ROLE || 'super',\n  },\n\n  cms: {\n    title: process.env.CMS_TITLE,\n    url: process.env.CMS_URL,\n  },\n\n  assist: {\n    url: process.env.ASSIST_URL,\n    username: process.env.ASSIST_USERNAME,\n    password: process.env.ASSIST_PASSWORD,\n  },\n\n  mailgun: {\n    apiKey: process.env.MAILGUN_API_KEY,\n    domain: process.env.MAILGUN_DOMAIN,\n  },\n\n  embedly: {\n    apiKey: process.env.EMBEDLY_API_KEY,\n  },\n\n  pdf: {\n    templatesPath: path.resolve(__dirname, 'pdf'),\n  },\n\n  email: {\n    templatesPath: path.resolve(__dirname, 'email'),\n  },\n\n  provider: {\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    },\n\n    instagram: {\n      clientId: process.env.INSTAGRAM_CLIENT_ID,\n      clientSecret: process.env.INSTAGRAM_CLIENT_SECRET,\n    },\n\n    spotify: {\n      clientId: process.env.SPOTIFY_CLIENT_ID,\n      clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n    },\n\n    stripe: {\n      clientId: process.env.STRIPE_CLIENT_ID,\n      clientSecret: process.env.STRIPE_CLIENT_SECRET,\n      apiKey: process.env.STRIPE_API_KEY,\n    },\n\n    twitter: {\n      consumerKey: process.env.TWITTER_CONSUMER_KEY,\n      consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n      accessTokenKey: process.env.TWITTER_ACCESS_TOKEN_KEY,\n      accessTokenSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n    },\n\n    vimeo: {\n      clientId: process.env.VIMEO_CLIENT_ID,\n      clientSecret: process.env.VIMEO_CLIENT_SECRET,\n    },\n  },\n};\n\nmodule.exports = config;\n","module.exports = require(\"password-hash\");","const _ = require('lodash');\nconst querystring = require('querystring');\nconst axios = require('axios');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\n\nconst providerTokenUri = {\n  google: 'https://www.googleapis.com/oauth2/v4/token',\n  instagram: 'https://api.instagram.com/oauth/access_token',\n  stripe: 'https://connect.stripe.com/oauth/token',\n  vimeo: 'https://api.vimeo.com/oauth/access_token',\n  spotify: 'https://accounts.spotify.com/api/token',\n};\n\nclass Auth {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async authUser(slug, userId) {\n    const isSuperUser = _.get(this.config, 'auth.superUserId', '').split(',').map(superUser => superUser.trim()).indexOf(userId) > -1;\n\n    if (isSuperUser) {\n      return {\n        id: userId,\n        active: true,\n        role: 'super',\n      };\n    }\n\n    const clientConfig = await Db.connect(this.config, slug).get('config');\n\n    const user = _.find(clientConfig.users, user => user.email.toLowerCase() === userId.toLowerCase());\n\n    if (!user) {\n      throw Error(`User not found: ${userId}`);\n    }\n\n    if (!user.active) {\n      throw Error(`User not active: ${userId}`);\n    }\n\n    return user;\n  }\n\n  async authProvider(provider, params = {}, userId = null, refresh = false) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const providerConfig = _.merge({}, this.config.provider[provider], params || {});\n\n    let providerClientConfig;\n\n    if (userId) {\n      providerClientConfig = _.get(clientConfig, ['userSettings', userId, 'provider', provider]);\n    } else {\n      providerClientConfig = _.get(clientConfig, ['provider', provider]);\n    }\n\n    if (!providerClientConfig) {\n      providerClientConfig = {};\n    }\n\n    const data = {\n      grant_type: refresh ? 'refresh_token' : 'authorization_code',\n      code: params && params.code ? params.code : undefined,\n      client_id: providerConfig.clientId,\n      client_secret: providerConfig.clientSecret,\n      redirect_uri: providerConfig.redirectUri,\n      refresh_token: refresh ? providerClientConfig.refresh_token : undefined,\n    };\n\n    const uri = providerTokenUri[provider];\n\n    let providerAuth;\n\n    try {\n      providerAuth = (await axios.post(uri, querystring.stringify(data))).data;\n    } catch (error) {\n      throw new Error(JSON.stringify(error.response.data));\n    }\n\n    providerClientConfig = _.merge({}, providerClientConfig, providerAuth);\n    providerClientConfig.begins = Math.floor(new Date().getTime() / 1000);\n\n    if (provider === 'google') {\n      try {\n        providerClientConfig.user = (await axios.get(`https://www.googleapis.com/plus/v1/people/me?access_token=${providerClientConfig.access_token}`)).data;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (provider === 'spotify') {\n      try {\n        providerClientConfig.user = (await axios.get(`https://api.spotify.com/v1/me?access_token=${providerClientConfig.access_token}`)).data;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (userId) {\n      _.set(clientConfig, ['userSettings', userId, 'provider', provider], providerClientConfig);\n    } else {\n      _.set(clientConfig, ['provider', provider], providerClientConfig);\n    }\n\n    return cc.set(clientConfig);\n  }\n\n}\n\nmodule.exports = Auth;\n","module.exports = require(\"querystring\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\n\nclass Ecommerce {\n  constructor(config) {\n    this.config = config;\n  }\n\n  getType(type, query) {\n    return new Promise((resolve, reject) => {\n      query.sort = _.isString(query.sort) ? `\"${query.sort}\"` : query.sort;\n\n      Db.connect(this.config).search('ecommerce', type, query)\n        .then(resolve, reject);\n    });\n  }\n\n  setType(type, item) {\n    return new Promise((resolve, reject) => {\n      item.type = type;\n\n      Helpers.createOrUpdate(this.config, item)\n        .then(resolve, reject);\n    });\n  }\n\n  deleteType(items) {\n    return new Promise((resolve, reject) => {\n      items = items.map(item => ({\n        _id: item._id,\n        _rev: item._rev,\n        _deleted: true,\n      }));\n\n      Helpers.chunkUpdate(this.config, items, 1000)\n        .then(resolve, reject);\n    });\n  }\n\n  getOrder(orderId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'orderByOrderId', {\n        key: orderId,\n        include_docs: true,\n      })\n        .then((body) => {\n          if (!body.rows.length) {\n            reject(new Error('Order not found'));\n            return;\n          }\n\n          resolve(body.rows[0].doc);\n        }, reject);\n    });\n  }\n\n  verifyDiscount(code) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'discountByCode', {\n        keys: [code],\n        include_docs: true,\n      })\n        .then((body) => {\n          if (body.rows.length) {\n            const discount = body.rows[0].doc;\n\n            const now = new Date().getTime();\n\n            const dateStart = new Date(Date.parse(discount.dateStart)).getTime();\n            const dateEnd = new Date(Date.parse(discount.dateEnd)).getTime();\n\n            if (dateStart > now) {\n              reject(new Error('Discount not valid (not begun)'));\n              return;\n\n            }\n\n            if (dateEnd < now) {\n              reject(new Error('Discount not valid (expired)'));\n              return;\n            }\n\n            resolve(discount);\n\n          } else {\n            reject(new Error({\n              statusCode: 404,\n              message: `Discount code not found (${code})`,\n            }));\n          }\n        }, reject);\n    });\n  }\n\n}\n\nmodule.exports = Ecommerce;\n","module.exports = require(\"nodemailer\");","module.exports = require(\"createsend-node\");","module.exports = require(\"nodemailer-mailgun-transport\");","module.exports = require(\"inky\");","module.exports = require(\"mjml\");","module.exports = require(\"mjml-core\");","module.exports = require(\"mjml-validator\");","module.exports = require(\"mjml-mailchimp\");","module.exports = require(\"html-to-text\");","module.exports = require(\"moment\");","module.exports = require(\"i18n-iso-countries\");","module.exports = require(\"node-sass\");","module.exports = require(\"pug\");","module.exports = require(\"ejs\");","module.exports = require(\"juice\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst EmbedlyApi = require('embedly');\n\nclass Embedly {\n  constructor(config) {\n    this.config = config;\n  }\n\n  oembed(urls) {\n    return new Promise((resolve, reject) => {\n      const embedly = new EmbedlyApi({\n        key: this.config.embedly.apiKey,\n      });\n\n      const opts = {\n        urls: _.isArray(urls) ? urls : [urls],\n        format: 'json',\n      };\n\n      embedly.oembed(opts, (error, result) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(result);\n      });\n    });\n  }\n\n}\n\nmodule.exports = Embedly;\n","module.exports = require(\"embedly\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"json-query\");","module.exports = require(\"deep-diff\");","const _ = require('lodash');\nconst request = require('request-promise');\n\nclass Instagram {\n  constructor(options) {\n    const defaultOptions = {\n      client_id: null,\n      access_token: null,\n      version: 'v1',\n      host: 'https://api.instagram.com',\n    };\n\n    this.options = _.merge({}, defaultOptions, options || {});\n  }\n\n  async _request(method, endpoint, query) {\n    const requestOptions = {\n      method,\n      url: [this.options.host, this.options.version, endpoint].join('/'),\n      qs: {\n        access_token: query.access_token || this.options.access_token,\n        client_id: query.client_id || this.options.client_id,\n      },\n    };\n\n    requestOptions.qs = _.extend({}, requestOptions.qs, query);\n\n    const response = await request(requestOptions);\n\n    return JSON.parse(response);\n  }\n\n  get(endpoint, query) {\n    return this._request('GET', endpoint, query);\n  }\n}\n\nmodule.exports = Instagram;\n","const jwt = require('jsonwebtoken');\n\nclass Jwt {\n  constructor(config) {\n    this.config = config;\n  }\n\n  signToken(payload, options = {}) {\n    return jwt.sign(payload, this.config.auth.tokenSecret, options);\n  }\n\n  verifyToken(token) {\n    return jwt.verify(token, this.config.auth.tokenSecret);\n  }\n}\n\nmodule.exports = Jwt;\n","module.exports = require(\"jsonwebtoken\");","const fs = require('fs');\nconst path = require('path');\nconst _ = require('lodash');\nconst _eval = require('eval');\nconst request = require('request-promise');\nconst readdir = require('recursive-readdir');\nconst Entity = require('./entity');\nconst ClientConfig = require('./client-config');\n\nclass Pdf {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getTemplates() {\n    const templates = {};\n\n    const files = await readdir(this.config.pdf.templatesPath);\n\n    files.forEach((file) => {\n      if (!/\\.js$/.test(file)) {\n        return;\n      }\n\n      const id = file\n        .replace(`${this.config.pdf.templatesPath}/`, '')\n        .replace('.js', '');\n\n      // eslint-disable-next-line\n      templates[id] = require(file);\n    });\n\n    return templates;\n  }\n\n  async getPayload(templateId, entityId, role) {\n    // if (!this.templates) {\n    //   this.templates = await this.getTemplates();\n    // }\n\n    // if (!this.templates[templateId]) {\n    //   throw new Error('Template not found');\n    // }\n\n    const template = _eval(fs.readFileSync(path.join(this.config.pdf.templatesPath, `${templateId}.js`), 'utf-8'), `${templateId}.js`, {}, true);\n\n    const entity = new Entity(this.config);\n\n    const entities = (await entity.entityList([entityId], { children: 2, role })).map(row => row.doc);\n\n    if (entities.length === 0) {\n      throw new Error('Entity not found');\n    }\n\n    const payload = template(Entity.flattenValues(entities)[0]);\n\n    return payload;\n  }\n\n  async getPdf(payload) {\n    const cc = new ClientConfig(this.config);\n    const clientConfig = await cc.get();\n\n    const assetSlug = _.get(clientConfig, 'assets.slug', this.config.slug);\n    const assistPdfUrl = `${this.config.assist.url}/${assetSlug}/pdf/download`;\n\n    payload = typeof payload === 'object' ? JSON.stringify(payload).replace(/'/gi, '’') : payload;\n\n    const response = await request({\n      method: 'POST',\n      uri: assistPdfUrl,\n      encoding: null,\n      form: {\n        payload,\n      },\n    });\n\n    return response;\n  }\n\n}\n\nmodule.exports = Pdf;\n","module.exports = require(\"eval\");","module.exports = require(\"recursive-readdir\");","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 50;","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\n\nclass Settings {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async update(settings) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.client = _.merge({}, clientConfig.client, settings);\n\n    return cc.set(clientConfig);\n  }\n}\n\nmodule.exports = Settings;\n","const Promise = require('bluebird');\nconst shippo = require('shippo');\n\nclass Shippo {\n  constructor(config) {\n    this.config = config;\n\n    this.shippo = shippo(config.shippo.token);\n  }\n\n  getQuote(address, parcel) {\n    return new Promise((resolve, reject) => {\n\n      const addressFrom = {\n        object_purpose: 'QUOTE',\n        zip: this.config.shippo.fromZip,\n        country: this.config.shippo.fromCountry,\n      };\n\n      const addressTo = {\n        object_purpose: 'QUOTE',\n        // 'name': address.name,\n        // 'company': '',\n        // 'street1': address.street1,\n        // 'street2': address.street2,\n        // 'city': address.city,\n        // 'state': '',\n        zip: address.zip,\n        country: address.country,\n        // 'phone': address.phone,\n        // 'email': address.email,\n        metadata: '',\n      };\n\n      parcel.distance_unit = 'cm';\n      parcel.mass_unit = 'kg';\n\n      this.shippo.shipment.create({\n        object_purpose: 'QUOTE',\n        address_from: addressFrom,\n        address_to: addressTo,\n        parcel,\n      })\n        .then((shipment) => {\n          const ratesReady = (shipment, attempts) => {\n            if ((shipment.object_status === 'QUEUED' || shipment.object_status === 'WAITING') && attempts < 10) {\n              this.shippo.shipment.retrieve(shipment.object_id).then((val) => {\n                ratesReady(val, attempts + 1);\n              });\n\n            } else {\n              this.shippo.shipment.rates(shipment.object_id)\n                .then((rates) => {\n                  resolve(rates);\n\n                }, (error) => {\n                  console.error('There was an error retrieving rates : %s', error);\n                  reject(error);\n                });\n            }\n          };\n\n          ratesReady(shipment, 0);\n\n        }, (error) => {\n          console.error('There was an error creating shipment: %s', error);\n          reject(error);\n        });\n\n    });\n  }\n\n}\n\nmodule.exports = Shippo;\n","module.exports = require(\"shippo\");","const axios = require('axios');\nconst he = require('he');\nconst Handlebars = require('handlebars');\nconst jsontoxml = require('jsontoxml');\n\nconst ClientConfig = require('./client-config');\n\nclass Shopify {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getCatalog({ shopLink, productLinkTemplate }) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const result = (await axios({\n      url: `https://${clientConfig.provider.shopify.domain}.myshopify.com/api/graphql`,\n      method: 'post',\n      headers: {\n        'X-Shopify-Storefront-Access-Token': clientConfig.provider.shopify.storefrontAccessToken,\n      },\n      data: {\n        query: `\n          query {\n            shop {\n              name\n              primaryDomain {\n                url\n              }\n              description\n              products(first: 250) {\n                edges {\n                  node {\n                    id\n                    handle\n                    title\n                    description\n                    onlineStoreUrl\n                    images(first: 1) {\n                      edges {\n                        node {\n                          originalSrc\n                          transformedSrc\n                        }\n                      }\n                    }\n                    productType\n                    vendor\n                    availableForSale\n                    priceRange {\n                      minVariantPrice {\n                        amount\n                        currencyCode\n                      }\n                      maxVariantPrice {\n                        amount\n                        currencyCode\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n      },\n    })).data.data;\n\n    const template = Handlebars.compile(productLinkTemplate);\n\n    const products = result.shop.products.edges.map(edge => ({\n      'g:id': edge.node.handle,\n      'g:title': he.encode(edge.node.title),\n      'g:description': he.encode(edge.node.description),\n      // 'g:link': edge.node.onlineStoreUrl,\n      'g:link': template({ handle: edge.node.handle }),\n      'g:image_link': edge.node.images.edges[0].node.originalSrc,\n      'g:brand': edge.node.vendor,\n      'g:condition': 'new',\n      'g:availability': edge.node.availableForSale ? 'in stock' : 'out of stock',\n      'g:price': `${edge.node.priceRange.minVariantPrice.amount} ${edge.node.priceRange.minVariantPrice.currencyCode}`,\n      // 'g:google_product_category': he.encode(edge.node.productType),\n    }));\n\n    const channel = [\n      { name: 'title', text: result.shop.name },\n      // { name: 'link', text: result.shop.primaryDomain.url },\n      { name: 'link', text: shopLink },\n      { name: 'description', text: result.shop.description },\n    ];\n\n    products.forEach((product) => {\n      channel.push({\n        name: 'item',\n        children: product,\n      });\n    });\n\n    return `<?xml version=\"1.0\"?>\n    <rss xmlns:g=\"http://base.google.com/ns/1.0\" version=\"2.0\">\n      ${jsontoxml({ channel })}\n    </rss>`;\n  }\n}\n\nmodule.exports = Shopify;\n","module.exports = require(\"he\");","module.exports = require(\"handlebars\");","module.exports = require(\"jsontoxml\");","const _ = require('lodash');\nconst Stripe = require('stripe');\nconst Promise = require('bluebird');\nconst Hashids = require('hashids');\n\nconst ClientConfig = require('./client-config');\nconst Email = require('./email');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\n\nclass StripeClass {\n  constructor(config) {\n    this.config = config;\n\n    this.stripe = Stripe(this.config.stripe.apiKey);\n    this.email = new Email(this.config);\n\n    this.hashids = new Hashids(this.config.slug, 6, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  }\n\n  async getSettings() {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    let settings;\n\n    try {\n      settings = clientConfig.module.ecommerce;\n    } catch (error) {\n      throw new Error(error);\n    }\n\n    try {\n      settings.clientStripeAccountId = clientConfig.provider.stripe.stripe_user_id;\n    } catch (error) {\n      throw new Error(error);\n    }\n\n    settings.client = clientConfig.client;\n    settings.assets = clientConfig.assets;\n\n    return settings;\n  }\n\n  checkout(token, order) {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n\n          const listId = _.get(settings, 'createsend.checkoutSubscriberListId');\n\n          if (order.subscribe && listId) {\n            this.email.subscribe(order.customerDetails, 'createsend', listId)\n              .then((result) => {\n                console.log(result);\n              }, (error) => {\n                console.error(error);\n              });\n          }\n\n          // lookup customer by email, create if not found\n          this.findOrCreateCustomer(order.customerDetails.email, order)\n            .then((customer) => {\n\n              // store order data (customer, items, address)\n              this.createOrder(order, customer)\n                .then((order) => {\n\n                  this.updateOrCreateStripeCustomer(settings.clientStripeAccountId, customer, token, order)\n                    .then((stripeCustomer) => {\n\n                      // update customer, append order to customer, update metadata\n                      this.updateCustomer(customer, stripeCustomer, order)\n                        .then((customer) => {\n\n                          // create charge, take fee\n                          this.createCharge(settings, stripeCustomer, customer, order)\n                            .then((updatedOrder) => {\n\n                              this.sendReceipt(settings, customer, order)\n                                .then((orderReceipt) => {\n\n                                  updatedOrder.messages.orderReceipt = orderReceipt;\n\n                                  this.sendNotification(settings, customer, order)\n                                    .then((orderNotification) => {\n\n                                      updatedOrder.messages.orderNotification = orderNotification;\n\n                                      // update order charge status, charge id\n                                      this.updateOrder(updatedOrder)\n                                        .then((finalOrder) => {\n\n                                          resolve(finalOrder);\n\n                                        }, reject);\n                                    }, reject);\n                                }, reject);\n                            }, reject);\n                        }, reject);\n                    }, reject);\n                }, reject);\n            }, reject);\n        }, reject)\n        .catch(reject);\n    });\n  }\n\n  retrieveAccount() {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n          this.stripe.accounts.retrieve(settings.clientStripeAccountId)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  refund(order, amount) {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n          this.stripe.refunds.create({\n            refund_application_fee: true,\n            charge: order.charge.id,\n            amount,\n          }, {\n            stripe_account: settings.clientStripeAccountId,\n          })\n            .then((refund) => {\n              this.stripe.charges.retrieve(order.charge.id, {\n                stripe_account: settings.clientStripeAccountId,\n              })\n                .then((charge) => {\n                  order.charge.status = charge.status;\n                  order.charge.amount = charge.amount;\n                  order.charge.amountRefunded = charge.amount_refunded;\n\n                  Helpers.createOrUpdate(this.config, order)\n                    .then(resolve, reject);\n                }, reject);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  findOrCreateCustomer(email, order) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'customerByEmail', {\n        keys: [email],\n        include_docs: true,\n      })\n        .then((body) => {\n          if (body.rows.length) {\n            resolve(body.rows[0].doc);\n\n          } else {\n            const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n            const newCustomer = {\n              type: 'customer',\n              createdAt: now,\n              modifiedAt: now,\n              email: order.customerDetails.email,\n              name: order.customerDetails.name,\n              phone: order.customerDetails.phone,\n              billingAddress: order.billingAddress,\n              shippingAddress: order.shippingAddress,\n              orders: [],\n            };\n\n            Db.connect(this.config).insert(newCustomer)\n              .then((body) => {\n                newCustomer._id = body.id;\n                newCustomer._rev = body.rev;\n\n                resolve(newCustomer);\n              }, reject);\n          }\n        }, reject);\n    });\n  }\n\n  updateOrCreateStripeCustomer(clientStripeAccountId, customer, token, order) {\n    return new Promise((resolve, reject) => {\n      const stripeCustomer = {\n        source: token,\n        email: order.customer.email,\n        description: order.customer.name,\n        metadata: {\n          customer_id: customer._id,\n        // billingAddress: JSON.stringify(order.billingAddress),\n        // shippingAddress: JSON.stringify(order.shippingAddress)\n        },\n      };\n\n      if (customer.stripe && customer.stripe.customer.id) {\n        this.stripe.customers.update(customer.stripe.customer.id, stripeCustomer, {\n          stripe_account: clientStripeAccountId,\n        })\n          .then(resolve, (error) => {\n            if (error.type === 'StripeInvalidRequestError' && error.param === 'id') {\n              this.stripe.customers.create(stripeCustomer, {\n                stripe_account: clientStripeAccountId,\n              }).then(resolve, reject);\n\n            } else {\n              reject(error);\n            }\n          });\n\n      } else {\n        this.stripe.customers.create(stripeCustomer, {\n          stripe_account: clientStripeAccountId,\n        }).then(resolve, reject);\n      }\n    });\n  }\n\n  createOrder(order, customer) {\n    return new Promise((resolve, reject) => {\n      const items = order.items.map(item => ({\n        id: item.id,\n        title: item.title.replace(/<br\\s?>/ig, ' ').replace(/<\\/?p>|<\\/?span>/ig, ''),\n        price: item.price,\n        quantity: item.quantity,\n        metadata: item.metadata || {},\n      }));\n\n      const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n      const newOrder = {\n        type: 'order',\n        orderId: this.hashids.encode(new Date().getTime()),\n        createdAt: now,\n        modifiedAt: now,\n        customer: {\n          id: customer._id,\n          email: customer.email,\n          name: customer.name,\n        },\n        items,\n        shippingMethod: {\n          name: order.shippingMethod.name,\n          amount: Number(order.shippingMethod.amount),\n        },\n        subtotal: Number(order.subtotal),\n        tax: {\n          rate: order.tax.rate || 0,\n          includedInPrice: order.tax.includedInPrice || false,\n          total: order.tax.total || 0,\n          show: order.tax.show || false,\n        },\n        discount: {\n          code: order.discount.code || '',\n          name: order.discount.name || '',\n          total: order.discount.total || 0,\n        },\n        total: Number(order.total),\n        billingAddress: order.billingAddress,\n        shippingAddress: order.shippingAddress,\n        messages: {},\n        status: 'pending',\n        test: true,\n      };\n\n      Db.connect(this.config).insert(newOrder)\n        .then((body) => {\n          newOrder._id = body.id;\n          newOrder._rev = body.rev;\n\n          resolve(newOrder);\n        }, reject);\n    });\n  }\n\n  updateOrder(order) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).insert(order)\n        .then((body) => {\n          order._rev = body.rev;\n\n          resolve(order);\n        }, reject);\n    });\n  }\n\n  updateCustomer(customer, stripeCustomer, order) {\n    return new Promise((resolve, reject) => {\n      const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n      customer.modifiedAt = now;\n\n      if (!customer.orders) {\n        customer.orders = [];\n      }\n\n      customer.orders.push(order._id);\n\n      if (!customer.stripe) {\n        customer.stripe = {\n          customer: {\n            id: null,\n          },\n        };\n      }\n\n      customer.stripe.customer.id = stripeCustomer.id;\n\n      Db.connect(this.config).insert(customer)\n        .then((body) => {\n          customer._rev = body.rev;\n\n          resolve(customer);\n        }, reject);\n    });\n  }\n\n  createCharge(settings, stripeCustomer, customer, order) {\n    return new Promise((resolve, reject) => {\n      const amount = Number(order.total) * 100;\n\n      const charge = {\n        amount,\n        currency: settings.currency.iso.toLowerCase(),\n        customer: stripeCustomer.id,\n        capture: true,\n        description: order.orderId,\n        // shipping: order.shippingAddress, // fraud prevention, must follow expected schema\n        metadata: {\n          customer_id: customer._id,\n          order_id: order._id,\n        },\n        statement_descriptor: _.kebabCase(settings.storeName).toUpperCase(),\n        application_fee: Math.ceil(amount * 0.02),\n      };\n\n      this.stripe.charges.create(charge, {\n        stripe_account: settings.clientStripeAccountId,\n      })\n        .then((charge) => {\n\n          order.charge = {\n            paymentGateway: 'stripe',\n            id: charge.id,\n            status: charge.status,\n            currency: charge.currency.toUpperCase(),\n            amount: charge.amount,\n            amountRefunded: charge.amount_refunded,\n          };\n\n          order.test = !charge.livemode;\n\n          resolve(order);\n\n        }, reject);\n    });\n  }\n\n  sendReceipt(settings, customer, order) {\n    return new Promise((resolve, reject) => {\n      const templateData = {\n        settings,\n        order,\n      };\n\n      const emailOptions = {\n        from: `${settings.emailSenderName} <${settings.emailSenderAddress}>`,\n        to: customer.email,\n        subject: `Your order at ${settings.storeName} (${order.orderId})`,\n      };\n\n      const assetSlug = _.get(settings, 'assets.slug', this.config.slug);\n\n      this.email.sendEmail(emailOptions, `${assetSlug}/order-receipt`, templateData).then(resolve, reject);\n    });\n  }\n\n  sendNotification(settings, customer, order) {\n    return new Promise((resolve, reject) => {\n      const templateData = {\n        settings,\n        order,\n      };\n\n      const emailOptions = {\n        from: `${settings.emailSenderName} <${settings.emailSenderAddress}>`,\n        to: settings.emailSenderAddress,\n        subject: `New order at ${settings.storeName} (${order.orderId})`,\n      };\n\n      const assetSlug = _.get(settings, 'assets.slug', this.config.slug);\n\n      this.email.sendEmail(emailOptions, `${assetSlug}/order-notification`, templateData).then(resolve, reject);\n    });\n  }\n\n}\n\nmodule.exports = StripeClass;\n","module.exports = require(\"stripe\");","module.exports = require(\"hashids\");","const _ = require('lodash');\nconst Db = require('./db');\nconst ClientConfig = require('./client-config');\n\nclass Taxonomy {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async create(taxonomy) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.taxonomies.push(taxonomy);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(taxonomySlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const taxonomy = _.find(clientConfig.taxonomies, { slug: taxonomySlug });\n\n    if (!taxonomy) {\n      throw Error(`Taxonomy not found: ${taxonomySlug}`);\n    }\n\n    return taxonomy;\n  }\n\n  async update(taxonomy) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.taxonomies, { slug: taxonomy.slug });\n\n    if (index === -1) {\n      throw Error(`Taxonomy not found: ${taxonomy.slug}`);\n    }\n\n    clientConfig.taxonomies.splice(index, 1, taxonomy);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(taxonomySlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    taxonomySlug = _.isArray(taxonomySlug) ? taxonomySlug : [taxonomySlug];\n\n    clientConfig.taxonomies = clientConfig.taxonomies.filter(taxonomy => taxonomySlug.indexOf(taxonomy.slug) === -1);\n\n    return cc.set(clientConfig);\n  }\n\n  async entitiesByTerm(term) {\n    const db = Db.connect(this.config);\n\n    const entityGroups = (await db.view('entity', 'byTaxonomyTerm', { keys: [term.id], group: true })).rows.map(row => row.value)[0];\n\n    if (!entityGroups) {\n      return [];\n    }\n\n    let entityIds = [];\n\n    _.forEach(entityGroups, (entities) => {\n      entityIds = entityIds.concat(entities);\n    });\n\n    entityIds = _.uniq(entityIds);\n\n    const entities = (await db.fetch({ keys: entityIds, include_docs: true })).rows\n      .filter(row => row.doc)\n      .map(row => row.doc);\n\n    return entities;\n  }\n\n  async createTerm(taxonomySlug, term) {\n    const taxonomy = await this.read(taxonomySlug);\n\n    taxonomy.terms.push(term);\n\n    return this.update(taxonomy);\n  }\n\n  async updateTerm(term) {\n    let entities = await this.entitiesByTerm(term);\n\n    entities = entities.map((entity) => {\n      entity.fields = _.mapValues(entity.fields, (field) => {\n        if (field.type === 'taxonomy' && field.value) {\n          if (!field.value.terms) {\n            field.value.terms = [];\n          }\n\n          field.value.terms = field.value.terms.map((_term) => {\n            if (_term.id === term.id) {\n              _term.title = term.title;\n              _term.slug = term.slug;\n            }\n\n            if (!_term.parents) {\n              _term.parents = [];\n            }\n\n            _term.parents = _term.parents.map((parent) => {\n              if (parent.id === term.id) {\n                parent.title = term.title;\n                parent.slug = term.slug;\n              }\n              return parent;\n            });\n\n            return _term;\n          });\n        }\n\n        return field;\n      });\n      return entity;\n    });\n\n    return Db.connect(this.config).bulk({ docs: entities });\n  }\n\n  async deleteTerm(term) {\n    let entities = await this.entitiesByTerm(term);\n\n    entities = entities.map((entity) => {\n      entity.fields = _.mapValues(entity.fields, (field) => {\n        if (field.type === 'taxonomy' && field.value) {\n          if (!field.value.terms) {\n            field.value.terms = [];\n          }\n\n          field.value.terms = field.value.terms.filter((_term) => {\n            if (_term.id === term.id) {\n              return false;\n            }\n\n            if ((_term.parents || []).filter(parent => parent.id === term.id).length) {\n              return false;\n            }\n\n            return true;\n          });\n        }\n\n        return field;\n      });\n      return entity;\n    });\n\n    return Db.connect(this.config).bulk({ docs: entities });\n  }\n}\n\nmodule.exports = Taxonomy;\n","const Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst Cloudant = require('@cloudant/cloudant');\nconst Db = require('./db');\n\nclass Tools {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getDb() {\n    const result = await Db.connect(this.config).fetch({\n      include_docs: true,\n    });\n\n    return result;\n  }\n\n  async getChanges() {\n    const result = await Db.connect(this.config).changes({\n      limit: 50,\n      include_docs: true,\n      filter: 'tools/changesEntity',\n    });\n\n    return result;\n  }\n\n  async importDb(dbBackupFile) {\n    const dbName = this.config.db.name;\n\n    const fileConents = await fs.readFileAsync(dbBackupFile.path);\n\n    const docs = JSON.parse(fileConents).rows.map((row) => {\n      const { doc } = row;\n      delete doc._rev;\n      return doc;\n    });\n\n    await fs.unlinkAsync(dbBackupFile.path);\n\n    const cloudant = new Cloudant({\n      url: this.config.db.url,\n      plugins: ['promises', 'retry'],\n    }).db;\n\n    try {\n      await cloudant.destroy(dbName);\n    } catch (error) {\n      //\n    }\n\n    await cloudant.create(dbName);\n\n    const result = await Db.connect(this.config, dbName).bulk({ docs });\n\n    return result;\n  }\n\n}\n\nmodule.exports = Tools;\n","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\n\nclass User {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async create(user) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    user.id = user.id.toLowerCase();\n    user.email = user.email.toLowerCase();\n\n    clientConfig.users.push(user);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(userId) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const user = _.find(clientConfig.users, { id: userId });\n\n    if (!user) {\n      throw Error(`User not found: ${userId}`);\n    }\n\n    return user;\n  }\n\n  async update(user) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.users, { id: user.id });\n\n    if (index === -1) {\n      throw Error(`User not found: ${user.id}`);\n    }\n\n    user.email = user.email.toLowerCase();\n\n    clientConfig.users.splice(index, 1, user);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(userId) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    userId = _.isArray(userId) ? userId : [userId];\n\n    clientConfig.users = clientConfig.users.filter(user => userId.indexOf(user.id) === -1);\n\n    return cc.set(clientConfig);\n  }\n}\n\nmodule.exports = User;\n"],"sourceRoot":""}