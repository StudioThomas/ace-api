{"version":3,"sources":["webpack://AceApi/webpack/universalModuleDefinition","webpack://AceApi/webpack/bootstrap","webpack://AceApi/external \"babel-runtime/helpers/createClass\"","webpack://AceApi/external \"babel-runtime/helpers/classCallCheck\"","webpack://AceApi/external \"lodash\"","webpack://AceApi/./lib/client-config.js","webpack://AceApi/external \"babel-runtime/helpers/asyncToGenerator\"","webpack://AceApi/external \"babel-runtime/regenerator\"","webpack://AceApi/./lib/db.js","webpack://AceApi/external \"bluebird\"","webpack://AceApi/./lib/helpers.js","webpack://AceApi/external \"babel-runtime/core-js/json/stringify\"","webpack://AceApi/external \"fs\"","webpack://AceApi/external \"axios\"","webpack://AceApi/external \"path\"","webpack://AceApi/external \"request-promise\"","webpack://AceApi/./lib/fields.js","webpack://AceApi/./lib/schema.js","webpack://AceApi/./lib/entity.js","webpack://AceApi/./lib/email.js","webpack://AceApi/external \"babel-runtime/core-js/object/freeze\"","webpack://AceApi/./lib/roles.js","webpack://AceApi/external \"@cloudant/cloudant\"","webpack://AceApi/./lib/assist.js","webpack://AceApi/./lib/user.js","webpack://AceApi/./lib/tools.js","webpack://AceApi/./lib/taxonomy.js","webpack://AceApi/external \"hashids\"","webpack://AceApi/external \"stripe\"","webpack://AceApi/./lib/stripe.js","webpack://AceApi/external \"jsontoxml\"","webpack://AceApi/external \"handlebars\"","webpack://AceApi/external \"he\"","webpack://AceApi/./lib/shopify.js","webpack://AceApi/external \"shippo\"","webpack://AceApi/./lib/shippo.js","webpack://AceApi/./lib/settings.js","webpack://AceApi/./lib sync","webpack://AceApi/external \"recursive-readdir\"","webpack://AceApi/external \"eval\"","webpack://AceApi/external \"babel-runtime/helpers/typeof\"","webpack://AceApi/./lib/pdf.js","webpack://AceApi/external \"jsonwebtoken\"","webpack://AceApi/./lib/jwt.js","webpack://AceApi/./lib/instagram.js","webpack://AceApi/external \"deep-diff\"","webpack://AceApi/external \"json-query\"","webpack://AceApi/external \"embedly\"","webpack://AceApi/./lib/embedly.js","webpack://AceApi/external \"node-sass\"","webpack://AceApi/external \"i18n-iso-countries\"","webpack://AceApi/external \"moment\"","webpack://AceApi/external \"html-to-text\"","webpack://AceApi/external \"mjml-mailchimp\"","webpack://AceApi/external \"mjml-validator\"","webpack://AceApi/external \"mjml-core\"","webpack://AceApi/external \"mjml\"","webpack://AceApi/external \"inky\"","webpack://AceApi/external \"email-templates\"","webpack://AceApi/external \"nodemailer-mailgun-transport\"","webpack://AceApi/external \"createsend-node\"","webpack://AceApi/external \"nodemailer\"","webpack://AceApi/./lib/ecommerce.js","webpack://AceApi/external \"querystring\"","webpack://AceApi/./lib/auth.js","webpack://AceApi/external \"password-hash\"","webpack://AceApi/./config.default.js","webpack://AceApi/./index.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","Db","Helpers","DEFAULT_CLIENT_CONFIG","_id","client","assets","schemas","taxonomies","users","roles","provider","ClientConfig","config","_classCallCheck3","default","this","clientConfig","connect","merge","slug","createOrUpdate","Cloudant","dbName","url","db","maxAttempt","plugins","retry","retryDelayMultiplier","retryInitialDelayMsecs","use","Promise","assistUrl","assist","thumbnail","settings","cropSlug","cropDefault","settingsArray","split","forEach","setting","crop","crops","x","y","x2","y2","g","push","join","settingsString","test","thumbnailType","ext","thumbnailUrl","replace","doc","resolve","reject","insert","then","response","id","_rev","rev","error","statusCode","docs","chunkSize","arguments","length","undefined","promises","chunk","bulk","all","entities","groupSize","Infinity","grouped","group","entity","groupBefore","groupAfter","ratio","groupRatio","_stringify2","Date","array","replacementObject","map","fields","type","dataType","Fields","field","_freeze2","find","Schema","schema","cc","updateEntityIndex","set","schemaSlug","Error","index","findIndex","splice","schemaSlugs","isArray","filter","indexOf","concat","uniqBy","ddoc","default_field","enabled","analyzer","selector","$and","fieldRef","result","jsonQuery","diff","Assist","Entity","flattenValues","fieldSlug","searchTerm","viewWithList","startkey","endkey","ids","parents","role","query","include_docs","keys","view","_appendParents","children","docMap","childDepth","rowOrDoc","isRow","size","queryString","_queriesFromString","flatten","_query","obj","uniq","_entitiesById","row","_docs","rows","_childDepthLimit","_getDocMap","_mergeDocs","_this","updatedEntities","mapValues","remove","chunkUpdate","_this2","entityMap","title","published","total_rows","_extendDocs","_this3","limit","Math","min","sort","isString","include_fields","bookmark","group_field","search","groups","hits","_this4","_entitySearch","__entitySearch","_this5","clone","_context6","t0","entityId","_this6","revs_info","revisionIds","_revs_info","revision","status","open_revs","revisions","childrenIds","ok","fetch","childrenMap","console","_appendChildren","_this7","_this8","restore","_this9","entityIds","entityOrEntityId","isObject","oldEntity","newEntity","path","mergeWith","a","b","trashed","_updateChildren","forever","filesResult","deleted","_removeChildren","fileNames","_fileNames","deleteFiles","_deleted","entitiesResult","files","omitBy","startsWith","filterEntityFields","file","forceId","queryParts","trim","modifier","slice","data","locals","input","start","end","sample","sampleSize","pick","_len","paths","Array","_key","copy","pathParts","match","pathFrom","pathTo","allowRegexp","methodArgs","queries","merging","isNumber","queryMap","queryField","fs","nodemailer","Createsend","promisifyAll","nodemailerMailgunTransport","EmailTemplate","Inky","mjml2html","registerComponent","registerDependencies","McSection","McImage","htmlToText","moment","countries","sass","Email","inky","mc-section","mj-column","mj-hero","templateSlug","templateData","templateOptions","options","inlineStyles","mjml","skipValidation","templatePath","email","templatesPath","existsSync","templateFiles","readdirSync","htmlPath","fileName","extension","style","renderSync","sourceMapContents","sourceMapEmbed","css","toString","emailTemplate","views","juice","juiceResources","preserveMediaQueries","preserveFontFaces","removeStyleTags","removeLinkTags","preserveImportant","webResources","links","scripts","images","transport","jsonTransport","helpers","render","html","convertMjmlResult","level","errors","releaseTheKraken","text","fromString","emailOptions","nodemailerMailgun","createTransport","auth","api_key","mailgun","apiKey","domain","getTemplate","sendMail","metadata","details","listId","createsend","cs","clientApiKey","subscribers","addSubscriberAsync","EmailAddress","Name","Resubscribe","RestartSubscriptionBasedAutoresponders","emailAddress","catch","Message","permissions","entityGrid","entityCreate","entityRead","entityUpdate","entityDelete","taxonomyCreate","taxonomyRead","taxonomyUpdate","taxonomyDelete","fileCreate","fileRead","fileUpdate","fileDelete","user","userSettings","tools","ecommerce","Roles","axios","passwordHash","assetsSlug","post","username","password","generate","User","userId","Tools","changes","dbBackupFile","readFileAsync","fileConents","JSON","parse","unlinkAsync","cloudant","destroy","Taxonomy","taxonomy","taxonomySlug","term","entityGroups","read","terms","update","entitiesByTerm","_term","parent","Stripe","Hashids","StripeClass","stripe","hashids","_context","clientStripeAccountId","stripe_user_id","t1","token","order","getSettings","subscribe","customerDetails","log","findOrCreateCustomer","customer","createOrder","updateOrCreateStripeCustomer","stripeCustomer","updateCustomer","createCharge","updatedOrder","sendReceipt","orderReceipt","messages","sendNotification","orderNotification","updateOrder","finalOrder","accounts","retrieve","amount","refunds","refund_application_fee","charge","stripe_account","refund","charges","amountRefunded","amount_refunded","body","now","newCustomer","createdAt","modifiedAt","phone","billingAddress","shippingAddress","orders","source","description","customer_id","customers","param","items","item","price","quantity","newOrder","orderId","encode","getTime","shippingMethod","Number","subtotal","tax","rate","includedInPrice","total","show","discount","code","currency","iso","toLowerCase","capture","order_id","statement_descriptor","kebabCase","storeName","toUpperCase","application_fee","ceil","paymentGateway","livemode","_this10","from","emailSenderName","emailSenderAddress","to","subject","assetSlug","sendEmail","_this11","he","Handlebars","jsontoxml","Shopify","shopLink","productLinkTemplate","shopify","method","headers","X-Shopify-Storefront-Access-Token","storefrontAccessToken","template","compile","products","shop","edges","edge","g:id","node","handle","g:title","g:description","g:link","g:image_link","originalSrc","g:brand","vendor","g:condition","g:availability","availableForSale","g:price","priceRange","minVariantPrice","currencyCode","channel","product","shippo","Shippo","address","parcel","addressFrom","object_purpose","zip","fromZip","country","fromCountry","addressTo","distance_unit","mass_unit","shipment","address_from","address_to","ratesReady","attempts","object_status","object_id","val","rates","Settings","webpackEmptyContext","req","e","_eval","request","readdir","Pdf","templates","pdf","templateId","readFileSync","entityList","payload","assistPdfUrl","_typeof3","uri","encoding","form","jwt","Jwt","sign","tokenSecret","verify","client_id","access_token","version","host","endpoint","requestOptions","qs","extend","_request","EmbedlyApi","Embedly","urls","embedly","opts","format","oembed","Ecommerce","dateStart","dateEnd","message","querystring","providerTokenUri","google","instagram","vimeo","spotify","Auth","superUserId","superUser","active","params","refresh","providerConfig","providerClientConfig","grant_type","clientId","client_secret","clientSecret","redirect_uri","redirectUri","refresh_token","providerAuth","stringify","_context2","begins","floor","t2","environment","process","env","ENVIRONMENT","debug","DEBUG","SLUG","baseUrl","BASE_URL","DB_URL","DB_HOST","DB_NAME","requestPlugin","DB_REQUEST_PLUGIN","meterType","DB_METER_TYPE","AUTH_SUPER_USER_ID","AUTH_TOKEN_SECRET","dev","DEV_USER_ID","DEV_ROLE","cms","CMS_TITLE","CMS_URL","ASSIST_URL","ASSIST_USERNAME","ASSIST_PASSWORD","MAILGUN_API_KEY","MAILGUN_DOMAIN","EMBEDLY_API_KEY","__dirname","GOOGLE_CLIENT_ID","GOOGLE_CLIENT_SECRET","INSTAGRAM_CLIENT_ID","INSTAGRAM_CLIENT_SECRET","SPOTIFY_CLIENT_ID","SPOTIFY_CLIENT_SECRET","STRIPE_CLIENT_ID","STRIPE_CLIENT_SECRET","STRIPE_API_KEY","twitter","consumerKey","TWITTER_CONSUMER_KEY","consumerSecret","TWITTER_CONSUMER_SECRET","accessTokenKey","TWITTER_ACCESS_TOKEN_KEY","accessTokenSecret","TWITTER_ACCESS_TOKEN_SECRET","VIMEO_CLIENT_ID","VIMEO_CLIENT_SECRET","Api","defaultConfig","args","Function","apply","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","_len10","_key10","Instagram","_len11","_key11","_len12","_key12","_len13","_key13","_len14","_key14","_len15","_key15","_len16","_key16","_len17","_key17","_len18","_key18","_len19","_key19","_len20","_key20","_len21","_key21","_len22","_key22"],"mappings":"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","file":"api.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AceApi\"] = factory();\n\telse\n\t\troot[\"AceApi\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 65);\n","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"lodash\");","const _ = require('lodash');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\nconst Roles = require('./roles');\n\nconst roles = new Roles();\n\nconst DEFAULT_CLIENT_CONFIG = {\n  _id: 'config',\n  client: {},\n  assets: {},\n  schemas: [],\n  taxonomies: [],\n  users: [],\n  roles: roles.roles(),\n  provider: {},\n  module: {},\n};\n\nclass ClientConfig {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async get() {\n    let clientConfig = DEFAULT_CLIENT_CONFIG;\n\n    try {\n      clientConfig = await Db.connect(this.config).get('config');\n\n      clientConfig = _.merge({}, DEFAULT_CLIENT_CONFIG, clientConfig);\n    } catch (error) {\n      //\n    }\n\n    clientConfig.slug = this.config.slug;\n\n    return clientConfig;\n  }\n\n  async set(clientConfig) {\n    clientConfig._id = 'config';\n\n    delete clientConfig.roles;\n\n    clientConfig = await Helpers.createOrUpdate(this.config, clientConfig);\n\n    clientConfig = _.merge({}, DEFAULT_CLIENT_CONFIG, clientConfig);\n\n    return clientConfig;\n  }\n}\n\n\nmodule.exports = ClientConfig;\n","module.exports = require(\"babel-runtime/helpers/asyncToGenerator\");","module.exports = require(\"babel-runtime/regenerator\");","const Cloudant = require('@cloudant/cloudant');\n\nclass Db {\n  constructor (config, dbName) {\n    this.config = config;\n\n    return Db.connect(config, dbName);\n  }\n\n  static connect (config, dbName) {\n    const cloudant = new Cloudant({\n      url: config.db.url,\n      maxAttempt: 5,\n      plugins: [\n        'promises',\n        {\n          retry: {\n            retryDelayMultiplier: 2,\n            retryInitialDelayMsecs: 500,\n          },\n        },\n      ],\n    });\n\n    return cloudant.db.use(dbName || config.db.name);\n  }\n}\n\nmodule.exports = Db;\n","module.exports = require(\"bluebird\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst Db = require('./db');\n\nclass Helpers {\n  constructor(config) {\n    this.config = config;\n    this.assistUrl = config.assist.url;\n    this.slug = config.slug;\n  }\n\n  static createOrUpdate (config, doc) {\n    return new Promise((resolve, reject) => {\n      Db.connect(config).insert(doc)\n        .then((response) => {\n          doc._id = response.id;\n          doc._rev = response.rev;\n          resolve(doc);\n        }, (error) => {\n          if (error.statusCode !== 409) {\n            reject(error);\n            return;\n          }\n\n          Db.connect(config).get(doc._id)\n            .then((response) => {\n              doc._rev = response._rev;\n\n              Db.connect(config).insert(doc)\n                .then((response) => {\n                  doc._rev = response.rev;\n                  resolve(doc);\n                }, reject);\n            }, reject);\n        });\n    });\n  }\n\n  static chunkUpdate (config, docs, chunkSize = 1000) {\n    return new Promise((resolve, reject) => {\n      const chunks = _.chunk(docs, chunkSize);\n      const promises = [];\n\n      chunks.forEach((chunk) => {\n        promises.push(new Promise((resolve, reject) => {\n          Db.connect(config).bulk({\n            docs: chunk,\n          }).then(resolve, reject);\n        }));\n      });\n\n      Promise.all(promises).then(resolve, reject);\n    });\n  }\n\n  static groupEntities (entities, groupSize = Infinity) {\n    const grouped = [];\n\n    let group = {\n      entities: [],\n    };\n\n    entities.forEach((entity) => {\n      if (!entity.groupBefore || group.entities.length >= groupSize) {\n        group = {\n          entities: [],\n        };\n      }\n\n      group.entities.push(entity);\n\n      if (!entity.groupAfter || group.entities.length >= groupSize) {\n        group.ratio = 0;\n\n        group.entities.forEach((entity) => {\n          group.ratio += (entity.thumbnail || entity).ratio;\n        });\n\n        group.entities.forEach((entity) => {\n          entity.groupRatio = (entity.thumbnail || entity).ratio / group.ratio;\n        });\n\n        grouped.push(group);\n      }\n    });\n\n    return grouped;\n  }\n\n  static now () {\n    return JSON.stringify(new Date()).replace(/\"/g, '');\n  }\n\n  static replace (array, replacementObject, key) {\n    return array.map((object) => {\n      if (object[key] === replacementObject[key]) {\n        return replacementObject;\n      }\n      return object;\n    });\n  }\n\n  thumbnailSrc (thumbnail, settings, cropSlug, cropDefault) {\n    if (!thumbnail) {\n      return '';\n    }\n\n    let settingsArray;\n\n    if (typeof settings === 'string') {\n      settingsArray = settings.split(/,|;/);\n\n      settings = {};\n\n      settingsArray.forEach((setting) => {\n        setting = setting.split(/_|:/);\n\n        settings[setting[0]] = setting[1];\n      });\n    }\n\n    const crop = thumbnail.crops ? thumbnail.crops[cropSlug] : false;\n\n    if (crop) {\n      settings.x = crop[0];\n      settings.y = crop[1];\n      settings.x2 = crop[2];\n      settings.y2 = crop[3];\n    } else if (cropDefault) {\n      settings.g = cropDefault;\n    }\n\n    settingsArray = [];\n\n    _.forEach(settings, (value, key) => {\n      settingsArray.push([key, value].join(':'));\n    });\n\n    const settingsString = settingsArray.join(';');\n\n    if (/(image)/.test(thumbnail.thumbnailType)) {\n      if (thumbnail.ext === 'svg') {\n        return [this.assistUrl, this.slug, thumbnail.name + thumbnail.ext].join('/');\n      }\n\n      return [this.assistUrl, this.slug, 'transform', settingsString, thumbnail.name + thumbnail.ext].join('/');\n    }\n\n    if (/(video)/.test(thumbnail.thumbnailType)) {\n      return [this.assistUrl, this.slug, 'transform', settingsString, thumbnail.name, 'thumb.jpg'].join('/');\n    }\n\n    if (/(oembed|proxy)/.test(thumbnail.thumbnailType)) {\n      const thumbnailUrl = thumbnail.thumbnailUrl.replace(/https?:\\/\\//, '');\n\n      return [this.assistUrl, this.slug, 'proxy', 'transform', settingsString, thumbnailUrl].join('/');\n    }\n\n    return '';\n  }\n\n}\n\nmodule.exports = Helpers;\n","module.exports = require(\"babel-runtime/core-js/json/stringify\");","module.exports = require(\"fs\");","module.exports = require(\"axios\");","module.exports = require(\"path\");","module.exports = require(\"request-promise\");","const _ = require('lodash');\n\nconst fields = [\n  {\n    type: 'attachment',\n    name: 'Attachment',\n    dataType: null,\n  },\n  {\n    type: 'audio',\n    name: 'Audio',\n    dataType: null,\n  },\n  {\n    type: 'checkbox',\n    name: 'Checkbox',\n    dataType: 'boolean',\n  },\n  {\n    type: 'color',\n    name: 'Color',\n    dataType: 'string',\n  },\n  {\n    type: 'date',\n    name: 'Date',\n    dataType: 'string',\n  },\n  {\n    type: 'embedly',\n    name: 'Embedly',\n    dataType: null,\n  },\n  {\n    type: 'entity',\n    name: 'Entity',\n    dataType: 'array',\n  },\n  {\n    type: 'entityGrid',\n    name: 'Entity Grid',\n    dataType: 'array',\n  },\n  {\n    type: 'entityTile',\n    name: 'Entity Tile',\n    dataType: 'array',\n  },\n  {\n    type: 'image',\n    name: 'Image',\n    dataType: null,\n  },\n  {\n    type: 'keyValue',\n    name: 'Key Value',\n    dataType: null,\n  },\n  {\n    type: 'number',\n    name: 'Number',\n    dataType: 'number',\n  },\n  {\n    type: 'richText',\n    name: 'Rich Text',\n    dataType: null,\n  },\n  {\n    type: 'select',\n    name: 'Select',\n    dataType: 'array',\n  },\n  {\n    type: 'taxonomy',\n    name: 'Taxonomy',\n    dataType: null,\n  },\n  {\n    type: 'text',\n    name: 'Text',\n    dataType: 'string',\n  },\n  {\n    type: 'textArea',\n    name: 'Text Area',\n    dataType: 'string',\n  },\n  {\n    type: 'user',\n    name: 'User',\n    dataType: 'array',\n  },\n  {\n    type: 'video',\n    name: 'Video',\n    dataType: null,\n  },\n  {\n    type: 'vimeo',\n    name: 'Vimeo',\n    dataType: null,\n  },\n];\n\nclass Fields {\n  static fields() {\n    return fields.map(field => Object.freeze(field));\n  }\n  static field(type) {\n    return _.find(Fields.fields(), { type });\n  }\n}\n\nmodule.exports = Fields;\n","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\nconst Fields = require('./fields');\n\nclass Schema {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async create(schema) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.schemas.push(schema);\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(schemaSlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const schema = _.find(clientConfig.schemas, { slug: schemaSlug });\n\n    if (!schema) {\n      throw Error(`Schema not found: ${schemaSlug}`);\n    }\n\n    return schema;\n  }\n\n  async update(schema) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.schemas, { slug: schema.slug });\n\n    if (index === -1) {\n      throw Error(`Schema not found: ${schema.slug}`);\n    }\n\n    clientConfig.schemas.splice(index, 1, schema);\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(schemaSlugs) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    schemaSlugs = _.isArray(schemaSlugs) ? schemaSlugs : [schemaSlugs];\n\n    clientConfig.schemas = clientConfig.schemas.filter(schema => schemaSlugs.indexOf(schema.slug) === -1);\n\n    clientConfig.schemas = clientConfig.schemas.map((schema) => {\n      if (!schema.fields) {\n        return schema;\n      }\n      schema.fields = schema.fields.map((field) => {\n        if (!field.settings) {\n          return field;\n        }\n        if (field.settings.schemas) {\n          field.settings.schemas = field.settings.schemas.filter(schema => schemaSlugs.indexOf(schema) === -1);\n        }\n        return field;\n      });\n      return schema;\n    });\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async updateAll(schemas) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.schemas = schemas;\n\n    // await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async updateEntityIndex(schemas) {\n    let fields = [];\n\n    schemas.forEach((schema) => {\n      fields = fields.concat(schema.fields);\n    });\n\n    fields = _.uniqBy(fields, 'slug');\n\n    const index = {\n      name: 'entity',\n      type: 'text',\n      ddoc: 'entityIndex',\n      index: {\n        default_field: {\n          enabled: true,\n          analyzer: 'standard',\n        },\n        selector: {\n          $and: [\n            {\n              type: 'entity',\n            },\n          ],\n        },\n        fields: [\n          {\n            name: 'published',\n            type: 'boolean',\n          },\n          {\n            name: 'trashed',\n            type: 'boolean',\n          },\n          {\n            name: 'title',\n            type: 'string',\n          },\n          {\n            name: 'slug',\n            type: 'string',\n          },\n          {\n            name: 'schema',\n            type: 'string',\n          },\n          {\n            name: 'modifiedAt',\n            type: 'string',\n          },\n          {\n            name: 'publishedAt',\n            type: 'string',\n          },\n        ],\n      },\n    };\n\n    fields.forEach((field) => {\n      const fieldRef = Fields.field(field.type);\n\n      if (/number|string|boolean/.test(fieldRef.dataType)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value`,\n          type: fieldRef.dataType,\n        });\n      }\n\n      if (/array/.test(fieldRef.dataType)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value.[].slug`,\n          type: 'string',\n        });\n      }\n\n      if (/taxonomy/.test(field.type)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value.terms.[].slug`,\n          type: 'string',\n        });\n      }\n    });\n\n    const result = await Db.connect(this.config).index(index);\n\n    return result;\n  }\n\n}\n\nmodule.exports = Schema;\n","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst jsonQuery = require('json-query');\nconst diff = require('deep-diff').diff;\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\nconst Schema = require('./schema');\nconst Assist = require('./assist');\n\nconst CHUNK_UPDATE_SIZE = 1000;\n\nclass Entity {\n  constructor (config) {\n    this.config = config;\n\n    // Expose helpers\n    this.flattenValues = Entity.flattenValues;\n  }\n\n  static flattenValues (docs) {\n    return docs.map((doc) => {\n      if (!doc.fields || !_.size(doc.fields)) {\n        return doc;\n      }\n\n      doc.fields = _.mapValues(doc.fields, (field) => {\n        if (/entity/.test(field.type) && _.isArray(field.value)) { // entity / entityTile / entityGrid\n          field.value = Entity.flattenValues(field.value);\n        }\n        return field.value;\n      });\n\n      return doc;\n    });\n  }\n\n  static filterEntityFields (docs, role = 'guest') {\n    const isArray = _.isArray(docs);\n\n    docs = (isArray ? docs : [docs]).map((doc) => {\n      if (_.size(doc.fields)) {\n        doc.fields = _.mapValues(doc.fields, (field) => {\n          if (_.isArray(field.value)) {\n            field.value = field.value.filter((obj) => {\n              if (!obj) {\n                return false;\n              }\n              if (obj.type && obj.type === 'entity' && role === 'guest') {\n                return obj.published !== undefined ? obj.published : true;\n              }\n              return true;\n            });\n          }\n          return field;\n        });\n      }\n      return doc;\n    });\n\n    return isArray ? docs : docs[0];\n  }\n\n  static _appendChildren (docs, childrenMap) {\n    return docs.map((doc) => {\n      if (!_.size(doc.fields)) {\n        return doc;\n      }\n\n      doc.fields = _.mapValues(doc.fields, (field) => {\n        if (_.isArray(field.value)) {\n          field.value = field.value.filter((obj) => {\n            if (!obj) {\n              return false;\n            }\n            if (obj.type === 'entity') {\n              return childrenMap[obj.id] !== undefined;\n            }\n            return true;\n          });\n\n          field.value = field.value.map((obj) => {\n            if (obj.type === 'entity') {\n              obj = _.merge(obj, childrenMap[obj.id]);\n            }\n            obj = _.omitBy(obj, (value, key) => key.startsWith('_'));\n            return obj;\n          });\n        }\n\n        return field;\n      });\n\n      return doc;\n    });\n  }\n\n  static _appendParents (result, parents = null, role = 'guest') {\n    let entityMap = {};\n\n    result.rows.forEach((row) => {\n      if (!row.doc) {\n        return;\n      }\n\n      if (row.value.type === 'entity') {\n        if (parents) {\n          row.doc.parents = [];\n        }\n        entityMap[row.id] = row.doc;\n      }\n    });\n\n    if (parents) {\n      result.rows.forEach((row) => {\n        if (row.doc && row.value.type === 'parent') {\n          entityMap[row.key].parents.push(Entity.filterEntityFields(row.doc, role));\n        }\n      });\n\n      entityMap = _.mapValues(entityMap, (entity) => {\n        entity.parents = _.uniqBy(entity.parents, entity => entity._id);\n        return entity;\n      });\n    }\n\n    entityMap = null;\n\n    return result;\n  }\n\n  static _fileNames (entities) {\n    const fileNames = [];\n\n    entities.forEach((entity) => {\n      _.forEach(entity.fields, (field) => {\n        if (field.value && field.value.file) {\n          fileNames.push(field.value.file.name);\n        }\n      });\n    });\n\n    return _.uniq(fileNames);\n  }\n\n  async fieldValues (fieldSlug, searchTerm) {\n    const result = await Db.connect(this.config).viewWithList('entity', 'byField', 'search', {\n      startkey: [fieldSlug],\n      endkey: [fieldSlug, {}],\n      group: true,\n      searchTerm,\n    });\n    return result;\n  }\n\n  static _query(doc, query, forceId = false) {\n    const queryParts = query.trim().split(/\\[|\\]/);\n    const selector = `fields.${queryParts[0]}.value[${queryParts[1] || '*'}]`;\n    const modifier = /\\]:/.test(query) ? `:${query.split(/\\]:/).slice(-1)[0].trim()}` : '';\n\n    const result = jsonQuery(`${selector}${modifier}`, {\n      data: doc,\n      locals: {\n        slice: (input, start, end) => _.slice(input, start, end),\n        sample: (input, size = 1) => _.sampleSize(input, size),\n        group: (entities, groupSize = Infinity) => {\n          const grouped = [];\n\n          let group = [];\n\n          entities.forEach((entity) => {\n            if (!entity.groupBefore || group.length >= groupSize) {\n              group = [];\n            }\n\n            group.push(entity);\n\n            if (!entity.groupAfter || group.length >= groupSize) {\n              group.ratio = 0;\n\n              group.forEach((entity) => {\n                group.ratio += (entity.thumbnail || entity).ratio;\n              });\n\n              group.forEach((entity) => {\n                entity.groupRatio = (entity.thumbnail || entity).ratio / group.ratio;\n              });\n\n              grouped.push(group);\n            }\n          });\n\n          return grouped;\n        },\n        pick: (input, ...paths) => _.map(input, (obj) => {\n          const copy = {};\n          if (forceId && obj.id) {\n            copy.id = obj.id;\n          }\n          paths.forEach((path) => {\n            const pathParts = path.match(/([^\\s]+)/g);\n            const pathFrom = pathParts[0];\n            const pathTo = pathParts[pathParts.length - 1];\n            _.set(copy, pathTo, _.get(obj, pathFrom));\n          });\n          return copy;\n        }),\n      },\n      allowRegexp: true,\n    });\n\n    return result;\n  }\n\n  static _queriesFromString(queryString) {\n    // Match and store (...args) from query so we can split by comma\n    const methodArgs = queryString.match(/\\(([^)]+)\\)/g);\n\n    // Replace (...args) with empty ()\n    queryString = queryString.replace(/\\(.*?\\)/g, '()');\n\n    // Extract queries\n    let queries = queryString.split(/,(?![^([]*[\\])])/g);\n\n    queries = queries.map((query) => {\n      // Replace () with original (...args)\n      if (/\\(\\)/.test(query)) {\n        query = query.replace('()', methodArgs.splice(0, 1));\n      }\n      return query.trim();\n    });\n\n    return queries;\n  }\n\n  async _entitiesById (ids = [], parents = null, role = 'guest') {\n    const query = {\n      include_docs: true,\n    };\n\n    if (ids.length) {\n      query.keys = ids;\n    }\n\n    let result = await Db.connect(this.config)\n      .view('entity', parents ? 'byIdExtended' : 'byId', query);\n\n    result = Entity._appendParents(result, parents, role);\n\n    return result;\n  }\n\n  static _childDepthLimit (children, merging = false) {\n    if (_.isNumber(children)) {\n      return children;\n    }\n    if (_.isArray(children)) {\n      if (merging) {\n        return children.length + 1;\n      }\n      return children.length;\n    }\n    return 1;\n  }\n\n  async _getDocMap (docs, children, parents, role, docMap = {}, childDepth = 0) {\n    if (!parents && !children) {\n      return docMap;\n    }\n\n    let ids = [];\n\n    docs.forEach((rowOrDoc) => {\n      const isRow = !!rowOrDoc.doc;\n\n      const doc = isRow ? rowOrDoc.doc : rowOrDoc;\n\n      if (children && doc.fields && _.size(doc.fields)) {\n        if (_.isArray(children)) {\n          const queryString = children[childDepth];\n          const queries = Entity._queriesFromString(queryString);\n\n          queries.forEach((query) => {\n            ids = ids.concat(_.flatten(Entity._query(doc, query, true).value).map(obj => obj && obj.id));\n          });\n\n        } else {\n          _.forEach(doc.fields, (field) => {\n            if (_.isArray(field.value)) {\n              field.value = field.value.filter(obj => obj);\n\n              field.value.forEach((obj) => {\n                if (obj.id) {\n                  ids.push(obj.id);\n                }\n              });\n            }\n          });\n        }\n      }\n\n      const id = isRow ? rowOrDoc.id : doc._id || doc.id;\n      if (!docMap[id]) {\n        ids.push(id);\n      }\n    });\n\n    ids = _.uniq(ids);\n\n    ids = ids.filter(id => !docMap[id]);\n\n    if (ids.length === 0) {\n      return docMap;\n    }\n\n    let _docs = (await this._entitiesById(ids, parents, role)).rows.map(row => row.doc);\n\n    _docs.forEach((doc) => {\n      docMap[doc._id] = doc;\n    });\n\n    childDepth += 1;\n\n    if (!children || (childDepth >= Entity._childDepthLimit(children))) {\n      return docMap;\n    }\n\n    docMap = await this._getDocMap(_docs, children, parents, role, docMap, childDepth);\n\n    _docs = null;\n\n    return docMap;\n  }\n\n  static _mergeDocs(docs, docMap, children, childDepth = 0) {\n    if (children && (childDepth + 1 >= Entity._childDepthLimit(children, true))) {\n      return docs;\n    }\n\n    docs = docs.map((rowOrDoc) => {\n      const isRow = !!rowOrDoc.doc;\n\n      let doc = isRow ? rowOrDoc.doc : rowOrDoc;\n\n      if (!doc.fields && docMap[rowOrDoc.id || rowOrDoc._id]) {\n        doc = docMap[rowOrDoc.id || rowOrDoc._id];\n      }\n\n      if (children && doc.fields && _.size(doc.fields)) {\n\n        let queryMap;\n\n        if (_.isArray(children)) {\n          queryMap = {};\n\n          const queryString = children[childDepth];\n          const queries = Entity._queriesFromString(queryString);\n\n          queries.forEach((query) => {\n            const queryField = query.split(/\\[|\\]/)[0];\n            queryMap[queryField] = query;\n          });\n        }\n\n        doc.fields = _.mapValues(doc.fields, (field, fieldSlug) => {\n          if (_.isArray(field.value)) {\n            field.value = field.value.filter(obj => obj);\n\n            if (!queryMap || (queryMap && queryMap[fieldSlug])) {\n              if (queryMap && queryMap[fieldSlug]) {\n                field.value = field.value.filter(obj => obj.id && docMap[obj.id]);\n              }\n\n              field.value = field.value.map((obj) => {\n                if (obj && obj.id && docMap[obj.id]) {\n                  obj = _.merge(obj, docMap[obj.id] || {});\n                  obj = _.omitBy(obj, (value, key) => key.startsWith('_'));\n                }\n                return obj;\n              });\n\n              field.value = Entity._mergeDocs(field.value, docMap, children, childDepth + 1);\n            }\n          }\n          return field;\n        });\n\n        doc.fields = _.mapValues(doc.fields, (field, fieldSlug) => {\n          if (_.isArray(field.value)) {\n            if (queryMap && queryMap[fieldSlug]) {\n              field.value = _.flatten(Entity._query(doc, queryMap[fieldSlug]).value);\n            }\n          }\n          return field;\n        });\n\n      }\n\n      if (isRow) {\n        rowOrDoc.doc = doc;\n      } else {\n        rowOrDoc = doc;\n      }\n\n      return rowOrDoc;\n    });\n\n    return docs;\n  }\n\n  async _extendDocs (docs, children, parents, role) {\n    let docMap = await this._getDocMap(docs, children, parents, role);\n\n    docs = Entity._mergeDocs(docs, docMap, children);\n\n    docMap = null;\n\n    return docs;\n  }\n\n  _removeChildren (entities) {\n    return new Promise((resolve, reject) => {\n      if (entities.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      entities = entities.map(entity => entity._id);\n\n      Db.connect(this.config).view('entity', 'byChildren', {\n        keys: entities,\n        include_docs: true,\n      })\n        .then((response) => {\n          const updatedEntities = _.uniqBy(response.rows, row => row.doc._id).map((row) => {\n            row.doc.fields = _.mapValues(row.doc.fields, (field) => {\n              if (_.isArray(field.value)) {\n                field.value = _.remove(field.value, obj => obj.type === 'entity' && entities.indexOf(obj.id) !== -1);\n              }\n              return field;\n            });\n\n            return row.doc;\n          });\n\n          if (updatedEntities.length === 0) {\n            resolve([]);\n            return;\n          }\n\n          Helpers.chunkUpdate(this.config, updatedEntities, CHUNK_UPDATE_SIZE)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  _updateChildren (entities) {\n    return new Promise((resolve, reject) => {\n      if (entities.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      const entityMap = {};\n\n      entities = entities.map((entity) => {\n        entityMap[entity._id] = entity;\n\n        return entity._id;\n      });\n\n      Db.connect(this.config).view('entity', 'byChildren', {\n        keys: entities,\n        include_docs: true,\n      })\n        .then((response) => {\n          const entities = response.rows.map((row) => {\n            const entity = row.doc;\n\n            _.forEach(entity.fields, (field, fieldSlug) => {\n              if (_.isArray(field.value)) {\n                entity.fields[fieldSlug].value = field.value.map((obj) => {\n                  if (obj.type === 'entity' && entityMap[obj.id]) {\n                    obj.slug = entityMap[obj.id].slug;\n                    obj.title = entityMap[obj.id].title;\n                    obj.schema = entityMap[obj.id].schema;\n                    obj.published = entityMap[obj.id].published;\n\n                    if (entityMap[obj.id].thumbnail) {\n                      obj.thumbnail = entityMap[obj.id].thumbnail;\n                    } else {\n                      obj.thumbnail = null;\n                    }\n                  }\n\n                  return obj;\n                });\n              }\n            });\n\n            return entity;\n          });\n\n          Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  async entityList (ids = [], children = null, parents = null, role = 'guest') {\n    const result = await this._entitiesById(ids, parents, role);\n\n    if ((!children && !parents) || result.total_rows === 0) {\n      return result.rows;\n    }\n\n    const rows = await this._extendDocs(result.rows, children, parents, role);\n\n    return rows;\n  }\n\n  _entitySearch (query, children = null, parents = null, role = 'guest') {\n    return new Promise((resolve, reject) => {\n      query.limit = Math.min(query.limit || 200, 200);\n      query.sort = _.isString(query.sort) ? `\"${query.sort}\"` : query.sort;\n\n      if (children) {\n        query.include_docs = true;\n      }\n\n      if (!query.include_fields) {\n        query.include_fields = [];\n      }\n\n      if (_.isArray(query.include_fields)) {\n        query.include_fields = JSON.stringify(query.include_fields);\n      }\n\n      if (!query.sort) {\n        delete query.sort;\n      }\n      if (!query.bookmark) {\n        delete query.bookmark;\n      }\n      if (!query.index) {\n        delete query.index;\n      }\n      if (!query.group_field) {\n        delete query.group_field;\n      }\n\n      Db.connect(this.config).search('entity', query.index || 'all', query)\n        .then((result) => {\n\n          if (result.groups) {\n            const promises = [];\n\n            result.groups = result.groups.map((group) => {\n              promises.push(new Promise((resolve, reject) => {\n                if ((!children && !parents) || group.total_rows === 0) {\n                  resolve();\n                  return;\n                }\n\n                this._extendDocs(group.hits, children, parents, role)\n                  .then((docs) => {\n                    group.hits = docs;\n\n                    resolve();\n                  }, reject);\n              }));\n              return group;\n            });\n\n            Promise.all(promises)\n              .then(() => {\n                resolve(result);\n              }, reject);\n\n            return;\n          }\n\n          if ((!children && !parents) || result.total_rows === 0) {\n            resolve(result);\n            return;\n          }\n\n          this._extendDocs(result.rows, children, parents, role)\n            .then((docs) => {\n              result.rows = docs;\n\n              resolve(result);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  entitySearch (query, children = null, parents = null, role = 'guest') {\n    return new Promise((resolve, reject) => {\n      const limit = query.limit || 25;\n\n      if (limit <= 200) {\n        this._entitySearch(query, children, parents, role)\n          .then(resolve, reject);\n        return;\n      }\n\n      let rows = [];\n      let groups = [];\n\n      function __entitySearch (bookmark) {\n        const _query = _.clone(query);\n\n        if (bookmark) {\n          _query.bookmark = bookmark;\n        }\n\n        this._entitySearch(_query, children, parents, role)\n          .then((result) => {\n            if (result.rows) {\n              rows = rows.concat(result.rows);\n            }\n            if (result.groups) {\n              groups = groups.concat(result.groups);\n            }\n\n            if (rows.length < result.total_rows && rows.length < limit) {\n              __entitySearch.call(this, result.bookmark);\n              return;\n            }\n\n            result.rows = rows;\n            result.groups = groups;\n\n            resolve(result);\n          }, reject);\n      }\n\n      __entitySearch.call(this);\n    });\n  }\n\n  async entityFind (query, children = null, parents = null, role = 'guest') {\n    let result;\n\n    try {\n      result = await Db.connect(this.config).find(query);\n    } catch (error) {\n      if (error.error === 'no_usable_index') {\n        const cc = new ClientConfig(this.config);\n        const clientConfig = await cc.get();\n\n        const schema = new Schema(this.config);\n        await schema.updateEntityIndex(clientConfig.schemas);\n\n        result = await Db.connect(this.config).find(query);\n      }\n    }\n\n    if (children === false) {\n      return result;\n    }\n\n    if (query.fields && query.fields.indexOf('_id') === -1) {\n      throw new Error('_id field required for `children`');\n    }\n\n    result.docs = await this._extendDocs(result.docs, children, parents, role);\n\n    return result;\n  }\n\n  entityRevisions (entityId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).get(entityId, {\n        revs_info: true,\n      })\n        .then((response) => {\n          const revisionIds = [];\n\n          response._revs_info.forEach((revision) => {\n            if (revision.status === 'available') {\n              revisionIds.push(revision.rev);\n            }\n          });\n\n          Db.connect(this.config).get(entityId, {\n            open_revs: JSON.stringify(revisionIds),\n          })\n            .then((response) => {\n              const revisions = [];\n              const childrenIds = [];\n\n              response.forEach((revision) => {\n                if (revision.ok) {\n                  revisions.push(revision.ok);\n\n                  _.forEach(revision.ok.fields, (field) => {\n                    if (/entity/.test(field.type)) {\n                      _.forEach(field.value, (obj) => {\n                        if (obj.id) {\n                          childrenIds.push(obj.id);\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n\n              Db.connect(this.config).fetch({\n                keys: _.uniq(childrenIds),\n                include_docs: true,\n              })\n                .then((result) => {\n                  const childrenMap = {};\n\n                  result.rows.forEach((row) => {\n                    try {\n                      childrenMap[row.doc._id] = row.doc;\n                    } catch (error) {\n                      console.error('Error: child no longer exists');\n                    }\n                  });\n\n                  resolve(Entity._appendChildren(revisions, childrenMap));\n                }, reject);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  entityCreate (entity) {\n    return new Promise((resolve, reject) => {\n      entity.type = 'entity';\n\n      Db.connect(this.config).insert(entity)\n        .then((response) => {\n          entity._id = response.id;\n          entity._rev = response.rev;\n\n          resolve(entity);\n        }, reject);\n    });\n  }\n\n  entityRead (entityId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).get(entityId)\n        .then(resolve, reject);\n    });\n  }\n\n  entityUpdate (entities, restore) {\n    return new Promise((resolve, reject) => {\n      entities = _.isArray(entities) ? entities : [entities];\n\n      const entityMap = {};\n\n      const entityIds = entities.map((entityOrEntityId) => {\n        let entityId;\n\n        if (_.isObject(entityOrEntityId)) {\n          entityId = entityOrEntityId._id;\n          entityMap[entityId] = entityOrEntityId;\n        }\n        if (_.isString(entityOrEntityId)) {\n          entityId = entityOrEntityId;\n        }\n\n        return entityId;\n      });\n\n      Db.connect(this.config).fetch({\n        keys: entityIds,\n        include_docs: true,\n      })\n        .then((response) => {\n          const children = [];\n\n          const entities = response.rows.map((row) => {\n            const oldEntity = row.doc;\n            const newEntity = entityMap[oldEntity._id];\n\n            let entity = oldEntity;\n\n            if (newEntity) {\n              delete newEntity._rev;\n\n              const diffs = diff(oldEntity, newEntity);\n\n              diffs.forEach((diff) => {\n                if (/slug|title|thumbnail/.test(diff.path[0])) {\n                  if (children.indexOf(newEntity) === -1 && entityIds.indexOf(newEntity._id) !== -1) {\n                    children.push(newEntity);\n                  }\n                }\n              });\n\n              entity = _.mergeWith({}, oldEntity, newEntity, (a, b) => {\n                if (_.isArray(a) && _.isArray(b)) {\n                  return b;\n                }\n                return undefined;\n              });\n            }\n\n            if (restore) {\n              entity.trashed = false;\n            }\n\n            return entity;\n          });\n\n          this._updateChildren(children)\n            .then(() => {\n              Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE)\n                .then(resolve, reject);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  async entityDelete (entityIds, forever = false) {\n    let entities;\n    let filesResult;\n\n    if (entityIds === 'trashed') {\n      forever = true;\n\n      entities = (await Db.connect(this.config).view('entity', 'trashed', {\n        include_docs: true,\n      })).rows;\n\n    } else {\n      entities = (await Db.connect(this.config).fetch({\n        keys: _.isArray(entityIds) ? entityIds : [entityIds],\n        include_docs: true,\n      })).rows;\n    }\n\n    entities = entities.filter(entity => !entity.value || !entity.value.deleted);\n\n    entities = entities.map(entity => entity.doc);\n\n    if (forever) {\n      await this._removeChildren(entities);\n\n      const fileNames = Entity._fileNames(entities);\n\n      if (fileNames.length) {\n        const assist = new Assist(this.config);\n        filesResult = await assist.deleteFiles(fileNames);\n      }\n\n      entities = entities.map(entity => ({\n        _id: entity._id,\n        _rev: entity._rev,\n        _deleted: true,\n      }));\n\n    } else {\n      entities = entities.map((entity) => {\n        entity.trashed = true;\n        return entity;\n      });\n    }\n\n    const entitiesResult = await Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE);\n\n    return {\n      entities: entitiesResult,\n      files: filesResult,\n    };\n  }\n\n}\n\nmodule.exports = Entity;\n","const path = require('path');\nconst fs = require('fs');\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst nodemailer = require('nodemailer');\nconst Createsend = Promise.promisifyAll(require('createsend-node'));\nconst nodemailerMailgunTransport = require('nodemailer-mailgun-transport');\nconst EmailTemplate = require('email-templates');\nconst Inky = require('inky').Inky;\nconst mjml2html = require('mjml');\nconst registerComponent = require('mjml-core').registerComponent;\nconst registerDependencies = require('mjml-validator').registerDependencies;\nconst { McSection, McImage } = require('mjml-mailchimp');\nconst htmlToText = require('html-to-text');\nconst moment = require('moment');\nconst countries = require('i18n-iso-countries');\nconst sass = require('node-sass');\n\nconst ClientConfig = require('./client-config');\nconst Helpers = require('./helpers');\n\n\nclass Email {\n  constructor(config) {\n    this.config = config;\n\n    this.inky = new Inky();\n\n    registerComponent(McSection);\n    registerComponent(McImage);\n    registerDependencies({\n      'mc-section': ['mj-column', 'mj-group', 'mj-raw'],\n      'mj-column': ['mc-image'],\n      'mj-hero': ['mc-image'],\n    });\n  }\n\n  getTemplate(templateSlug, templateData = {}, templateOptions = {}) {\n    return new Promise((resolve, reject) => {\n      const options = _.merge({}, {\n        inlineStyles: true,\n        inky: false,\n        mjml: false,\n        skipValidation: false,\n      }, templateOptions);\n\n      let templatePath = path.join(this.config.email.templatesPath, templateSlug);\n\n      if (!fs.existsSync(templatePath)) {\n        templatePath = path.resolve('../email', templateSlug);\n      }\n\n      const templateFiles = fs.readdirSync(templatePath);\n\n      let htmlPath = 'html';\n      // Support mjml templates\n      if (_.find(templateFiles, fileName => /^html\\.mjml/.test(fileName))) {\n        htmlPath = 'html.mjml';\n        options.mjml = true;\n      }\n\n      // Support ejs templates (for backwards compatibility)\n      // TODO: convert ejs templates to pug and remove\n      let extension;\n      if (_.find(templateFiles, fileName => /\\.ejs$/.test(fileName))) {\n        extension = 'ejs';\n      }\n\n      let style = '';\n      if (_.find(templateFiles, fileName => /^style\\.scss$/.test(fileName))) {\n        style = sass.renderSync({\n          file: path.join(templatePath, 'style.scss'),\n          sourceMapContents: !options.inlineStyles,\n          sourceMapEmbed: !options.inlineStyles,\n        }).css.toString().replace(/\"/g, '\\'');\n      }\n\n      const emailTemplate = new EmailTemplate({\n        views: {\n          root: this.config.email.templatesPath,\n          options: {\n            extension,\n          },\n        },\n        juice: options.inlineStyles,\n        juiceResources: {\n          preserveMediaQueries: true,\n          preserveFontFaces: true,\n          removeStyleTags: false,\n          removeLinkTags: false,\n          preserveImportant: true,\n          webResources: {\n            links: false,\n            scripts: false,\n            images: false,\n            // relativeTo: '',\n          },\n        },\n        transport: {\n          jsonTransport: true,\n        },\n      });\n\n      const cc = new ClientConfig(this.config);\n      const helpers = new Helpers(this.config);\n\n      cc.get()\n        .then((clientConfig) => {\n          templateData = _.merge({}, templateData, {\n            config: _.merge({}, _.pick(this.config, ['cms']), _.pick(clientConfig, ['slug', 'client', 'assets'])),\n            helpers,\n            style,\n            moment,\n            countries,\n            templateSlug,\n          });\n\n          emailTemplate.render(`${templateSlug}/${htmlPath}`, templateData)\n            .then((html) => {\n\n              if (options.mjml) {\n                const convertMjmlResult = mjml2html(html, {\n                  level: options.skipValidation ? 'skip' : 'soft',\n                });\n\n                if (convertMjmlResult.errors && convertMjmlResult.errors.length) {\n                  reject(convertMjmlResult.errors);\n                  return;\n                }\n\n                html = convertMjmlResult.html;\n              }\n\n              if (options.inky) {\n                html = this.inky.releaseTheKraken(html);\n              }\n\n              resolve({\n                html,\n                text: htmlToText.fromString(html),\n              });\n            }, reject);\n        }, reject);\n    });\n  }\n\n  sendEmail(emailOptions, templateSlug, templateData = {}, templateOptions = {}) {\n    return new Promise((resolve, reject) => {\n      const nodemailerMailgun = nodemailer.createTransport(nodemailerMailgunTransport({\n        auth: {\n          api_key: this.config.mailgun.apiKey,\n          domain: this.config.mailgun.domain,\n        },\n      }));\n\n      this.getTemplate(templateSlug, _.merge({}, emailOptions, templateData), templateOptions)\n        .then((emailTemplate) => {\n          emailOptions.html = emailTemplate.html;\n          emailOptions.text = emailTemplate.text;\n\n          nodemailerMailgun.sendMail(emailOptions, (error, metadata) => {\n            if (error) {\n              reject(error);\n              return;\n            }\n\n            resolve({\n              metadata,\n              email: emailOptions,\n            });\n          });\n        }, reject);\n    });\n  }\n\n  subscribe(details, provider, listId) {\n    return new Promise((resolve, reject) => {\n      const cc = new ClientConfig(this.config);\n\n      cc.get()\n        .then((clientConfig) => {\n          if (provider === 'createsend') {\n            if (clientConfig.provider.createsend) {\n              const cs = new Createsend({\n                apiKey: clientConfig.provider.createsend.clientApiKey,\n              });\n\n              const subscribers = Promise.promisifyAll(cs.subscribers);\n\n              subscribers.addSubscriberAsync(listId, {\n                EmailAddress: details.email,\n                Name: details.name,\n                Resubscribe: true,\n                RestartSubscriptionBasedAutoresponders: true,\n              })\n                .then((result) => {\n                  resolve(`Email.subscribe(): ${result.emailAddress}`);\n                })\n                .catch((error) => {\n                  reject(error.Message);\n                });\n\n              return;\n            }\n            reject(new Error('Subscriber list not configured'));\n          }\n        }, reject);\n    });\n  }\n\n}\n\nmodule.exports = Email;\n","module.exports = require(\"babel-runtime/core-js/object/freeze\");","const _ = require('lodash');\n\nconst roles = [\n  {\n    name: 'Admin',\n    slug: 'admin',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: true,\n      entityRead: true,\n      entityUpdate: true,\n      entityDelete: true,\n\n      taxonomyCreate: true,\n      taxonomyRead: true,\n      taxonomyUpdate: true,\n      taxonomyDelete: true,\n\n      fileCreate: true,\n      fileRead: true,\n      fileUpdate: true,\n      fileDelete: true,\n\n      config: false,\n      schema: false,\n      user: true,\n      settings: true,\n      userSettings: true,\n      tools: true,\n      ecommerce: true,\n    },\n  },\n  {\n    name: 'Editor',\n    slug: 'editor',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: true,\n      entityRead: true,\n      entityUpdate: true,\n      entityDelete: true,\n\n      taxonomyCreate: true,\n      taxonomyRead: true,\n      taxonomyUpdate: true,\n      taxonomyDelete: true,\n\n      fileCreate: true,\n      fileRead: true,\n      fileUpdate: true,\n      fileDelete: true,\n\n      config: false,\n      schema: false,\n      user: false,\n      settings: false,\n      userSettings: true,\n      tools: false,\n      ecommerce: false,\n    },\n  },\n  {\n    name: 'Guest',\n    slug: 'guest',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: false,\n      entityRead: true,\n      entityUpdate: false,\n      entityDelete: false,\n\n      taxonomyCreate: false,\n      taxonomyRead: true,\n      taxonomyUpdate: false,\n      taxonomyDelete: false,\n\n      fileCreate: false,\n      fileRead: true,\n      fileUpdate: false,\n      fileDelete: false,\n\n      config: false,\n      schema: false,\n      user: false,\n      settings: false,\n      userSettings: false,\n      tools: false,\n      ecommerce: false,\n    },\n  },\n];\n\nclass Roles {\n  roles() {\n    return roles.map(role => Object.freeze(role));\n  }\n  role(slug) {\n    return _.find(this.roles(), { slug });\n  }\n}\n\nmodule.exports = Roles;\n","module.exports = require(\"@cloudant/cloudant\");","const _ = require('lodash');\nconst axios = require('axios');\nconst passwordHash = require('password-hash');\nconst ClientConfig = require('./client-config');\n\nclass Assist {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async deleteFiles(fileNames) {\n    const cc = new ClientConfig(this.config);\n    const clientConfig = await cc.get();\n\n    const assetsSlug = _.get(clientConfig, 'assets.slug', this.config.slug);\n\n    if (fileNames.length === 0) {\n      return [];\n    }\n\n    const result = (await axios.post(`${this.config.assist.url}/${assetsSlug}/file/delete`, { fileNames }, {\n      auth: {\n        username: this.config.assist.username,\n        password: passwordHash.generate(this.config.assist.password),\n      },\n    })).data;\n\n    return result;\n  }\n\n}\n\nmodule.exports = Assist;\n","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\n\nclass User {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async create(user) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.users.push(user);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(userId) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const user = _.find(clientConfig.users, { id: userId });\n\n    if (!user) {\n      throw Error(`User not found: ${userId}`);\n    }\n\n    return user;\n  }\n\n  async update(user) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.users, { id: user.id });\n\n    if (index === -1) {\n      throw Error(`User not found: ${user.id}`);\n    }\n\n    clientConfig.users.splice(index, 1, user);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(userId) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    userId = _.isArray(userId) ? userId : [userId];\n\n    clientConfig.users = clientConfig.users.filter(user => userId.indexOf(user.id) === -1);\n\n    return cc.set(clientConfig);\n  }\n}\n\nmodule.exports = User;\n","const Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst Cloudant = require('@cloudant/cloudant');\nconst Db = require('./db');\n\nclass Tools {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getDb() {\n    const result = await Db.connect(this.config).fetch({\n      include_docs: true,\n    });\n\n    return result;\n  }\n\n  async getChanges() {\n    const result = await Db.connect(this.config).changes({\n      limit: 50,\n      include_docs: true,\n      filter: 'tools/changesEntity',\n    });\n\n    return result;\n  }\n\n  async importDb(dbBackupFile) {\n    const dbName = this.config.db.name;\n\n    const fileConents = await fs.readFileAsync(dbBackupFile.path);\n\n    const docs = JSON.parse(fileConents).rows.map((row) => {\n      const { doc } = row;\n      delete doc._rev;\n      return doc;\n    });\n\n    await fs.unlinkAsync(dbBackupFile.path);\n\n    const cloudant = new Cloudant({\n      url: this.config.db.url,\n      plugins: ['promises', 'retry'],\n    }).db;\n\n    try {\n      await cloudant.destroy(dbName);\n    } catch (error) {\n      //\n    }\n\n    await cloudant.create(dbName);\n\n    const result = await Db.connect(this.config, dbName).bulk({ docs });\n\n    return result;\n  }\n\n}\n\nmodule.exports = Tools;\n","const _ = require('lodash');\nconst Db = require('./db');\nconst ClientConfig = require('./client-config');\n\nclass Taxonomy {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async create(taxonomy) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.taxonomies.push(taxonomy);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(taxonomySlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const taxonomy = _.find(clientConfig.taxonomies, { slug: taxonomySlug });\n\n    if (!taxonomy) {\n      throw Error(`Taxonomy not found: ${taxonomySlug}`);\n    }\n\n    return taxonomy;\n  }\n\n  async update(taxonomy) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.taxonomies, { slug: taxonomy.slug });\n\n    if (index === -1) {\n      throw Error(`Taxonomy not found: ${taxonomy.slug}`);\n    }\n\n    clientConfig.taxonomies.splice(index, 1, taxonomy);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(taxonomySlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    taxonomySlug = _.isArray(taxonomySlug) ? taxonomySlug : [taxonomySlug];\n\n    clientConfig.taxonomies = clientConfig.taxonomies.filter(taxonomy => taxonomySlug.indexOf(taxonomy.slug) === -1);\n\n    return cc.set(clientConfig);\n  }\n\n  async entitiesByTerm(term) {\n    const db = Db.connect(this.config);\n\n    const entityGroups = (await db.view('entity', 'byTaxonomyTerm', { keys: [term.id], group: true })).rows.map(row => row.value)[0];\n\n    if (!entityGroups) {\n      return [];\n    }\n\n    let entityIds = [];\n\n    _.forEach(entityGroups, (entities) => {\n      entityIds = entityIds.concat(entities);\n    });\n\n    entityIds = _.uniq(entityIds);\n\n    const entities = (await db.fetch({ keys: entityIds, include_docs: true })).rows\n      .filter(row => row.doc)\n      .map(row => row.doc);\n\n    return entities;\n  }\n\n  async createTerm(taxonomySlug, term) {\n    const taxonomy = await this.read(taxonomySlug);\n\n    taxonomy.terms.push(term);\n\n    return this.update(taxonomy);\n  }\n\n  async updateTerm(term) {\n    let entities = await this.entitiesByTerm(term);\n\n    entities = entities.map((entity) => {\n      entity.fields = _.mapValues(entity.fields, (field) => {\n        if (field.type === 'taxonomy' && field.value) {\n          if (!field.value.terms) {\n            field.value.terms = [];\n          }\n\n          field.value.terms = field.value.terms.map((_term) => {\n            if (_term.id === term.id) {\n              _term.title = term.title;\n              _term.slug = term.slug;\n            }\n\n            if (!_term.parents) {\n              _term.parents = [];\n            }\n\n            _term.parents = _term.parents.map((parent) => {\n              if (parent.id === term.id) {\n                parent.title = term.title;\n                parent.slug = term.slug;\n              }\n              return parent;\n            });\n\n            return _term;\n          });\n        }\n\n        return field;\n      });\n      return entity;\n    });\n\n    return Db.connect(this.config).bulk({ docs: entities });\n  }\n\n  async deleteTerm(term) {\n    let entities = await this.entitiesByTerm(term);\n\n    entities = entities.map((entity) => {\n      entity.fields = _.mapValues(entity.fields, (field) => {\n        if (field.type === 'taxonomy' && field.value) {\n          if (!field.value.terms) {\n            field.value.terms = [];\n          }\n\n          field.value.terms = field.value.terms.filter((_term) => {\n            if (_term.id === term.id) {\n              return false;\n            }\n\n            if ((_term.parents || []).filter(parent => parent.id === term.id).length) {\n              return false;\n            }\n\n            return true;\n          });\n        }\n\n        return field;\n      });\n      return entity;\n    });\n\n    return Db.connect(this.config).bulk({ docs: entities });\n  }\n}\n\nmodule.exports = Taxonomy;\n","module.exports = require(\"hashids\");","module.exports = require(\"stripe\");","const _ = require('lodash');\nconst Stripe = require('stripe');\nconst Promise = require('bluebird');\nconst Hashids = require('hashids');\n\nconst ClientConfig = require('./client-config');\nconst Email = require('./email');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\n\nclass StripeClass {\n  constructor(config) {\n    this.config = config;\n\n    this.stripe = Stripe(this.config.stripe.apiKey);\n    this.email = new Email(this.config);\n\n    this.hashids = new Hashids(this.config.slug, 6, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  }\n\n  async getSettings() {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    let settings;\n\n    try {\n      settings = clientConfig.module.ecommerce;\n    } catch (error) {\n      throw new Error(error);\n    }\n\n    try {\n      settings.clientStripeAccountId = clientConfig.provider.stripe.stripe_user_id;\n    } catch (error) {\n      throw new Error(error);\n    }\n\n    settings.client = clientConfig.client;\n    settings.assets = clientConfig.assets;\n\n    return settings;\n  }\n\n  checkout(token, order) {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n\n          const listId = _.get(settings, 'createsend.checkoutSubscriberListId');\n\n          if (order.subscribe && listId) {\n            this.email.subscribe(order.customerDetails, 'createsend', listId)\n              .then((result) => {\n                console.log(result);\n              }, (error) => {\n                console.error(error);\n              });\n          }\n\n          // lookup customer by email, create if not found\n          this.findOrCreateCustomer(order.customerDetails.email, order)\n            .then((customer) => {\n\n              // store order data (customer, items, address)\n              this.createOrder(order, customer)\n                .then((order) => {\n\n                  this.updateOrCreateStripeCustomer(settings.clientStripeAccountId, customer, token, order)\n                    .then((stripeCustomer) => {\n\n                      // update customer, append order to customer, update metadata\n                      this.updateCustomer(customer, stripeCustomer, order)\n                        .then((customer) => {\n\n                          // create charge, take fee\n                          this.createCharge(settings, stripeCustomer, customer, order)\n                            .then((updatedOrder) => {\n\n                              this.sendReceipt(settings, customer, order)\n                                .then((orderReceipt) => {\n\n                                  updatedOrder.messages.orderReceipt = orderReceipt;\n\n                                  this.sendNotification(settings, customer, order)\n                                    .then((orderNotification) => {\n\n                                      updatedOrder.messages.orderNotification = orderNotification;\n\n                                      // update order charge status, charge id\n                                      this.updateOrder(updatedOrder)\n                                        .then((finalOrder) => {\n\n                                          resolve(finalOrder);\n\n                                        }, reject);\n                                    }, reject);\n                                }, reject);\n                            }, reject);\n                        }, reject);\n                    }, reject);\n                }, reject);\n            }, reject);\n        }, reject)\n        .catch(reject);\n    });\n  }\n\n  retrieveAccount() {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n          this.stripe.accounts.retrieve(settings.clientStripeAccountId)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  refund(order, amount) {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n          this.stripe.refunds.create({\n            refund_application_fee: true,\n            charge: order.charge.id,\n            amount,\n          }, {\n            stripe_account: settings.clientStripeAccountId,\n          })\n            .then((refund) => {\n              this.stripe.charges.retrieve(order.charge.id, {\n                stripe_account: settings.clientStripeAccountId,\n              })\n                .then((charge) => {\n                  order.charge.status = charge.status;\n                  order.charge.amount = charge.amount;\n                  order.charge.amountRefunded = charge.amount_refunded;\n\n                  Helpers.createOrUpdate(this.config, order)\n                    .then(resolve, reject);\n                }, reject);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  findOrCreateCustomer(email, order) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'customerByEmail', {\n        keys: [email],\n        include_docs: true,\n      })\n        .then((body) => {\n          if (body.rows.length) {\n            resolve(body.rows[0].doc);\n\n          } else {\n            const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n            const newCustomer = {\n              type: 'customer',\n              createdAt: now,\n              modifiedAt: now,\n              email: order.customerDetails.email,\n              name: order.customerDetails.name,\n              phone: order.customerDetails.phone,\n              billingAddress: order.billingAddress,\n              shippingAddress: order.shippingAddress,\n              orders: [],\n            };\n\n            Db.connect(this.config).insert(newCustomer)\n              .then((body) => {\n                newCustomer._id = body.id;\n                newCustomer._rev = body.rev;\n\n                resolve(newCustomer);\n              }, reject);\n          }\n        }, reject);\n    });\n  }\n\n  updateOrCreateStripeCustomer(clientStripeAccountId, customer, token, order) {\n    return new Promise((resolve, reject) => {\n      const stripeCustomer = {\n        source: token,\n        email: order.customer.email,\n        description: order.customer.name,\n        metadata: {\n          customer_id: customer._id,\n        // billingAddress: JSON.stringify(order.billingAddress),\n        // shippingAddress: JSON.stringify(order.shippingAddress)\n        },\n      };\n\n      if (customer.stripe && customer.stripe.customer.id) {\n        this.stripe.customers.update(customer.stripe.customer.id, stripeCustomer, {\n          stripe_account: clientStripeAccountId,\n        })\n          .then(resolve, (error) => {\n            if (error.type === 'StripeInvalidRequestError' && error.param === 'id') {\n              this.stripe.customers.create(stripeCustomer, {\n                stripe_account: clientStripeAccountId,\n              }).then(resolve, reject);\n\n            } else {\n              reject(error);\n            }\n          });\n\n      } else {\n        this.stripe.customers.create(stripeCustomer, {\n          stripe_account: clientStripeAccountId,\n        }).then(resolve, reject);\n      }\n    });\n  }\n\n  createOrder(order, customer) {\n    return new Promise((resolve, reject) => {\n      const items = order.items.map(item => ({\n        id: item.id,\n        title: item.title.replace(/<br\\s?>/ig, ' ').replace(/<\\/?p>|<\\/?span>/ig, ''),\n        price: item.price,\n        quantity: item.quantity,\n        metadata: item.metadata || {},\n      }));\n\n      const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n      const newOrder = {\n        type: 'order',\n        orderId: this.hashids.encode(new Date().getTime()),\n        createdAt: now,\n        modifiedAt: now,\n        customer: {\n          id: customer._id,\n          email: customer.email,\n          name: customer.name,\n        },\n        items,\n        shippingMethod: {\n          name: order.shippingMethod.name,\n          amount: Number(order.shippingMethod.amount),\n        },\n        subtotal: Number(order.subtotal),\n        tax: {\n          rate: order.tax.rate || 0,\n          includedInPrice: order.tax.includedInPrice || false,\n          total: order.tax.total || 0,\n          show: order.tax.show || false,\n        },\n        discount: {\n          code: order.discount.code || '',\n          name: order.discount.name || '',\n          total: order.discount.total || 0,\n        },\n        total: Number(order.total),\n        billingAddress: order.billingAddress,\n        shippingAddress: order.shippingAddress,\n        messages: {},\n        status: 'pending',\n        test: true,\n      };\n\n      Db.connect(this.config).insert(newOrder)\n        .then((body) => {\n          newOrder._id = body.id;\n          newOrder._rev = body.rev;\n\n          resolve(newOrder);\n        }, reject);\n    });\n  }\n\n  updateOrder(order) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).insert(order)\n        .then((body) => {\n          order._rev = body.rev;\n\n          resolve(order);\n        }, reject);\n    });\n  }\n\n  updateCustomer(customer, stripeCustomer, order) {\n    return new Promise((resolve, reject) => {\n      const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n      customer.modifiedAt = now;\n\n      if (!customer.orders) {\n        customer.orders = [];\n      }\n\n      customer.orders.push(order._id);\n\n      if (!customer.stripe) {\n        customer.stripe = {\n          customer: {\n            id: null,\n          },\n        };\n      }\n\n      customer.stripe.customer.id = stripeCustomer.id;\n\n      Db.connect(this.config).insert(customer)\n        .then((body) => {\n          customer._rev = body.rev;\n\n          resolve(customer);\n        }, reject);\n    });\n  }\n\n  createCharge(settings, stripeCustomer, customer, order) {\n    return new Promise((resolve, reject) => {\n      const amount = Number(order.total) * 100;\n\n      const charge = {\n        amount,\n        currency: settings.currency.iso.toLowerCase(),\n        customer: stripeCustomer.id,\n        capture: true,\n        description: order.orderId,\n        // shipping: order.shippingAddress, // fraud prevention, must follow expected schema\n        metadata: {\n          customer_id: customer._id,\n          order_id: order._id,\n        },\n        statement_descriptor: _.kebabCase(settings.storeName).toUpperCase(),\n        application_fee: Math.ceil(amount * 0.02),\n      };\n\n      this.stripe.charges.create(charge, {\n        stripe_account: settings.clientStripeAccountId,\n      })\n        .then((charge) => {\n\n          order.charge = {\n            paymentGateway: 'stripe',\n            id: charge.id,\n            status: charge.status,\n            currency: charge.currency.toUpperCase(),\n            amount: charge.amount,\n            amountRefunded: charge.amount_refunded,\n          };\n\n          order.test = !charge.livemode;\n\n          resolve(order);\n\n        }, reject);\n    });\n  }\n\n  sendReceipt(settings, customer, order) {\n    return new Promise((resolve, reject) => {\n      const templateData = {\n        settings,\n        order,\n      };\n\n      const emailOptions = {\n        from: `${settings.emailSenderName} <${settings.emailSenderAddress}>`,\n        to: customer.email,\n        subject: `Your order at ${settings.storeName} (${order.orderId})`,\n      };\n\n      const assetSlug = _.get(settings, 'assets.slug', this.config.slug);\n\n      this.email.sendEmail(emailOptions, `${assetSlug}/order-receipt`, templateData).then(resolve, reject);\n    });\n  }\n\n  sendNotification(settings, customer, order) {\n    return new Promise((resolve, reject) => {\n      const templateData = {\n        settings,\n        order,\n      };\n\n      const emailOptions = {\n        from: `${settings.emailSenderName} <${settings.emailSenderAddress}>`,\n        to: settings.emailSenderAddress,\n        subject: `New order at ${settings.storeName} (${order.orderId})`,\n      };\n\n      const assetSlug = _.get(settings, 'assets.slug', this.config.slug);\n\n      this.email.sendEmail(emailOptions, `${assetSlug}/order-notification`, templateData).then(resolve, reject);\n    });\n  }\n\n}\n\nmodule.exports = StripeClass;\n","module.exports = require(\"jsontoxml\");","module.exports = require(\"handlebars\");","module.exports = require(\"he\");","const axios = require('axios');\nconst he = require('he');\nconst Handlebars = require('handlebars');\nconst jsontoxml = require('jsontoxml');\n\nconst ClientConfig = require('./client-config');\n\nclass Shopify {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getCatalog({ shopLink, productLinkTemplate }) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const result = (await axios({\n      url: `https://${clientConfig.provider.shopify.domain}.myshopify.com/api/graphql`,\n      method: 'post',\n      headers: {\n        'X-Shopify-Storefront-Access-Token': clientConfig.provider.shopify.storefrontAccessToken,\n      },\n      data: {\n        query: `\n          query {\n            shop {\n              name\n              primaryDomain {\n                url\n              }\n              description\n              products(first: 250) {\n                edges {\n                  node {\n                    id\n                    handle\n                    title\n                    description\n                    onlineStoreUrl\n                    images(first: 1) {\n                      edges {\n                        node {\n                          originalSrc\n                          transformedSrc\n                        }\n                      }\n                    }\n                    productType\n                    vendor\n                    availableForSale\n                    priceRange {\n                      minVariantPrice {\n                        amount\n                        currencyCode\n                      }\n                      maxVariantPrice {\n                        amount\n                        currencyCode\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n      },\n    })).data.data;\n\n    const template = Handlebars.compile(productLinkTemplate);\n\n    const products = result.shop.products.edges.map(edge => ({\n      'g:id': edge.node.handle,\n      'g:title': he.encode(edge.node.title),\n      'g:description': he.encode(edge.node.description),\n      // 'g:link': edge.node.onlineStoreUrl,\n      'g:link': template({ handle: edge.node.handle }),\n      'g:image_link': edge.node.images.edges[0].node.originalSrc,\n      'g:brand': edge.node.vendor,\n      'g:condition': 'new',\n      'g:availability': edge.node.availableForSale ? 'in stock' : 'out of stock',\n      'g:price': `${edge.node.priceRange.minVariantPrice.amount} ${edge.node.priceRange.minVariantPrice.currencyCode}`,\n      // 'g:google_product_category': he.encode(edge.node.productType),\n    }));\n\n    const channel = [\n      { name: 'title', text: result.shop.name },\n      // { name: 'link', text: result.shop.primaryDomain.url },\n      { name: 'link', text: shopLink },\n      { name: 'description', text: result.shop.description },\n    ];\n\n    products.forEach((product) => {\n      channel.push({\n        name: 'item',\n        children: product,\n      });\n    });\n\n    return `<?xml version=\"1.0\"?>\n    <rss xmlns:g=\"http://base.google.com/ns/1.0\" version=\"2.0\">\n      ${jsontoxml({ channel })}\n    </rss>`;\n  }\n}\n\nmodule.exports = Shopify;\n","module.exports = require(\"shippo\");","const Promise = require('bluebird');\nconst shippo = require('shippo');\n\nclass Shippo {\n  constructor(config) {\n    this.config = config;\n\n    this.shippo = shippo(config.shippo.token);\n  }\n\n  getQuote(address, parcel) {\n    return new Promise((resolve, reject) => {\n\n      const addressFrom = {\n        object_purpose: 'QUOTE',\n        zip: this.config.shippo.fromZip,\n        country: this.config.shippo.fromCountry,\n      };\n\n      const addressTo = {\n        object_purpose: 'QUOTE',\n        // 'name': address.name,\n        // 'company': '',\n        // 'street1': address.street1,\n        // 'street2': address.street2,\n        // 'city': address.city,\n        // 'state': '',\n        zip: address.zip,\n        country: address.country,\n        // 'phone': address.phone,\n        // 'email': address.email,\n        metadata: '',\n      };\n\n      parcel.distance_unit = 'cm';\n      parcel.mass_unit = 'kg';\n\n      this.shippo.shipment.create({\n        object_purpose: 'QUOTE',\n        address_from: addressFrom,\n        address_to: addressTo,\n        parcel,\n      })\n        .then((shipment) => {\n          const ratesReady = (shipment, attempts) => {\n            if ((shipment.object_status === 'QUEUED' || shipment.object_status === 'WAITING') && attempts < 10) {\n              this.shippo.shipment.retrieve(shipment.object_id).then((val) => {\n                ratesReady(val, attempts + 1);\n              });\n\n            } else {\n              this.shippo.shipment.rates(shipment.object_id)\n                .then((rates) => {\n                  resolve(rates);\n\n                }, (error) => {\n                  console.error('There was an error retrieving rates : %s', error);\n                  reject(error);\n                });\n            }\n          };\n\n          ratesReady(shipment, 0);\n\n        }, (error) => {\n          console.error('There was an error creating shipment: %s', error);\n          reject(error);\n        });\n\n    });\n  }\n\n}\n\nmodule.exports = Shippo;\n","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\n\nclass Settings {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async update(settings) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.client = _.merge({}, clientConfig.client, settings);\n\n    return cc.set(clientConfig);\n  }\n}\n\nmodule.exports = Settings;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 35;","module.exports = require(\"recursive-readdir\");","module.exports = require(\"eval\");","module.exports = require(\"babel-runtime/helpers/typeof\");","const fs = require('fs');\nconst path = require('path');\nconst _ = require('lodash');\nconst _eval = require('eval');\nconst request = require('request-promise');\nconst readdir = require('recursive-readdir');\nconst Entity = require('./entity');\nconst ClientConfig = require('./client-config');\n\nclass Pdf {\n  constructor (config) {\n    this.config = config;\n  }\n\n  async getTemplates() {\n    const templates = {};\n\n    const files = await readdir(this.config.pdf.templatesPath);\n\n    files.forEach((file) => {\n      if (!/\\.js$/.test(file)) {\n        return;\n      }\n\n      const id = file\n        .replace(`${this.config.pdf.templatesPath}/`, '')\n        .replace('.js', '');\n\n      // eslint-disable-next-line\n      templates[id] = require(file);\n    });\n\n    return templates;\n  }\n\n  async getPayload (templateId, entityId, role) {\n    // if (!this.templates) {\n    //   this.templates = await this.getTemplates();\n    // }\n\n    // if (!this.templates[templateId]) {\n    //   throw new Error('Template not found');\n    // }\n\n    const template = _eval(fs.readFileSync(path.join(this.config.pdf.templatesPath, `${templateId}.js`), 'utf-8'), `${templateId}.js`, {}, true);\n\n    const entity = new Entity(this.config);\n\n    const entities = (await entity.entityList([entityId], 2, false, role)).map(row => row.doc);\n\n    if (entities.length === 0) {\n      throw new Error('Entity not found');\n    }\n\n    const payload = template(Entity.flattenValues(entities)[0]);\n\n    return payload;\n  }\n\n  async getPdf (payload) {\n    const cc = new ClientConfig(this.config);\n    const clientConfig = await cc.get();\n\n    const assetSlug = _.get(clientConfig, 'assets.slug', this.config.slug);\n    const assistPdfUrl = `${this.config.assist.url}/${assetSlug}/pdf/download`;\n\n    payload = typeof payload === 'object' ? JSON.stringify(payload).replace(/'/gi, '’') : payload;\n\n    const response = await request({\n      method: 'POST',\n      uri: assistPdfUrl,\n      encoding: null,\n      form: {\n        payload,\n      },\n    });\n\n    return response;\n  }\n\n}\n\nmodule.exports = Pdf;\n","module.exports = require(\"jsonwebtoken\");","const jwt = require('jsonwebtoken');\n\nclass Jwt {\n  constructor(config) {\n    this.config = config;\n  }\n\n  signToken(payload, options = {}) {\n    return jwt.sign(payload, this.config.auth.tokenSecret, options);\n  }\n\n  verifyToken(token) {\n    return jwt.verify(token, this.config.auth.tokenSecret);\n  }\n}\n\nmodule.exports = Jwt;\n","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst request = require('request-promise');\n\nmodule.exports = function (options) {\n  const defaultOptions = {\n    client_id: null,\n    access_token: null,\n    version: 'v1',\n    host: 'https://api.instagram.com',\n  };\n\n  options = _.merge({}, defaultOptions, options || {});\n\n  const _request = (method, endpoint, query) => new Promise((resolve, reject) => {\n    const requestOptions = {\n      method,\n      url: [options.host, options.version, endpoint].join('/'),\n      qs: {\n        access_token: query.access_token || options.access_token,\n        client_id: query.client_id || options.client_id,\n      },\n    };\n\n    requestOptions.qs = _.extend({}, requestOptions.qs, query);\n\n    request(requestOptions)\n      .then((response) => {\n        resolve(JSON.parse(response));\n      }, reject);\n  });\n\n  this.get = (endpoint, query) => _request('GET', endpoint, query);\n};\n","module.exports = require(\"deep-diff\");","module.exports = require(\"json-query\");","module.exports = require(\"embedly\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst EmbedlyApi = require('embedly');\n\nclass Embedly {\n  constructor(config) {\n    this.config = config;\n  }\n\n  oembed(urls) {\n    return new Promise((resolve, reject) => {\n      const embedly = new EmbedlyApi({\n        key: this.config.embedly.apiKey,\n      });\n\n      const opts = {\n        urls: _.isArray(urls) ? urls : [urls],\n        format: 'json',\n      };\n\n      embedly.oembed(opts, (error, result) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(result);\n      });\n    });\n  }\n\n}\n\nmodule.exports = Embedly;\n","module.exports = require(\"node-sass\");","module.exports = require(\"i18n-iso-countries\");","module.exports = require(\"moment\");","module.exports = require(\"html-to-text\");","module.exports = require(\"mjml-mailchimp\");","module.exports = require(\"mjml-validator\");","module.exports = require(\"mjml-core\");","module.exports = require(\"mjml\");","module.exports = require(\"inky\");","module.exports = require(\"email-templates\");","module.exports = require(\"nodemailer-mailgun-transport\");","module.exports = require(\"createsend-node\");","module.exports = require(\"nodemailer\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\n\nclass Ecommerce {\n  constructor(config) {\n    this.config = config;\n  }\n\n  getType(type, query) {\n    return new Promise((resolve, reject) => {\n      query.sort = _.isString(query.sort) ? `\"${query.sort}\"` : query.sort;\n\n      Db.connect(this.config).search('ecommerce', type, query)\n        .then(resolve, reject);\n    });\n  }\n\n  setType(type, item) {\n    return new Promise((resolve, reject) => {\n      item.type = type;\n\n      Helpers.createOrUpdate(this.config, item)\n        .then(resolve, reject);\n    });\n  }\n\n  deleteType(items) {\n    return new Promise((resolve, reject) => {\n      items = items.map(item => ({\n        _id: item._id,\n        _rev: item._rev,\n        _deleted: true,\n      }));\n\n      Helpers.chunkUpdate(this.config, items, 1000)\n        .then(resolve, reject);\n    });\n  }\n\n  getOrder(orderId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'orderByOrderId', {\n        key: orderId,\n        include_docs: true,\n      })\n        .then((body) => {\n          if (!body.rows.length) {\n            reject(new Error('Order not found'));\n            return;\n          }\n\n          resolve(body.rows[0].doc);\n        }, reject);\n    });\n  }\n\n  verifyDiscount(code) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'discountByCode', {\n        keys: [code],\n        include_docs: true,\n      })\n        .then((body) => {\n          if (body.rows.length) {\n            const discount = body.rows[0].doc;\n\n            const now = new Date().getTime();\n\n            const dateStart = new Date(Date.parse(discount.dateStart)).getTime();\n            const dateEnd = new Date(Date.parse(discount.dateEnd)).getTime();\n\n            if (dateStart > now) {\n              reject(new Error('Discount not valid (not begun)'));\n              return;\n\n            }\n\n            if (dateEnd < now) {\n              reject(new Error('Discount not valid (expired)'));\n              return;\n            }\n\n            resolve(discount);\n\n          } else {\n            reject(new Error({\n              statusCode: 404,\n              message: `Discount code not found (${code})`,\n            }));\n          }\n        }, reject);\n    });\n  }\n\n}\n\nmodule.exports = Ecommerce;\n","module.exports = require(\"querystring\");","const _ = require('lodash');\nconst querystring = require('querystring');\nconst axios = require('axios');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\n\nconst providerTokenUri = {\n  google: 'https://www.googleapis.com/oauth2/v4/token',\n  instagram: 'https://api.instagram.com/oauth/access_token',\n  stripe: 'https://connect.stripe.com/oauth/token',\n  vimeo: 'https://api.vimeo.com/oauth/access_token',\n  spotify: 'https://accounts.spotify.com/api/token',\n};\n\nclass Auth {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async authoriseUser(slug, userId) {\n    const isSuperUser = this.config.auth.superUserId.split(',').map(superUser => superUser.trim()).indexOf(userId) > -1;\n\n    if (isSuperUser) {\n      return {\n        id: userId,\n        role: 'super',\n      };\n    }\n\n    const clientConfig = await Db.connect(this.config, slug).get('config');\n\n    const user = _.find(clientConfig.users, { id: userId });\n\n    if (!user) {\n      throw Error(`User not found: ${userId}`);\n    }\n\n    if (!user.active) {\n      throw Error(`User not active: ${userId}`);\n    }\n\n    return user;\n  }\n\n  async authProvider(provider, params = {}, userId = null, refresh = false) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const providerConfig = _.merge({}, this.config.provider[provider], params || {});\n\n    let providerClientConfig;\n\n    if (userId) {\n      providerClientConfig = _.get(clientConfig, ['userSettings', userId, 'provider', provider], {});\n    } else {\n      providerClientConfig = _.get(clientConfig, ['provider', provider], {});\n    }\n\n    const data = {\n      grant_type: refresh ? 'refresh_token' : 'authorization_code',\n      code: params && params.code ? params.code : undefined,\n      client_id: providerConfig.clientId,\n      client_secret: providerConfig.clientSecret,\n      redirect_uri: providerConfig.redirectUri,\n      refresh_token: providerClientConfig.refresh_token,\n    };\n\n    const uri = providerTokenUri[provider];\n\n    let providerAuth;\n\n    try {\n      providerAuth = (await axios.post(uri, querystring.stringify(data))).data;\n    } catch (error) {\n      throw new Error(JSON.stringify(error.response.data));\n    }\n\n    providerClientConfig = _.merge({}, providerClientConfig, providerAuth);\n    providerClientConfig.begins = Math.floor(new Date().getTime() / 1000);\n\n    if (provider === 'google') {\n      try {\n        providerClientConfig.user = (await axios.get(`https://www.googleapis.com/plus/v1/people/me?access_token=${providerClientConfig.access_token}`)).data;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (provider === 'spotify') {\n      try {\n        providerClientConfig.user = (await axios.get(`https://api.spotify.com/v1/me?access_token=${providerClientConfig.access_token}`)).data;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (userId) {\n      _.set(clientConfig, ['userSettings', userId, 'provider', provider], providerClientConfig);\n    } else {\n      _.set(clientConfig, ['provider', provider], providerClientConfig);\n    }\n\n    return cc.set(clientConfig);\n  }\n\n}\n\nmodule.exports = Auth;\n","module.exports = require(\"password-hash\");","const path = require('path');\n\nconst config = {\n  environment: process.env.ENVIRONMENT || 'development',\n  debug: process.env.DEBUG || false,\n\n  slug: process.env.SLUG,\n  baseUrl: process.env.BASE_URL || '',\n\n  db: {\n    url: process.env.DB_URL,\n    host: process.env.DB_HOST,\n    name: process.env.DB_NAME,\n    requestPlugin: process.env.DB_REQUEST_PLUGIN,\n    meterType: process.env.DB_METER_TYPE,\n  },\n\n  auth: {\n    superUserId: process.env.AUTH_SUPER_USER_ID,\n    tokenSecret: process.env.AUTH_TOKEN_SECRET || 'change_this_secret',\n  },\n\n  dev: {\n    userId: process.env.DEV_USER_ID || 'dev',\n    role: process.env.DEV_ROLE || 'super',\n  },\n\n  cms: {\n    title: process.env.CMS_TITLE,\n    url: process.env.CMS_URL,\n  },\n\n  assist: {\n    url: process.env.ASSIST_URL,\n    username: process.env.ASSIST_USERNAME,\n    password: process.env.ASSIST_PASSWORD,\n  },\n\n  mailgun: {\n    apiKey: process.env.MAILGUN_API_KEY,\n    domain: process.env.MAILGUN_DOMAIN,\n  },\n\n  embedly: {\n    apiKey: process.env.EMBEDLY_API_KEY,\n  },\n\n  pdf: {\n    templatesPath: path.resolve(__dirname, 'pdf'),\n  },\n\n  email: {\n    templatesPath: path.resolve(__dirname, 'email'),\n  },\n\n  provider: {\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    },\n\n    instagram: {\n      clientId: process.env.INSTAGRAM_CLIENT_ID,\n      clientSecret: process.env.INSTAGRAM_CLIENT_SECRET,\n    },\n\n    spotify: {\n      clientId: process.env.SPOTIFY_CLIENT_ID,\n      clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n    },\n\n    stripe: {\n      clientId: process.env.STRIPE_CLIENT_ID,\n      clientSecret: process.env.STRIPE_CLIENT_SECRET,\n      apiKey: process.env.STRIPE_API_KEY,\n    },\n\n    twitter: {\n      consumerKey: process.env.TWITTER_CONSUMER_KEY,\n      consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n      accessTokenKey: process.env.TWITTER_ACCESS_TOKEN_KEY,\n      accessTokenSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n    },\n\n    vimeo: {\n      clientId: process.env.VIMEO_CLIENT_ID,\n      clientSecret: process.env.VIMEO_CLIENT_SECRET,\n    },\n  },\n};\n\nmodule.exports = config;\n","function Api() { }\n\nApi.defaultConfig = require('./config.default');\n\nApi.Assist = (...args) => new (require('./lib/assist'))(...args);\nApi.Auth = (...args) => new (require('./lib/auth'))(...args);\nApi.ClientConfig = (...args) => new (require('./lib/client-config'))(...args);\nApi.Db = (...args) => new (require('./lib/db'))(...args);\nApi.Ecommerce = (...args) => new (require('./lib/ecommerce'))(...args);\nApi.Email = (...args) => new (require('./lib/email'))(...args);\nApi.Embedly = (...args) => new (require('./lib/embedly'))(...args);\nApi.Entity = (...args) => new (require('./lib/entity'))(...args);\nApi.Fields = (...args) => new (require('./lib/fields'))(...args);\nApi.Helpers = (...args) => new (require('./lib/helpers'))(...args);\nApi.Instagram = (...args) => new (require('./lib/instagram'))(...args);\nApi.Jwt = (...args) => new (require('./lib/jwt'))(...args);\nApi.Pdf = (...args) => new (require('./lib/pdf'))(...args);\nApi.Roles = (...args) => new (require('./lib/roles'))(...args);\nApi.Schema = (...args) => new (require('./lib/schema'))(...args);\nApi.Settings = (...args) => new (require('./lib/settings'))(...args);\nApi.Shippo = (...args) => new (require('./lib/shippo'))(...args);\nApi.Shopify = (...args) => new (require('./lib/shopify'))(...args);\nApi.Stripe = (...args) => new (require('./lib/stripe'))(...args);\nApi.Taxonomy = (...args) => new (require('./lib/taxonomy'))(...args);\nApi.Tools = (...args) => new (require('./lib/tools'))(...args);\nApi.User = (...args) => new (require('./lib/user'))(...args);\n\nmodule.exports = Api;\n"],"sourceRoot":""}