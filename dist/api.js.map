{"version":3,"sources":["webpack://AceApi/webpack/universalModuleDefinition","webpack://AceApi/webpack/bootstrap","webpack://AceApi/external \"babel-runtime/helpers/classCallCheck\"","webpack://AceApi/external \"babel-runtime/helpers/createClass\"","webpack://AceApi/external \"lodash\"","webpack://AceApi/external \"babel-runtime/regenerator\"","webpack://AceApi/external \"babel-runtime/helpers/asyncToGenerator\"","webpack://AceApi/./lib/client-config.js","webpack://AceApi/./lib/db.js","webpack://AceApi/external \"bluebird\"","webpack://AceApi/./lib/helpers.js","webpack://AceApi/external \"babel-runtime/core-js/json/stringify\"","webpack://AceApi/external \"path\"","webpack://AceApi/external \"axios\"","webpack://AceApi/external \"fs\"","webpack://AceApi/./lib/assist.js","webpack://AceApi/external \"@cloudant/cloudant\"","webpack://AceApi/./lib/roles.js","webpack://AceApi/external \"babel-runtime/core-js/object/freeze\"","webpack://AceApi/./lib/email.js","webpack://AceApi/./lib/entity.js","webpack://AceApi/./lib/schema.js","webpack://AceApi/./lib/fields.js","webpack://AceApi/external \"request-promise\"","webpack://AceApi/./index.js","webpack://AceApi/./config.default.js","webpack://AceApi/external \"password-hash\"","webpack://AceApi/./lib/auth.js","webpack://AceApi/external \"querystring\"","webpack://AceApi/./lib/ecommerce.js","webpack://AceApi/external \"nodemailer\"","webpack://AceApi/external \"createsend-node\"","webpack://AceApi/external \"nodemailer-mailgun-transport\"","webpack://AceApi/external \"email-templates\"","webpack://AceApi/external \"inky\"","webpack://AceApi/external \"mjml\"","webpack://AceApi/external \"mjml-core\"","webpack://AceApi/external \"mjml-validator\"","webpack://AceApi/external \"mjml-mailchimp\"","webpack://AceApi/external \"html-to-text\"","webpack://AceApi/external \"moment\"","webpack://AceApi/external \"i18n-iso-countries\"","webpack://AceApi/external \"node-sass\"","webpack://AceApi/./lib/embedly.js","webpack://AceApi/external \"embedly\"","webpack://AceApi/external \"babel-runtime/helpers/extends\"","webpack://AceApi/external \"json-query\"","webpack://AceApi/external \"deep-diff\"","webpack://AceApi/./lib/instagram.js","webpack://AceApi/./lib/jwt.js","webpack://AceApi/external \"jsonwebtoken\"","webpack://AceApi/./lib/pdf.js","webpack://AceApi/external \"babel-runtime/helpers/typeof\"","webpack://AceApi/external \"eval\"","webpack://AceApi/external \"recursive-readdir\"","webpack://AceApi/./lib sync","webpack://AceApi/./lib/settings.js","webpack://AceApi/./lib/shippo.js","webpack://AceApi/external \"shippo\"","webpack://AceApi/./lib/shopify.js","webpack://AceApi/external \"he\"","webpack://AceApi/external \"handlebars\"","webpack://AceApi/external \"jsontoxml\"","webpack://AceApi/./lib/stripe.js","webpack://AceApi/external \"stripe\"","webpack://AceApi/external \"hashids\"","webpack://AceApi/./lib/taxonomy.js","webpack://AceApi/./lib/tools.js","webpack://AceApi/./lib/user.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_","Db","Helpers","DEFAULT_CLIENT_CONFIG","_id","client","assets","schemas","taxonomies","users","roles","provider","ClientConfig","config","_classCallCheck3","default","this","clientConfig","connect","merge","slug","createOrUpdate","Cloudant","dbName","url","db","maxAttempt","plugins","retry","retryDelayMultiplier","retryInitialDelayMsecs","use","Promise","assistUrl","assist","thumbnail","settings","cropSlug","cropDefault","settingsArray","split","forEach","setting","crop","crops","x","y","x2","y2","g","push","join","settingsString","test","thumbnailType","ext","thumbnailUrl","replace","doc","resolve","reject","insert","then","response","id","_rev","rev","error","statusCode","docs","chunkSize","arguments","length","undefined","promises","chunk","bulk","all","entities","groupSize","Infinity","grouped","group","entity","groupBefore","groupAfter","ratio","groupRatio","_stringify2","Date","array","replacementObject","map","axios","passwordHash","Assist","fileNames","cc","assetsSlug","post","auth","username","password","generate","result","data","permissions","entityGrid","entityCreate","entityRead","entityUpdate","entityDelete","taxonomyCreate","taxonomyRead","taxonomyUpdate","taxonomyDelete","fileCreate","fileRead","fileUpdate","fileDelete","schema","user","userSettings","tools","ecommerce","Roles","role","_freeze2","find","path","fs","nodemailer","Createsend","promisifyAll","nodemailerMailgunTransport","EmailTemplate","Inky","mjml2html","registerComponent","registerDependencies","McSection","McImage","htmlToText","moment","countries","sass","Email","inky","mc-section","mj-column","mj-hero","templateSlug","_this","templateData","templateOptions","options","inlineStyles","mjml","skipValidation","templatePath","email","templatesPath","existsSync","templateFiles","readdirSync","htmlPath","fileName","extension","style","renderSync","file","sourceMapContents","sourceMapEmbed","css","toString","emailTemplate","views","juice","juiceResources","preserveMediaQueries","preserveFontFaces","removeStyleTags","removeLinkTags","preserveImportant","webResources","links","scripts","images","transport","jsonTransport","helpers","pick","render","html","convertMjmlResult","level","errors","releaseTheKraken","text","fromString","emailOptions","_this2","nodemailerMailgun","createTransport","api_key","mailgun","apiKey","domain","getTemplate","sendMail","metadata","details","listId","_this3","createsend","cs","clientApiKey","subscribers","addSubscriberAsync","EmailAddress","Name","Resubscribe","RestartSubscriptionBasedAutoresponders","emailAddress","catch","Message","Error","jsonQuery","diff","Schema","Entity","flattenValues","fieldSlug","searchTerm","viewWithList","startkey","endkey","ids","parents","query","include_docs","keys","view","_appendParents","rowsOrDocs","docMap","_childDepth","children","childIds","rowOrDoc","isRow","fields","size","isArray","_queriesFromString","concat","flatten","_query","obj","field","filter","uniq","_entitiesById","row","rows","childDocs","_extends3","_childDepthLimit","_getDocMap","select","_mergeDocs","updatedEntities","uniqBy","mapValues","type","indexOf","chunkUpdate","entityMap","title","published","_extendDocs","limit","Math","min","sort","isString","include_fields","bookmark","index","group_field","search","groups","total_rows","hits","_this4","_entitySearch","__entitySearch","_this5","clone","_context6","t0","updateEntityIndex","entityId","_this6","revs_info","revisionIds","_revs_info","revision","status","open_revs","revisions","childrenIds","ok","fetch","childrenMap","console","_appendChildren","_this7","_this8","restore","entityIds","entityOrEntityId","isObject","oldFileNames","oldEntity","newEntity","mergeWith","a","b","trashed","_updateChildren","forever","filesResult","deleted","_removeChildren","_fileNames","deleteFiles","_deleted","entitiesResult","files","omitBy","startsWith","filterEntityFields","isFieldQuery","queryParts","trim","selector","slice","locals","input","start","end","sample","sampleSize","_len","paths","Array","_key","copy","pathParts","match","pathFrom","pathTo","set","allowRegexp","queryString","methodArgs","queries","emptyArgs","times","splice","isNumber","fieldQueryMap","Fields","schemaSlug","findIndex","schemaSlugs","ddoc","default_field","enabled","analyzer","$and","fieldRef","dataType","Api","defaultConfig","args","Function","apply","Auth","_len2","_key2","_len3","_key3","_len4","_key4","Ecommerce","_len5","_key5","_len6","_key6","Embedly","_len7","_key7","_len8","_key8","_len9","_key9","_len10","_key10","Instagram","_len11","_key11","Jwt","_len12","_key12","Pdf","_len13","_key13","_len14","_key14","_len15","_key15","Settings","_len16","_key16","Shippo","_len17","_key17","Shopify","_len18","_key18","Stripe","_len19","_key19","Taxonomy","_len20","_key20","Tools","_len21","_key21","User","_len22","_key22","environment","process","env","ENVIRONMENT","debug","DEBUG","SLUG","baseUrl","BASE_URL","DB_URL","host","DB_HOST","DB_NAME","requestPlugin","DB_REQUEST_PLUGIN","meterType","DB_METER_TYPE","superUserId","AUTH_SUPER_USER_ID","tokenSecret","AUTH_TOKEN_SECRET","dev","userId","DEV_USER_ID","DEV_ROLE","cms","CMS_TITLE","CMS_URL","ASSIST_URL","ASSIST_USERNAME","ASSIST_PASSWORD","MAILGUN_API_KEY","MAILGUN_DOMAIN","embedly","EMBEDLY_API_KEY","pdf","__dirname","google","clientId","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","instagram","INSTAGRAM_CLIENT_ID","INSTAGRAM_CLIENT_SECRET","spotify","SPOTIFY_CLIENT_ID","SPOTIFY_CLIENT_SECRET","stripe","STRIPE_CLIENT_ID","STRIPE_CLIENT_SECRET","STRIPE_API_KEY","twitter","consumerKey","TWITTER_CONSUMER_KEY","consumerSecret","TWITTER_CONSUMER_SECRET","accessTokenKey","TWITTER_ACCESS_TOKEN_KEY","accessTokenSecret","TWITTER_ACCESS_TOKEN_SECRET","vimeo","VIMEO_CLIENT_ID","VIMEO_CLIENT_SECRET","querystring","providerTokenUri","superUser","active","params","refresh","providerConfig","providerClientConfig","grant_type","code","client_id","client_secret","redirect_uri","redirectUri","refresh_token","uri","providerAuth","stringify","_context2","begins","floor","getTime","access_token","t1","t2","item","items","orderId","body","discount","now","dateStart","parse","dateEnd","message","EmbedlyApi","urls","opts","format","oembed","request","version","endpoint","method","requestOptions","qs","extend","JSON","_request","jwt","payload","sign","token","verify","_eval","readdir","templates","templateId","template","readFileSync","entityList","assetSlug","assistPdfUrl","_typeof3","encoding","form","webpackEmptyContext","req","e","shippo","address","parcel","addressFrom","object_purpose","zip","fromZip","country","fromCountry","addressTo","distance_unit","mass_unit","shipment","address_from","address_to","ratesReady","attempts","object_status","retrieve","object_id","val","rates","he","Handlebars","jsontoxml","shopLink","productLinkTemplate","shopify","headers","X-Shopify-Storefront-Access-Token","storefrontAccessToken","compile","products","shop","edges","edge","g:id","node","handle","g:title","encode","g:description","description","g:link","g:image_link","originalSrc","g:brand","vendor","g:condition","g:availability","availableForSale","g:price","priceRange","minVariantPrice","amount","currencyCode","channel","product","Hashids","StripeClass","hashids","_context","clientStripeAccountId","stripe_user_id","order","getSettings","subscribe","customerDetails","log","findOrCreateCustomer","customer","createOrder","updateOrCreateStripeCustomer","stripeCustomer","updateCustomer","createCharge","updatedOrder","sendReceipt","orderReceipt","messages","sendNotification","orderNotification","updateOrder","finalOrder","accounts","refunds","refund_application_fee","charge","stripe_account","refund","charges","amountRefunded","amount_refunded","newCustomer","createdAt","modifiedAt","phone","billingAddress","shippingAddress","orders","source","customer_id","customers","update","param","price","quantity","newOrder","shippingMethod","Number","subtotal","tax","rate","includedInPrice","total","show","_this9","currency","iso","toLowerCase","capture","order_id","statement_descriptor","kebabCase","storeName","toUpperCase","application_fee","ceil","paymentGateway","livemode","_this10","from","emailSenderName","emailSenderAddress","to","subject","sendEmail","_this11","taxonomy","taxonomySlug","term","entityGroups","read","terms","entitiesByTerm","_term","parent","changes","dbBackupFile","readFileAsync","fileConents","unlinkAsync","cloudant","destroy"],"mappings":"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","file":"api.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AceApi\"] = factory();\n\telse\n\t\troot[\"AceApi\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"lodash\");","module.exports = require(\"babel-runtime/regenerator\");","module.exports = require(\"babel-runtime/helpers/asyncToGenerator\");","const _ = require('lodash');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\nconst Roles = require('./roles');\n\nconst roles = new Roles();\n\nconst DEFAULT_CLIENT_CONFIG = {\n  _id: 'config',\n  client: {},\n  assets: {},\n  schemas: [],\n  taxonomies: [],\n  users: [],\n  roles: roles.roles(),\n  provider: {},\n  module: {},\n};\n\nclass ClientConfig {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async get() {\n    let clientConfig = DEFAULT_CLIENT_CONFIG;\n\n    try {\n      clientConfig = await Db.connect(this.config).get('config');\n\n      clientConfig = _.merge({}, DEFAULT_CLIENT_CONFIG, clientConfig);\n    } catch (error) {\n      //\n    }\n\n    clientConfig.slug = this.config.slug;\n\n    return clientConfig;\n  }\n\n  async set(clientConfig) {\n    clientConfig._id = 'config';\n\n    delete clientConfig.roles;\n\n    clientConfig = await Helpers.createOrUpdate(this.config, clientConfig);\n\n    clientConfig = _.merge({}, DEFAULT_CLIENT_CONFIG, clientConfig);\n\n    return clientConfig;\n  }\n}\n\n\nmodule.exports = ClientConfig;\n","const Cloudant = require('@cloudant/cloudant');\n\nclass Db {\n  constructor (config, dbName) {\n    this.config = config;\n\n    return Db.connect(config, dbName);\n  }\n\n  static connect (config, dbName) {\n    const cloudant = new Cloudant({\n      url: config.db.url,\n      maxAttempt: 5,\n      plugins: [\n        'promises',\n        {\n          retry: {\n            retryDelayMultiplier: 2,\n            retryInitialDelayMsecs: 500,\n          },\n        },\n      ],\n    });\n\n    return cloudant.db.use(dbName || config.db.name);\n  }\n}\n\nmodule.exports = Db;\n","module.exports = require(\"bluebird\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst Db = require('./db');\n\nclass Helpers {\n  constructor(config) {\n    this.config = config;\n    this.assistUrl = config.assist.url;\n    this.slug = config.slug;\n  }\n\n  static createOrUpdate (config, doc) {\n    return new Promise((resolve, reject) => {\n      Db.connect(config).insert(doc)\n        .then((response) => {\n          doc._id = response.id;\n          doc._rev = response.rev;\n          resolve(doc);\n        }, (error) => {\n          if (error.statusCode !== 409) {\n            reject(error);\n            return;\n          }\n\n          Db.connect(config).get(doc._id)\n            .then((response) => {\n              doc._rev = response._rev;\n\n              Db.connect(config).insert(doc)\n                .then((response) => {\n                  doc._rev = response.rev;\n                  resolve(doc);\n                }, reject);\n            }, reject);\n        });\n    });\n  }\n\n  static chunkUpdate (config, docs, chunkSize = 1000) {\n    return new Promise((resolve, reject) => {\n      const chunks = _.chunk(docs, chunkSize);\n      const promises = [];\n\n      chunks.forEach((chunk) => {\n        promises.push(new Promise((resolve, reject) => {\n          Db.connect(config).bulk({\n            docs: chunk,\n          }).then(resolve, reject);\n        }));\n      });\n\n      Promise.all(promises).then(resolve, reject);\n    });\n  }\n\n  static groupEntities (entities, groupSize = Infinity) {\n    const grouped = [];\n\n    let group = {\n      entities: [],\n    };\n\n    entities.forEach((entity) => {\n      if (!entity.groupBefore || group.entities.length >= groupSize) {\n        group = {\n          entities: [],\n        };\n      }\n\n      group.entities.push(entity);\n\n      if (!entity.groupAfter || group.entities.length >= groupSize) {\n        group.ratio = 0;\n\n        group.entities.forEach((entity) => {\n          group.ratio += (entity.thumbnail || entity).ratio;\n        });\n\n        group.entities.forEach((entity) => {\n          entity.groupRatio = (entity.thumbnail || entity).ratio / group.ratio;\n        });\n\n        grouped.push(group);\n      }\n    });\n\n    return grouped;\n  }\n\n  static now () {\n    return JSON.stringify(new Date()).replace(/\"/g, '');\n  }\n\n  static replace (array, replacementObject, key) {\n    return array.map((object) => {\n      if (object[key] === replacementObject[key]) {\n        return replacementObject;\n      }\n      return object;\n    });\n  }\n\n  thumbnailSrc (thumbnail, settings, cropSlug, cropDefault) {\n    if (!thumbnail) {\n      return '';\n    }\n\n    let settingsArray;\n\n    if (typeof settings === 'string') {\n      settingsArray = settings.split(/,|;/);\n\n      settings = {};\n\n      settingsArray.forEach((setting) => {\n        setting = setting.split(/_|:/);\n\n        settings[setting[0]] = setting[1];\n      });\n    }\n\n    const crop = thumbnail.crops ? thumbnail.crops[cropSlug] : false;\n\n    if (crop) {\n      settings.x = crop[0];\n      settings.y = crop[1];\n      settings.x2 = crop[2];\n      settings.y2 = crop[3];\n    } else if (cropDefault) {\n      settings.g = cropDefault;\n    }\n\n    settingsArray = [];\n\n    _.forEach(settings, (value, key) => {\n      settingsArray.push([key, value].join(':'));\n    });\n\n    const settingsString = settingsArray.join(';');\n\n    if (/(image)/.test(thumbnail.thumbnailType)) {\n      if (thumbnail.ext === 'svg') {\n        return [this.assistUrl, this.slug, thumbnail.name + thumbnail.ext].join('/');\n      }\n\n      return [this.assistUrl, this.slug, 'transform', settingsString, thumbnail.name + thumbnail.ext].join('/');\n    }\n\n    if (/(video)/.test(thumbnail.thumbnailType)) {\n      return [this.assistUrl, this.slug, 'transform', settingsString, thumbnail.name, 'thumb.jpg'].join('/');\n    }\n\n    if (/(oembed|proxy)/.test(thumbnail.thumbnailType)) {\n      const thumbnailUrl = thumbnail.thumbnailUrl.replace(/https?:\\/\\//, '');\n\n      return [this.assistUrl, this.slug, 'proxy', 'transform', settingsString, thumbnailUrl].join('/');\n    }\n\n    return '';\n  }\n\n}\n\nmodule.exports = Helpers;\n","module.exports = require(\"babel-runtime/core-js/json/stringify\");","module.exports = require(\"path\");","module.exports = require(\"axios\");","module.exports = require(\"fs\");","const _ = require('lodash');\nconst axios = require('axios');\nconst passwordHash = require('password-hash');\nconst ClientConfig = require('./client-config');\n\nclass Assist {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async deleteFiles(fileNames) {\n    const cc = new ClientConfig(this.config);\n    const clientConfig = await cc.get();\n\n    const assetsSlug = _.get(clientConfig, 'assets.slug', this.config.slug);\n\n    if (fileNames.length === 0) {\n      return [];\n    }\n\n    const result = (await axios.post(`${this.config.assist.url}/${assetsSlug}/file/delete`, { fileNames }, {\n      auth: {\n        username: this.config.assist.username,\n        password: passwordHash.generate(this.config.assist.password),\n      },\n    })).data;\n\n    return result;\n  }\n\n}\n\nmodule.exports = Assist;\n","module.exports = require(\"@cloudant/cloudant\");","const _ = require('lodash');\n\nconst roles = [\n  {\n    name: 'Admin',\n    slug: 'admin',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: true,\n      entityRead: true,\n      entityUpdate: true,\n      entityDelete: true,\n\n      taxonomyCreate: true,\n      taxonomyRead: true,\n      taxonomyUpdate: true,\n      taxonomyDelete: true,\n\n      fileCreate: true,\n      fileRead: true,\n      fileUpdate: true,\n      fileDelete: true,\n\n      config: false,\n      schema: false,\n      user: true,\n      settings: true,\n      userSettings: true,\n      tools: true,\n      ecommerce: true,\n    },\n  },\n  {\n    name: 'Editor',\n    slug: 'editor',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: true,\n      entityRead: true,\n      entityUpdate: true,\n      entityDelete: true,\n\n      taxonomyCreate: true,\n      taxonomyRead: true,\n      taxonomyUpdate: true,\n      taxonomyDelete: true,\n\n      fileCreate: true,\n      fileRead: true,\n      fileUpdate: true,\n      fileDelete: true,\n\n      config: false,\n      schema: false,\n      user: false,\n      settings: false,\n      userSettings: true,\n      tools: false,\n      ecommerce: false,\n    },\n  },\n  {\n    name: 'Guest',\n    slug: 'guest',\n    permissions: {\n      entityGrid: true,\n\n      entityCreate: false,\n      entityRead: true,\n      entityUpdate: false,\n      entityDelete: false,\n\n      taxonomyCreate: false,\n      taxonomyRead: true,\n      taxonomyUpdate: false,\n      taxonomyDelete: false,\n\n      fileCreate: false,\n      fileRead: true,\n      fileUpdate: false,\n      fileDelete: false,\n\n      config: false,\n      schema: false,\n      user: false,\n      settings: false,\n      userSettings: false,\n      tools: false,\n      ecommerce: false,\n    },\n  },\n];\n\nclass Roles {\n  roles() {\n    return roles.map(role => Object.freeze(role));\n  }\n  role(slug) {\n    return _.find(this.roles(), { slug });\n  }\n}\n\nmodule.exports = Roles;\n","module.exports = require(\"babel-runtime/core-js/object/freeze\");","const path = require('path');\nconst fs = require('fs');\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst nodemailer = require('nodemailer');\nconst Createsend = Promise.promisifyAll(require('createsend-node'));\nconst nodemailerMailgunTransport = require('nodemailer-mailgun-transport');\nconst EmailTemplate = require('email-templates');\nconst Inky = require('inky').Inky;\nconst mjml2html = require('mjml');\nconst registerComponent = require('mjml-core').registerComponent;\nconst registerDependencies = require('mjml-validator').registerDependencies;\nconst { McSection, McImage } = require('mjml-mailchimp');\nconst htmlToText = require('html-to-text');\nconst moment = require('moment');\nconst countries = require('i18n-iso-countries');\nconst sass = require('node-sass');\n\nconst ClientConfig = require('./client-config');\nconst Helpers = require('./helpers');\n\n\nclass Email {\n  constructor(config) {\n    this.config = config;\n\n    this.inky = new Inky();\n\n    registerComponent(McSection);\n    registerComponent(McImage);\n    registerDependencies({\n      'mc-section': ['mj-column', 'mj-group', 'mj-raw'],\n      'mj-column': ['mc-image'],\n      'mj-hero': ['mc-image'],\n    });\n  }\n\n  getTemplate(templateSlug, templateData = {}, templateOptions = {}) {\n    return new Promise((resolve, reject) => {\n      const options = _.merge({}, {\n        inlineStyles: true,\n        inky: false,\n        mjml: false,\n        skipValidation: false,\n      }, templateOptions);\n\n      let templatePath = path.join(this.config.email.templatesPath, templateSlug);\n\n      if (!fs.existsSync(templatePath)) {\n        templatePath = path.resolve('../email', templateSlug);\n      }\n\n      const templateFiles = fs.readdirSync(templatePath);\n\n      let htmlPath = 'html';\n      // Support mjml templates\n      if (_.find(templateFiles, fileName => /^html\\.mjml/.test(fileName))) {\n        htmlPath = 'html.mjml';\n        options.mjml = true;\n      }\n\n      // Support ejs templates (for backwards compatibility)\n      // TODO: convert ejs templates to pug and remove\n      let extension;\n      if (_.find(templateFiles, fileName => /\\.ejs$/.test(fileName))) {\n        extension = 'ejs';\n      }\n\n      let style = '';\n      if (_.find(templateFiles, fileName => /^style\\.scss$/.test(fileName))) {\n        style = sass.renderSync({\n          file: path.join(templatePath, 'style.scss'),\n          sourceMapContents: !options.inlineStyles,\n          sourceMapEmbed: !options.inlineStyles,\n        }).css.toString().replace(/\"/g, '\\'');\n      }\n\n      const emailTemplate = new EmailTemplate({\n        views: {\n          root: this.config.email.templatesPath,\n          options: {\n            extension,\n          },\n        },\n        juice: options.inlineStyles,\n        juiceResources: {\n          preserveMediaQueries: true,\n          preserveFontFaces: true,\n          removeStyleTags: false,\n          removeLinkTags: false,\n          preserveImportant: true,\n          webResources: {\n            links: false,\n            scripts: false,\n            images: false,\n            // relativeTo: '',\n          },\n        },\n        transport: {\n          jsonTransport: true,\n        },\n      });\n\n      const cc = new ClientConfig(this.config);\n      const helpers = new Helpers(this.config);\n\n      cc.get()\n        .then((clientConfig) => {\n          templateData = _.merge({}, templateData, {\n            config: _.merge({}, _.pick(this.config, ['cms']), _.pick(clientConfig, ['slug', 'client', 'assets'])),\n            helpers,\n            style,\n            moment,\n            countries,\n            templateSlug,\n          });\n\n          emailTemplate.render(`${templateSlug}/${htmlPath}`, templateData)\n            .then((html) => {\n\n              if (options.mjml) {\n                const convertMjmlResult = mjml2html(html, {\n                  level: options.skipValidation ? 'skip' : 'soft',\n                });\n\n                if (convertMjmlResult.errors && convertMjmlResult.errors.length) {\n                  reject(convertMjmlResult.errors);\n                  return;\n                }\n\n                html = convertMjmlResult.html;\n              }\n\n              if (options.inky) {\n                html = this.inky.releaseTheKraken(html);\n              }\n\n              resolve({\n                html,\n                text: htmlToText.fromString(html),\n              });\n            }, reject);\n        }, reject);\n    });\n  }\n\n  sendEmail(emailOptions, templateSlug, templateData = {}, templateOptions = {}) {\n    return new Promise((resolve, reject) => {\n      const nodemailerMailgun = nodemailer.createTransport(nodemailerMailgunTransport({\n        auth: {\n          api_key: this.config.mailgun.apiKey,\n          domain: this.config.mailgun.domain,\n        },\n      }));\n\n      this.getTemplate(templateSlug, _.merge({}, emailOptions, templateData), templateOptions)\n        .then((emailTemplate) => {\n          emailOptions.html = emailTemplate.html;\n          emailOptions.text = emailTemplate.text;\n\n          nodemailerMailgun.sendMail(emailOptions, (error, metadata) => {\n            if (error) {\n              reject(error);\n              return;\n            }\n\n            resolve({\n              metadata,\n              email: emailOptions,\n            });\n          });\n        }, reject);\n    });\n  }\n\n  subscribe(details, provider, listId) {\n    return new Promise((resolve, reject) => {\n      const cc = new ClientConfig(this.config);\n\n      cc.get()\n        .then((clientConfig) => {\n          if (provider === 'createsend') {\n            if (clientConfig.provider.createsend) {\n              const cs = new Createsend({\n                apiKey: clientConfig.provider.createsend.clientApiKey,\n              });\n\n              const subscribers = Promise.promisifyAll(cs.subscribers);\n\n              subscribers.addSubscriberAsync(listId, {\n                EmailAddress: details.email,\n                Name: details.name,\n                Resubscribe: true,\n                RestartSubscriptionBasedAutoresponders: true,\n              })\n                .then((result) => {\n                  resolve(`Email.subscribe(): ${result.emailAddress}`);\n                })\n                .catch((error) => {\n                  reject(error.Message);\n                });\n\n              return;\n            }\n            reject(new Error('Subscriber list not configured'));\n          }\n        }, reject);\n    });\n  }\n\n}\n\nmodule.exports = Email;\n","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst jsonQuery = require('json-query');\nconst { diff } = require('deep-diff');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\nconst Schema = require('./schema');\nconst Assist = require('./assist');\n\nconst CHUNK_UPDATE_SIZE = 1000;\n\nclass Entity {\n  constructor(config) {\n    this.config = config;\n\n    // Expose helpers\n    this.flattenValues = Entity.flattenValues;\n  }\n\n  static flattenValues(docs) {\n    return docs.map((doc) => {\n      if (!doc.fields || !_.size(doc.fields)) {\n        return doc;\n      }\n\n      doc.fields = _.mapValues(doc.fields, (field) => {\n        if (/entity/.test(field.type) && _.isArray(field.value)) { // entity / entityTile / entityGrid\n          field.value = Entity.flattenValues(field.value);\n        }\n        return field.value;\n      });\n\n      return doc;\n    });\n  }\n\n  static filterEntityFields(docs, role = 'guest') {\n    const isArray = _.isArray(docs);\n\n    docs = (isArray ? docs : [docs]).map((doc) => {\n      if (_.size(doc.fields)) {\n        doc.fields = _.mapValues(doc.fields, (field) => {\n          if (_.isArray(field.value)) {\n            field.value = field.value.filter((obj) => {\n              if (!obj) {\n                return false;\n              }\n              if (obj.type && obj.type === 'entity' && role === 'guest') {\n                return obj.published !== undefined ? obj.published : true;\n              }\n              return true;\n            });\n          }\n          return field;\n        });\n      }\n      return doc;\n    });\n\n    return isArray ? docs : docs[0];\n  }\n\n  static _appendChildren(docs, childrenMap) {\n    return docs.map((doc) => {\n      if (!_.size(doc.fields)) {\n        return doc;\n      }\n\n      doc.fields = _.mapValues(doc.fields, (field) => {\n        if (_.isArray(field.value)) {\n          field.value = field.value.filter((obj) => {\n            if (!obj) {\n              return false;\n            }\n            if (obj.type === 'entity') {\n              return childrenMap[obj.id] !== undefined;\n            }\n            return true;\n          });\n\n          field.value = field.value.map((obj) => {\n            if (obj.type === 'entity') {\n              obj = _.merge(obj, childrenMap[obj.id]);\n            }\n            obj = _.omitBy(obj, (value, key) => key.startsWith('_'));\n            return obj;\n          });\n        }\n\n        return field;\n      });\n\n      return doc;\n    });\n  }\n\n  static _appendParents(result, parents = null, role = 'guest') {\n    let entityMap = {};\n\n    result.rows.forEach((row) => {\n      if (row.doc && row.value.type === 'entity') {\n        entityMap[row.id] = { ...row.doc, parents: [] };\n      }\n    });\n\n    if (parents) {\n      result.rows.forEach((row) => {\n        if (row.doc && row.value.type === 'parent') {\n          entityMap[row.key].parents.push(Entity.filterEntityFields(row.doc, role));\n        }\n      });\n\n      entityMap = _.mapValues(entityMap, (entity) => {\n        entity.parents = _.uniqBy(entity.parents, entity => entity._id);\n        return entity;\n      });\n    }\n\n    result.rows = result.rows.map((row) => {\n      row.doc = entityMap[row.id];\n      return row;\n    });\n\n    result.rows = result.rows.filter(row => row.value.type === 'entity');\n\n    return result;\n  }\n\n  static _fileNames(entities) {\n    const fileNames = [];\n\n    entities.forEach((entity) => {\n      _.forEach(entity.fields, (field) => {\n        if (field.value && field.value.file) {\n          fileNames.push(field.value.file.name);\n        }\n      });\n    });\n\n    return _.uniq(fileNames);\n  }\n\n  async fieldValues(fieldSlug, searchTerm) {\n    const result = await Db.connect(this.config).viewWithList('entity', 'byField', 'search', {\n      startkey: [fieldSlug],\n      endkey: [fieldSlug, {}],\n      group: true,\n      searchTerm,\n    });\n    return result;\n  }\n\n  static _query(data, query, isFieldQuery = false) {\n    query = query.replace(/(\\s\\s|\\t|\\r|\\n)/g, '');\n\n    if (isFieldQuery) {\n      const queryParts = query.trim().split(/\\[|\\]/);\n      const selector = `fields.${queryParts[0]}.value[${queryParts[1] || '*'}]`;\n      const modifier = /\\]:/.test(query) ? `:${query.split(/\\]:/).slice(-1)[0].trim()}` : '';\n      query = `${selector}${modifier}`;\n    }\n\n    const result = jsonQuery(query, {\n      data,\n      locals: {\n        slice: (input, start, end) => _.slice(input, start, end),\n        sample: (input, size = 1) => _.sampleSize(input, size),\n        group: (entities, groupSize = Infinity) => {\n          const grouped = [];\n\n          let group = [];\n\n          entities.forEach((entity) => {\n            if (!entity.groupBefore || group.length >= groupSize) {\n              group = [];\n            }\n\n            group.push(entity);\n\n            if (!entity.groupAfter || group.length >= groupSize) {\n              group.ratio = 0;\n\n              group.forEach((entity) => {\n                group.ratio += (entity.thumbnail || entity).ratio;\n              });\n\n              group.forEach((entity) => {\n                entity.groupRatio = (entity.thumbnail || entity).ratio / group.ratio;\n              });\n\n              grouped.push(group);\n            }\n          });\n\n          return grouped;\n        },\n        pick: (input, ...paths) => _.map(input, (obj) => {\n          const copy = {\n            id: obj.id || undefined,\n          };\n          paths = paths.filter(path => path); // Remove empty paths (tolerate trailing comma in args)\n          paths.forEach((path) => {\n            const pathParts = path.match(/([^\\s]+)/g);\n            const pathFrom = pathParts[0];\n            const pathTo = pathParts[pathParts.length - 1];\n            _.set(copy, pathTo, _.get(obj, pathFrom));\n          });\n          return copy;\n        }),\n      },\n      allowRegexp: true,\n    });\n\n    return result;\n  }\n\n  static _queriesFromString(queryString) {\n    // Remove white space\n    queryString = queryString.replace(/(\\s\\s|\\t|\\r|\\n)/gm, '');\n\n    // Match and store (...args) from query so we can split by comma\n    const methodArgs = queryString.match(/\\(([^)]+)\\)/g);\n\n    // Replace (...args) with empty ()\n    queryString = queryString.replace(/\\(.*?\\)/g, '()');\n\n    // Extract queries\n    let queries = queryString.split(/,(?![^([]*[\\])])/g);\n\n    queries = queries.map((query) => {\n      // Replace () with original (...args)\n      const emptyArgs = query.match(/\\(\\)/g);\n      if (emptyArgs) {\n        _.times(emptyArgs.length, () => {\n          query = query.replace('()', methodArgs.splice(0, 1));\n        });\n      }\n      return query.trim();\n    });\n\n    return queries;\n  }\n\n  async _entitiesById(ids = [], options = {}) {\n    options = _.merge({\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    const query = {\n      include_docs: true,\n    };\n\n    if (ids.length) {\n      query.keys = ids;\n    }\n\n    let result = await Db.connect(this.config)\n      .view('entity', options.parents ? 'byIdExtended' : 'byId', query);\n\n    result = Entity._appendParents(result, options.parents, options.role);\n\n    return result;\n  }\n\n  static _childDepthLimit(children) {\n    let limit = 0;\n    if (_.isNumber(children)) {\n      limit = children - 1;\n    }\n    if (_.isArray(children)) {\n      limit = children.length - 1;\n    }\n    return limit;\n  }\n\n  async _getDocMap(rowsOrDocs, docMap = {}, options = {}) {\n    options._childDepth = options._childDepth || 0;\n\n    if (!options.parents && !options.children) {\n      return docMap;\n    }\n\n    let ids = [];\n    let childIds = [];\n\n    rowsOrDocs.forEach((rowOrDoc) => {\n      const isRow = !!rowOrDoc.doc;\n\n      const doc = isRow ? rowOrDoc.doc : rowOrDoc;\n\n      if (options.children && doc.fields && _.size(doc.fields)) {\n        if (_.isArray(options.children)) {\n          Entity._queriesFromString(options.children[options._childDepth]).forEach((query) => {\n            childIds = childIds.concat(_.flatten(Entity._query(doc, query, true).value).map(obj => obj && obj.id));\n          });\n\n        } else {\n          _.forEach(doc.fields, (field) => {\n            if (_.isArray(field.value)) {\n              field.value = field.value.filter(obj => obj);\n\n              field.value.forEach((obj) => {\n                if (obj.id) {\n                  childIds.push(obj.id);\n                }\n              });\n            }\n          });\n        }\n      }\n\n      ids.push(isRow ? rowOrDoc.id : doc._id || doc.id);\n    });\n\n    ids = _.uniq(ids);\n    ids = ids.filter(id => !docMap[id]);\n\n    let docs = [];\n    if (ids.length > 0) {\n      docs = (await this._entitiesById(ids, options)).rows.map(row => row.doc);\n\n      docs.forEach((doc) => {\n        docMap[doc._id] = doc;\n      });\n    }\n\n    childIds = _.uniq(childIds);\n    childIds = childIds.filter(id => !docMap[id]);\n\n    let childDocs = [];\n    if (childIds.length > 0) {\n      childDocs = (await this._entitiesById(childIds, { ...options, parents: false })).rows.map(row => row.doc);\n\n      childDocs.forEach((doc) => {\n        docMap[doc._id] = doc;\n      });\n    }\n\n    if (!options.children || (options._childDepth === Entity._childDepthLimit(options.children))) {\n      return docMap;\n    }\n\n    docMap = await this._getDocMap(childDocs, docMap, { ...options, parents: false, _childDepth: options._childDepth + 1 });\n\n    return docMap;\n  }\n\n  static _mergeDocs(docs, docMap, options = { children: false, parents: false }) {\n    options._childDepth = options._childDepth || 0;\n\n    if (options.children && (options._childDepth - 1 === Entity._childDepthLimit(options.children))) {\n      return docs;\n    }\n\n    docs = docs.map((rowOrDoc) => {\n      const isRow = !!rowOrDoc.doc;\n\n      let doc = isRow ? rowOrDoc.doc : rowOrDoc;\n\n      if (docMap[rowOrDoc.id || rowOrDoc._id]) {\n        doc = _.merge({}, doc, docMap[rowOrDoc.id || rowOrDoc._id]);\n      }\n\n      if (options.children && doc.fields && _.size(doc.fields)) {\n\n        let fieldQueryMap;\n\n        if (_.isArray(options.children)) {\n          fieldQueryMap = {};\n          Entity._queriesFromString(options.children[options._childDepth]).forEach((query) => {\n            const key = query.split(/\\[|\\]/)[0];\n            fieldQueryMap[key] = query;\n          });\n        }\n\n        doc.fields = _.mapValues(doc.fields, (field, fieldSlug) => {\n          if (_.isArray(field.value)) {\n            field.value = field.value.filter(obj => obj);\n\n            if (!fieldQueryMap || (fieldQueryMap && fieldQueryMap[fieldSlug])) {\n              if (fieldQueryMap && fieldQueryMap[fieldSlug]) {\n                field.value = field.value.filter(obj => obj.id && docMap[obj.id]);\n              }\n\n              field.value = field.value.map((obj) => {\n                if (obj && obj.id && docMap[obj.id]) {\n                  obj = _.merge(obj, docMap[obj.id] || {});\n                  obj = _.omitBy(obj, (value, key) => key.startsWith('_'));\n                }\n                return obj;\n              });\n\n              field.value = Entity._mergeDocs(field.value, docMap, { ...options, _childDepth: options._childDepth + 1 });\n            }\n          }\n          return field;\n        });\n\n        doc.fields = _.mapValues(doc.fields, (field, fieldSlug) => {\n          if (_.isArray(field.value)) {\n            if (fieldQueryMap && fieldQueryMap[fieldSlug]) {\n              field.value = _.flatten(Entity._query(doc, fieldQueryMap[fieldSlug], true).value);\n            }\n          }\n          return field;\n        });\n      }\n\n      if (_.isArray(options.parents) && doc.parents) {\n        doc.parents = _.flatten(Entity._query(doc.parents, options.parents[0]).value);\n      }\n\n      if (isRow) {\n        rowOrDoc.doc = doc;\n      } else {\n        rowOrDoc = doc;\n      }\n\n      return rowOrDoc;\n    });\n\n    return docs;\n  }\n\n  async _extendDocs(docs, options = {}) {\n    options = _.merge({\n      select: false,\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    let docMap = await this._getDocMap(docs, {}, options);\n\n    docs = Entity._mergeDocs(docs, docMap, options);\n\n    if (options.select) {\n      docs = _.flatten(Entity._query(docs, options.select).value);\n    }\n\n    docMap = null;\n\n    return docs;\n  }\n\n  _removeChildren(entities) {\n    return new Promise((resolve, reject) => {\n      if (entities.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      entities = entities.map(entity => entity._id);\n\n      Db.connect(this.config).view('entity', 'byChildren', {\n        keys: entities,\n        include_docs: true,\n      })\n        .then((response) => {\n          const updatedEntities = _.uniqBy(response.rows, row => row.doc._id).map((row) => {\n            row.doc.fields = _.mapValues(row.doc.fields, (field) => {\n              if (_.isArray(field.value)) {\n                field.value = _.filter(field.value, obj => !(obj.type === 'entity' && entities.indexOf(obj.id) !== -1));\n              }\n              return field;\n            });\n\n            return row.doc;\n          });\n\n          if (updatedEntities.length === 0) {\n            resolve([]);\n            return;\n          }\n\n          Helpers.chunkUpdate(this.config, updatedEntities, CHUNK_UPDATE_SIZE)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  _updateChildren(entities) {\n    return new Promise((resolve, reject) => {\n      if (entities.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      const entityMap = {};\n\n      entities = entities.map((entity) => {\n        entityMap[entity._id] = entity;\n\n        return entity._id;\n      });\n\n      Db.connect(this.config).view('entity', 'byChildren', {\n        keys: entities,\n        include_docs: true,\n      })\n        .then((response) => {\n          const entities = response.rows.map((row) => {\n            const entity = row.doc;\n\n            _.forEach(entity.fields, (field, fieldSlug) => {\n              if (_.isArray(field.value)) {\n                entity.fields[fieldSlug].value = field.value\n                  .filter(obj => obj)\n                  .map((obj) => {\n                    if (obj.type === 'entity' && entityMap[obj.id]) {\n                      obj.slug = entityMap[obj.id].slug;\n                      obj.title = entityMap[obj.id].title;\n                      obj.schema = entityMap[obj.id].schema;\n                      obj.published = entityMap[obj.id].published;\n\n                      if (entityMap[obj.id].thumbnail) {\n                        obj.thumbnail = entityMap[obj.id].thumbnail;\n                      } else {\n                        obj.thumbnail = null;\n                      }\n                    }\n\n                    return obj;\n                  });\n              }\n            });\n\n            return entity;\n          });\n\n          Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  async entityList(ids = [], options = {}) {\n    options = _.merge({\n      select: false,\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    const result = await this._entitiesById(ids, options);\n\n    const rows = await this._extendDocs(result.rows, options);\n\n    return rows;\n  }\n\n  _entitySearch(query, options = {}) {\n    return new Promise((resolve, reject) => {\n      query.limit = Math.min(query.limit || 200, 200);\n      query.sort = _.isString(query.sort) ? `\"${query.sort}\"` : query.sort;\n\n      if (options.children) {\n        query.include_docs = true;\n      }\n\n      if (!query.include_fields) {\n        query.include_fields = [];\n      }\n\n      if (_.isArray(query.include_fields)) {\n        query.include_fields = JSON.stringify(query.include_fields);\n      }\n\n      if (!query.sort) {\n        delete query.sort;\n      }\n      if (!query.bookmark) {\n        delete query.bookmark;\n      }\n      if (!query.index) {\n        delete query.index;\n      }\n      if (!query.group_field) {\n        delete query.group_field;\n      }\n\n      Db.connect(this.config).search('entity', query.index || 'all', query)\n        .then((result) => {\n\n          if (result.groups) {\n            const promises = [];\n\n            result.groups = result.groups.map((group) => {\n              promises.push(new Promise((resolve, reject) => {\n                if ((!options.children && !options.parents) || group.total_rows === 0) {\n                  resolve();\n                  return;\n                }\n\n                this._extendDocs(group.hits, options)\n                  .then((docs) => {\n                    group.hits = docs;\n\n                    resolve();\n                  }, reject);\n              }));\n              return group;\n            });\n\n            Promise.all(promises)\n              .then(() => {\n                resolve(result);\n              }, reject);\n\n            return;\n          }\n\n          this._extendDocs(result.rows, options)\n            .then((docs) => {\n              result.rows = docs;\n\n              resolve(result);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  entitySearch(query, options = {}) {\n    options = _.merge({\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    return new Promise((resolve, reject) => {\n      const limit = query.limit || 25;\n\n      if (limit <= 200) {\n        this._entitySearch(query, options)\n          .then(resolve, reject);\n        return;\n      }\n\n      let rows = [];\n      let groups = [];\n\n      function __entitySearch(bookmark) {\n        const _query = _.clone(query);\n\n        if (bookmark) {\n          _query.bookmark = bookmark;\n        }\n\n        this._entitySearch(_query, options)\n          .then((result) => {\n            if (result.rows) {\n              rows = rows.concat(result.rows);\n            }\n            if (result.groups) {\n              groups = groups.concat(result.groups);\n            }\n\n            if (rows.length < result.total_rows && rows.length < limit) {\n              __entitySearch.call(this, result.bookmark);\n              return;\n            }\n\n            result.rows = rows;\n            result.groups = groups;\n\n            resolve(result);\n          }, reject);\n      }\n\n      __entitySearch.call(this);\n    });\n  }\n\n  async entityFind(query, options = {}) {\n    options = _.merge({\n      children: false,\n      parents: false,\n      role: 'guest',\n    }, options);\n\n    let result;\n\n    try {\n      result = await Db.connect(this.config).find(query);\n    } catch (error) {\n      if (error.error === 'no_usable_index') {\n        const cc = new ClientConfig(this.config);\n        const clientConfig = await cc.get();\n\n        const schema = new Schema(this.config);\n        await schema.updateEntityIndex(clientConfig.schemas);\n\n        result = await Db.connect(this.config).find(query);\n      }\n    }\n\n    if (options.children === false) {\n      return result;\n    }\n\n    if (query.fields && query.fields.indexOf('_id') === -1) {\n      throw new Error('_id field required for `children`');\n    }\n\n    result.docs = await this._extendDocs(result.docs, options);\n\n    return result;\n  }\n\n  entityRevisions(entityId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).get(entityId, {\n        revs_info: true,\n      })\n        .then((response) => {\n          const revisionIds = [];\n\n          response._revs_info.forEach((revision) => {\n            if (revision.status === 'available') {\n              revisionIds.push(revision.rev);\n            }\n          });\n\n          Db.connect(this.config).get(entityId, {\n            open_revs: JSON.stringify(revisionIds),\n          })\n            .then((response) => {\n              const revisions = [];\n              const childrenIds = [];\n\n              response.forEach((revision) => {\n                if (revision.ok) {\n                  revisions.push(revision.ok);\n\n                  _.forEach(revision.ok.fields, (field) => {\n                    if (/entity/.test(field.type)) {\n                      _.forEach(field.value, (obj) => {\n                        if (obj.id) {\n                          childrenIds.push(obj.id);\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n\n              Db.connect(this.config).fetch({\n                keys: _.uniq(childrenIds),\n                include_docs: true,\n              })\n                .then((result) => {\n                  const childrenMap = {};\n\n                  result.rows.forEach((row) => {\n                    try {\n                      childrenMap[row.doc._id] = row.doc;\n                    } catch (error) {\n                      console.error('Error: child no longer exists');\n                    }\n                  });\n\n                  resolve(Entity._appendChildren(revisions, childrenMap));\n                }, reject);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  entityCreate(entity) {\n    return new Promise((resolve, reject) => {\n      entity.type = 'entity';\n\n      Db.connect(this.config).insert(entity)\n        .then((response) => {\n          entity._id = response.id;\n          entity._rev = response.rev;\n\n          resolve(entity);\n        }, reject);\n    });\n  }\n\n  entityRead(entityId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).get(entityId)\n        .then(resolve, reject);\n    });\n  }\n\n  async entityUpdate(entities, restore) {\n    entities = _.isArray(entities) ? entities : [entities];\n\n    const entityMap = {};\n\n    const entityIds = entities.map((entityOrEntityId) => {\n      let entityId;\n\n      if (_.isObject(entityOrEntityId)) {\n        entityId = entityOrEntityId._id;\n        entityMap[entityId] = entityOrEntityId;\n      }\n      if (_.isString(entityOrEntityId)) {\n        entityId = entityOrEntityId;\n      }\n\n      return entityId;\n    });\n\n    const response = await Db.connect(this.config).fetch({\n      keys: entityIds,\n      include_docs: true,\n    });\n\n    const children = [];\n    const oldFileNames = [];\n\n    entities = response.rows.map((row) => {\n      const oldEntity = row.doc;\n      const newEntity = entityMap[oldEntity._id];\n\n      let entity = oldEntity;\n\n      if (newEntity) {\n        delete newEntity._rev;\n\n        const diffs = diff(oldEntity, newEntity);\n\n        diffs.forEach((diff) => {\n\n          // If any reference fields have changed, update all references\n          if (/published|slug|title|thumbnail/.test(diff.path[0])) {\n            if (children.indexOf(newEntity) === -1 && entityIds.indexOf(newEntity._id) !== -1) {\n              children.push(newEntity);\n            }\n          }\n\n          // If any file fields have changed, remove the old file\n          if (diff.path[0] === 'fields' && diff.path[2] === 'value') {\n            const field = oldEntity.fields[diff.path[1]];\n            if (/attachment|image|audio|video/.test(field.type) && field.value) {\n              oldFileNames.push(field.value.file.name);\n            }\n          }\n\n        });\n\n        entity = _.mergeWith({}, oldEntity, newEntity, (a, b) => {\n          if (_.isArray(a) && _.isArray(b)) {\n            return b;\n          }\n          return undefined;\n        });\n      }\n\n      if (restore) {\n        entity.trashed = false;\n      }\n\n      return entity;\n    });\n\n    if (oldFileNames.length) {\n      // TODO: fix delete orphaned files\n      // const assist = new Assist(this.config);\n      // await assist.deleteFiles(oldFileNames);\n    }\n\n    if (children.length) {\n      await this._updateChildren(children);\n    }\n\n    const result = await Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE);\n\n    return result;\n  }\n\n  async entityDelete(entityIds, forever = false) {\n    let entities;\n    let filesResult;\n\n    if (entityIds === 'trashed') {\n      forever = true;\n\n      entities = (await Db.connect(this.config).view('entity', 'trashed', {\n        include_docs: true,\n      })).rows;\n\n    } else {\n      entities = (await Db.connect(this.config).fetch({\n        keys: _.isArray(entityIds) ? entityIds : [entityIds],\n        include_docs: true,\n      })).rows;\n    }\n\n    entities = entities.filter(entity => !entity.value || !entity.value.deleted);\n\n    entities = entities.map(entity => entity.doc);\n\n    await this._removeChildren(entities);\n\n    if (forever) {\n      const fileNames = Entity._fileNames(entities);\n\n      if (fileNames.length) {\n        const assist = new Assist(this.config);\n        filesResult = await assist.deleteFiles(fileNames);\n      }\n\n      entities = entities.map(entity => ({\n        _id: entity._id,\n        _rev: entity._rev,\n        _deleted: true,\n      }));\n\n    } else {\n      entities = entities.map((entity) => {\n        entity.trashed = true;\n        return entity;\n      });\n    }\n\n    const entitiesResult = await Helpers.chunkUpdate(this.config, entities, CHUNK_UPDATE_SIZE);\n\n    return {\n      entities: entitiesResult,\n      files: filesResult,\n    };\n  }\n\n}\n\nmodule.exports = Entity;\n","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\nconst Fields = require('./fields');\n\nclass Schema {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async create(schema) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.schemas.push(schema);\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(schemaSlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const schema = _.find(clientConfig.schemas, { slug: schemaSlug });\n\n    if (!schema) {\n      throw Error(`Schema not found: ${schemaSlug}`);\n    }\n\n    return schema;\n  }\n\n  async update(schema) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.schemas, { slug: schema.slug });\n\n    if (index === -1) {\n      throw Error(`Schema not found: ${schema.slug}`);\n    }\n\n    clientConfig.schemas.splice(index, 1, schema);\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(schemaSlugs) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    schemaSlugs = _.isArray(schemaSlugs) ? schemaSlugs : [schemaSlugs];\n\n    clientConfig.schemas = clientConfig.schemas.filter(schema => schemaSlugs.indexOf(schema.slug) === -1);\n\n    clientConfig.schemas = clientConfig.schemas.map((schema) => {\n      if (!schema.fields) {\n        return schema;\n      }\n      schema.fields = schema.fields.map((field) => {\n        if (!field.settings) {\n          return field;\n        }\n        if (field.settings.schemas) {\n          field.settings.schemas = field.settings.schemas.filter(schema => schemaSlugs.indexOf(schema) === -1);\n        }\n        return field;\n      });\n      return schema;\n    });\n\n    await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async updateAll(schemas) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.schemas = schemas;\n\n    // await this.updateEntityIndex(clientConfig.schemas);\n\n    return cc.set(clientConfig);\n  }\n\n  async updateEntityIndex(schemas) {\n    let fields = [];\n\n    schemas.forEach((schema) => {\n      fields = fields.concat(schema.fields);\n    });\n\n    fields = _.uniqBy(fields, 'slug');\n\n    const index = {\n      name: 'entity',\n      type: 'text',\n      ddoc: 'entityIndex',\n      index: {\n        default_field: {\n          enabled: true,\n          analyzer: 'standard',\n        },\n        selector: {\n          $and: [\n            {\n              type: 'entity',\n            },\n          ],\n        },\n        fields: [\n          {\n            name: 'published',\n            type: 'boolean',\n          },\n          {\n            name: 'trashed',\n            type: 'boolean',\n          },\n          {\n            name: 'title',\n            type: 'string',\n          },\n          {\n            name: 'slug',\n            type: 'string',\n          },\n          {\n            name: 'schema',\n            type: 'string',\n          },\n          {\n            name: 'modifiedAt',\n            type: 'string',\n          },\n          {\n            name: 'publishedAt',\n            type: 'string',\n          },\n        ],\n      },\n    };\n\n    fields.forEach((field) => {\n      const fieldRef = Fields.field(field.type);\n\n      if (/number|string|boolean/.test(fieldRef.dataType)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value`,\n          type: fieldRef.dataType,\n        });\n      }\n\n      if (/array/.test(fieldRef.dataType)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value.[].slug`,\n          type: 'string',\n        });\n      }\n\n      if (/taxonomy/.test(field.type)) {\n        index.index.fields.push({\n          name: `fields.${field.slug}.value.terms.[].slug`,\n          type: 'string',\n        });\n      }\n    });\n\n    const result = await Db.connect(this.config).index(index);\n\n    return result;\n  }\n\n}\n\nmodule.exports = Schema;\n","const _ = require('lodash');\n\nconst fields = [\n  {\n    type: 'attachment',\n    name: 'Attachment',\n    dataType: null,\n  },\n  {\n    type: 'audio',\n    name: 'Audio',\n    dataType: null,\n  },\n  {\n    type: 'checkbox',\n    name: 'Checkbox',\n    dataType: 'boolean',\n  },\n  {\n    type: 'color',\n    name: 'Color',\n    dataType: 'string',\n  },\n  {\n    type: 'date',\n    name: 'Date',\n    dataType: 'string',\n  },\n  {\n    type: 'embedly',\n    name: 'Embedly',\n    dataType: null,\n  },\n  {\n    type: 'entity',\n    name: 'Entity',\n    dataType: 'array',\n  },\n  {\n    type: 'entityGrid',\n    name: 'Entity Grid',\n    dataType: 'array',\n  },\n  {\n    type: 'entityTile',\n    name: 'Entity Tile',\n    dataType: 'array',\n  },\n  {\n    type: 'image',\n    name: 'Image',\n    dataType: null,\n  },\n  {\n    type: 'keyValue',\n    name: 'Key Value',\n    dataType: null,\n  },\n  {\n    type: 'number',\n    name: 'Number',\n    dataType: 'number',\n  },\n  {\n    type: 'richText',\n    name: 'Rich Text',\n    dataType: null,\n  },\n  {\n    type: 'select',\n    name: 'Select',\n    dataType: 'array',\n  },\n  {\n    type: 'taxonomy',\n    name: 'Taxonomy',\n    dataType: null,\n  },\n  {\n    type: 'text',\n    name: 'Text',\n    dataType: 'string',\n  },\n  {\n    type: 'textArea',\n    name: 'Text Area',\n    dataType: 'string',\n  },\n  {\n    type: 'user',\n    name: 'User',\n    dataType: 'array',\n  },\n  {\n    type: 'video',\n    name: 'Video',\n    dataType: null,\n  },\n  {\n    type: 'vimeo',\n    name: 'Vimeo',\n    dataType: null,\n  },\n];\n\nclass Fields {\n  static fields() {\n    return fields.map(field => Object.freeze(field));\n  }\n  static field(type) {\n    return _.find(Fields.fields(), { type });\n  }\n}\n\nmodule.exports = Fields;\n","module.exports = require(\"request-promise\");","function Api() { }\n\nApi.defaultConfig = require('./config.default');\n\nApi.Assist = (...args) => new (require('./lib/assist'))(...args);\nApi.Auth = (...args) => new (require('./lib/auth'))(...args);\nApi.ClientConfig = (...args) => new (require('./lib/client-config'))(...args);\nApi.Db = (...args) => new (require('./lib/db'))(...args);\nApi.Ecommerce = (...args) => new (require('./lib/ecommerce'))(...args);\nApi.Email = (...args) => new (require('./lib/email'))(...args);\nApi.Embedly = (...args) => new (require('./lib/embedly'))(...args);\nApi.Entity = (...args) => new (require('./lib/entity'))(...args);\nApi.Fields = (...args) => new (require('./lib/fields'))(...args);\nApi.Helpers = (...args) => new (require('./lib/helpers'))(...args);\nApi.Instagram = (...args) => new (require('./lib/instagram'))(...args);\nApi.Jwt = (...args) => new (require('./lib/jwt'))(...args);\nApi.Pdf = (...args) => new (require('./lib/pdf'))(...args);\nApi.Roles = (...args) => new (require('./lib/roles'))(...args);\nApi.Schema = (...args) => new (require('./lib/schema'))(...args);\nApi.Settings = (...args) => new (require('./lib/settings'))(...args);\nApi.Shippo = (...args) => new (require('./lib/shippo'))(...args);\nApi.Shopify = (...args) => new (require('./lib/shopify'))(...args);\nApi.Stripe = (...args) => new (require('./lib/stripe'))(...args);\nApi.Taxonomy = (...args) => new (require('./lib/taxonomy'))(...args);\nApi.Tools = (...args) => new (require('./lib/tools'))(...args);\nApi.User = (...args) => new (require('./lib/user'))(...args);\n\nmodule.exports = Api;\n","const path = require('path');\n\nconst config = {\n  environment: process.env.ENVIRONMENT || 'development',\n  debug: process.env.DEBUG || false,\n\n  slug: process.env.SLUG,\n  baseUrl: process.env.BASE_URL || '',\n\n  db: {\n    url: process.env.DB_URL,\n    host: process.env.DB_HOST,\n    name: process.env.DB_NAME,\n    requestPlugin: process.env.DB_REQUEST_PLUGIN,\n    meterType: process.env.DB_METER_TYPE,\n  },\n\n  auth: {\n    superUserId: process.env.AUTH_SUPER_USER_ID,\n    tokenSecret: process.env.AUTH_TOKEN_SECRET || 'change_this_secret',\n  },\n\n  dev: {\n    userId: process.env.DEV_USER_ID || 'dev',\n    role: process.env.DEV_ROLE || 'super',\n  },\n\n  cms: {\n    title: process.env.CMS_TITLE,\n    url: process.env.CMS_URL,\n  },\n\n  assist: {\n    url: process.env.ASSIST_URL,\n    username: process.env.ASSIST_USERNAME,\n    password: process.env.ASSIST_PASSWORD,\n  },\n\n  mailgun: {\n    apiKey: process.env.MAILGUN_API_KEY,\n    domain: process.env.MAILGUN_DOMAIN,\n  },\n\n  embedly: {\n    apiKey: process.env.EMBEDLY_API_KEY,\n  },\n\n  pdf: {\n    templatesPath: path.resolve(__dirname, 'pdf'),\n  },\n\n  email: {\n    templatesPath: path.resolve(__dirname, 'email'),\n  },\n\n  provider: {\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    },\n\n    instagram: {\n      clientId: process.env.INSTAGRAM_CLIENT_ID,\n      clientSecret: process.env.INSTAGRAM_CLIENT_SECRET,\n    },\n\n    spotify: {\n      clientId: process.env.SPOTIFY_CLIENT_ID,\n      clientSecret: process.env.SPOTIFY_CLIENT_SECRET,\n    },\n\n    stripe: {\n      clientId: process.env.STRIPE_CLIENT_ID,\n      clientSecret: process.env.STRIPE_CLIENT_SECRET,\n      apiKey: process.env.STRIPE_API_KEY,\n    },\n\n    twitter: {\n      consumerKey: process.env.TWITTER_CONSUMER_KEY,\n      consumerSecret: process.env.TWITTER_CONSUMER_SECRET,\n      accessTokenKey: process.env.TWITTER_ACCESS_TOKEN_KEY,\n      accessTokenSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET,\n    },\n\n    vimeo: {\n      clientId: process.env.VIMEO_CLIENT_ID,\n      clientSecret: process.env.VIMEO_CLIENT_SECRET,\n    },\n  },\n};\n\nmodule.exports = config;\n","module.exports = require(\"password-hash\");","const _ = require('lodash');\nconst querystring = require('querystring');\nconst axios = require('axios');\nconst ClientConfig = require('./client-config');\nconst Db = require('./db');\n\nconst providerTokenUri = {\n  google: 'https://www.googleapis.com/oauth2/v4/token',\n  instagram: 'https://api.instagram.com/oauth/access_token',\n  stripe: 'https://connect.stripe.com/oauth/token',\n  vimeo: 'https://api.vimeo.com/oauth/access_token',\n  spotify: 'https://accounts.spotify.com/api/token',\n};\n\nclass Auth {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async authoriseUser(slug, userId) {\n    const isSuperUser = this.config.auth.superUserId.split(',').map(superUser => superUser.trim()).indexOf(userId) > -1;\n\n    if (isSuperUser) {\n      return {\n        id: userId,\n        role: 'super',\n      };\n    }\n\n    const clientConfig = await Db.connect(this.config, slug).get('config');\n\n    const user = _.find(clientConfig.users, { id: userId });\n\n    if (!user) {\n      throw Error(`User not found: ${userId}`);\n    }\n\n    if (!user.active) {\n      throw Error(`User not active: ${userId}`);\n    }\n\n    return user;\n  }\n\n  async authProvider(provider, params = {}, userId = null, refresh = false) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const providerConfig = _.merge({}, this.config.provider[provider], params || {});\n\n    let providerClientConfig;\n\n    if (userId) {\n      providerClientConfig = _.get(clientConfig, ['userSettings', userId, 'provider', provider], {});\n    } else {\n      providerClientConfig = _.get(clientConfig, ['provider', provider], {});\n    }\n\n    const data = {\n      grant_type: refresh ? 'refresh_token' : 'authorization_code',\n      code: params && params.code ? params.code : undefined,\n      client_id: providerConfig.clientId,\n      client_secret: providerConfig.clientSecret,\n      redirect_uri: providerConfig.redirectUri,\n      refresh_token: providerClientConfig.refresh_token,\n    };\n\n    const uri = providerTokenUri[provider];\n\n    let providerAuth;\n\n    try {\n      providerAuth = (await axios.post(uri, querystring.stringify(data))).data;\n    } catch (error) {\n      throw new Error(JSON.stringify(error.response.data));\n    }\n\n    providerClientConfig = _.merge({}, providerClientConfig, providerAuth);\n    providerClientConfig.begins = Math.floor(new Date().getTime() / 1000);\n\n    if (provider === 'google') {\n      try {\n        providerClientConfig.user = (await axios.get(`https://www.googleapis.com/plus/v1/people/me?access_token=${providerClientConfig.access_token}`)).data;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (provider === 'spotify') {\n      try {\n        providerClientConfig.user = (await axios.get(`https://api.spotify.com/v1/me?access_token=${providerClientConfig.access_token}`)).data;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (userId) {\n      _.set(clientConfig, ['userSettings', userId, 'provider', provider], providerClientConfig);\n    } else {\n      _.set(clientConfig, ['provider', provider], providerClientConfig);\n    }\n\n    return cc.set(clientConfig);\n  }\n\n}\n\nmodule.exports = Auth;\n","module.exports = require(\"querystring\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\n\nclass Ecommerce {\n  constructor(config) {\n    this.config = config;\n  }\n\n  getType(type, query) {\n    return new Promise((resolve, reject) => {\n      query.sort = _.isString(query.sort) ? `\"${query.sort}\"` : query.sort;\n\n      Db.connect(this.config).search('ecommerce', type, query)\n        .then(resolve, reject);\n    });\n  }\n\n  setType(type, item) {\n    return new Promise((resolve, reject) => {\n      item.type = type;\n\n      Helpers.createOrUpdate(this.config, item)\n        .then(resolve, reject);\n    });\n  }\n\n  deleteType(items) {\n    return new Promise((resolve, reject) => {\n      items = items.map(item => ({\n        _id: item._id,\n        _rev: item._rev,\n        _deleted: true,\n      }));\n\n      Helpers.chunkUpdate(this.config, items, 1000)\n        .then(resolve, reject);\n    });\n  }\n\n  getOrder(orderId) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'orderByOrderId', {\n        key: orderId,\n        include_docs: true,\n      })\n        .then((body) => {\n          if (!body.rows.length) {\n            reject(new Error('Order not found'));\n            return;\n          }\n\n          resolve(body.rows[0].doc);\n        }, reject);\n    });\n  }\n\n  verifyDiscount(code) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'discountByCode', {\n        keys: [code],\n        include_docs: true,\n      })\n        .then((body) => {\n          if (body.rows.length) {\n            const discount = body.rows[0].doc;\n\n            const now = new Date().getTime();\n\n            const dateStart = new Date(Date.parse(discount.dateStart)).getTime();\n            const dateEnd = new Date(Date.parse(discount.dateEnd)).getTime();\n\n            if (dateStart > now) {\n              reject(new Error('Discount not valid (not begun)'));\n              return;\n\n            }\n\n            if (dateEnd < now) {\n              reject(new Error('Discount not valid (expired)'));\n              return;\n            }\n\n            resolve(discount);\n\n          } else {\n            reject(new Error({\n              statusCode: 404,\n              message: `Discount code not found (${code})`,\n            }));\n          }\n        }, reject);\n    });\n  }\n\n}\n\nmodule.exports = Ecommerce;\n","module.exports = require(\"nodemailer\");","module.exports = require(\"createsend-node\");","module.exports = require(\"nodemailer-mailgun-transport\");","module.exports = require(\"email-templates\");","module.exports = require(\"inky\");","module.exports = require(\"mjml\");","module.exports = require(\"mjml-core\");","module.exports = require(\"mjml-validator\");","module.exports = require(\"mjml-mailchimp\");","module.exports = require(\"html-to-text\");","module.exports = require(\"moment\");","module.exports = require(\"i18n-iso-countries\");","module.exports = require(\"node-sass\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst EmbedlyApi = require('embedly');\n\nclass Embedly {\n  constructor(config) {\n    this.config = config;\n  }\n\n  oembed(urls) {\n    return new Promise((resolve, reject) => {\n      const embedly = new EmbedlyApi({\n        key: this.config.embedly.apiKey,\n      });\n\n      const opts = {\n        urls: _.isArray(urls) ? urls : [urls],\n        format: 'json',\n      };\n\n      embedly.oembed(opts, (error, result) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(result);\n      });\n    });\n  }\n\n}\n\nmodule.exports = Embedly;\n","module.exports = require(\"embedly\");","module.exports = require(\"babel-runtime/helpers/extends\");","module.exports = require(\"json-query\");","module.exports = require(\"deep-diff\");","const _ = require('lodash');\nconst Promise = require('bluebird');\nconst request = require('request-promise');\n\nmodule.exports = function (options) {\n  const defaultOptions = {\n    client_id: null,\n    access_token: null,\n    version: 'v1',\n    host: 'https://api.instagram.com',\n  };\n\n  options = _.merge({}, defaultOptions, options || {});\n\n  const _request = (method, endpoint, query) => new Promise((resolve, reject) => {\n    const requestOptions = {\n      method,\n      url: [options.host, options.version, endpoint].join('/'),\n      qs: {\n        access_token: query.access_token || options.access_token,\n        client_id: query.client_id || options.client_id,\n      },\n    };\n\n    requestOptions.qs = _.extend({}, requestOptions.qs, query);\n\n    request(requestOptions)\n      .then((response) => {\n        resolve(JSON.parse(response));\n      }, reject);\n  });\n\n  this.get = (endpoint, query) => _request('GET', endpoint, query);\n};\n","const jwt = require('jsonwebtoken');\n\nclass Jwt {\n  constructor(config) {\n    this.config = config;\n  }\n\n  signToken(payload, options = {}) {\n    return jwt.sign(payload, this.config.auth.tokenSecret, options);\n  }\n\n  verifyToken(token) {\n    return jwt.verify(token, this.config.auth.tokenSecret);\n  }\n}\n\nmodule.exports = Jwt;\n","module.exports = require(\"jsonwebtoken\");","const fs = require('fs');\nconst path = require('path');\nconst _ = require('lodash');\nconst _eval = require('eval');\nconst request = require('request-promise');\nconst readdir = require('recursive-readdir');\nconst Entity = require('./entity');\nconst ClientConfig = require('./client-config');\n\nclass Pdf {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getTemplates() {\n    const templates = {};\n\n    const files = await readdir(this.config.pdf.templatesPath);\n\n    files.forEach((file) => {\n      if (!/\\.js$/.test(file)) {\n        return;\n      }\n\n      const id = file\n        .replace(`${this.config.pdf.templatesPath}/`, '')\n        .replace('.js', '');\n\n      // eslint-disable-next-line\n      templates[id] = require(file);\n    });\n\n    return templates;\n  }\n\n  async getPayload(templateId, entityId, role) {\n    // if (!this.templates) {\n    //   this.templates = await this.getTemplates();\n    // }\n\n    // if (!this.templates[templateId]) {\n    //   throw new Error('Template not found');\n    // }\n\n    const template = _eval(fs.readFileSync(path.join(this.config.pdf.templatesPath, `${templateId}.js`), 'utf-8'), `${templateId}.js`, {}, true);\n\n    const entity = new Entity(this.config);\n\n    const entities = (await entity.entityList([entityId], { children: 2, role })).map(row => row.doc);\n\n    if (entities.length === 0) {\n      throw new Error('Entity not found');\n    }\n\n    const payload = template(Entity.flattenValues(entities)[0]);\n\n    return payload;\n  }\n\n  async getPdf(payload) {\n    const cc = new ClientConfig(this.config);\n    const clientConfig = await cc.get();\n\n    const assetSlug = _.get(clientConfig, 'assets.slug', this.config.slug);\n    const assistPdfUrl = `${this.config.assist.url}/${assetSlug}/pdf/download`;\n\n    payload = typeof payload === 'object' ? JSON.stringify(payload).replace(/'/gi, '’') : payload;\n\n    const response = await request({\n      method: 'POST',\n      uri: assistPdfUrl,\n      encoding: null,\n      form: {\n        payload,\n      },\n    });\n\n    return response;\n  }\n\n}\n\nmodule.exports = Pdf;\n","module.exports = require(\"babel-runtime/helpers/typeof\");","module.exports = require(\"eval\");","module.exports = require(\"recursive-readdir\");","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 53;","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\n\nclass Settings {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async update(settings) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.client = _.merge({}, clientConfig.client, settings);\n\n    return cc.set(clientConfig);\n  }\n}\n\nmodule.exports = Settings;\n","const Promise = require('bluebird');\nconst shippo = require('shippo');\n\nclass Shippo {\n  constructor(config) {\n    this.config = config;\n\n    this.shippo = shippo(config.shippo.token);\n  }\n\n  getQuote(address, parcel) {\n    return new Promise((resolve, reject) => {\n\n      const addressFrom = {\n        object_purpose: 'QUOTE',\n        zip: this.config.shippo.fromZip,\n        country: this.config.shippo.fromCountry,\n      };\n\n      const addressTo = {\n        object_purpose: 'QUOTE',\n        // 'name': address.name,\n        // 'company': '',\n        // 'street1': address.street1,\n        // 'street2': address.street2,\n        // 'city': address.city,\n        // 'state': '',\n        zip: address.zip,\n        country: address.country,\n        // 'phone': address.phone,\n        // 'email': address.email,\n        metadata: '',\n      };\n\n      parcel.distance_unit = 'cm';\n      parcel.mass_unit = 'kg';\n\n      this.shippo.shipment.create({\n        object_purpose: 'QUOTE',\n        address_from: addressFrom,\n        address_to: addressTo,\n        parcel,\n      })\n        .then((shipment) => {\n          const ratesReady = (shipment, attempts) => {\n            if ((shipment.object_status === 'QUEUED' || shipment.object_status === 'WAITING') && attempts < 10) {\n              this.shippo.shipment.retrieve(shipment.object_id).then((val) => {\n                ratesReady(val, attempts + 1);\n              });\n\n            } else {\n              this.shippo.shipment.rates(shipment.object_id)\n                .then((rates) => {\n                  resolve(rates);\n\n                }, (error) => {\n                  console.error('There was an error retrieving rates : %s', error);\n                  reject(error);\n                });\n            }\n          };\n\n          ratesReady(shipment, 0);\n\n        }, (error) => {\n          console.error('There was an error creating shipment: %s', error);\n          reject(error);\n        });\n\n    });\n  }\n\n}\n\nmodule.exports = Shippo;\n","module.exports = require(\"shippo\");","const axios = require('axios');\nconst he = require('he');\nconst Handlebars = require('handlebars');\nconst jsontoxml = require('jsontoxml');\n\nconst ClientConfig = require('./client-config');\n\nclass Shopify {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getCatalog({ shopLink, productLinkTemplate }) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const result = (await axios({\n      url: `https://${clientConfig.provider.shopify.domain}.myshopify.com/api/graphql`,\n      method: 'post',\n      headers: {\n        'X-Shopify-Storefront-Access-Token': clientConfig.provider.shopify.storefrontAccessToken,\n      },\n      data: {\n        query: `\n          query {\n            shop {\n              name\n              primaryDomain {\n                url\n              }\n              description\n              products(first: 250) {\n                edges {\n                  node {\n                    id\n                    handle\n                    title\n                    description\n                    onlineStoreUrl\n                    images(first: 1) {\n                      edges {\n                        node {\n                          originalSrc\n                          transformedSrc\n                        }\n                      }\n                    }\n                    productType\n                    vendor\n                    availableForSale\n                    priceRange {\n                      minVariantPrice {\n                        amount\n                        currencyCode\n                      }\n                      maxVariantPrice {\n                        amount\n                        currencyCode\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n      },\n    })).data.data;\n\n    const template = Handlebars.compile(productLinkTemplate);\n\n    const products = result.shop.products.edges.map(edge => ({\n      'g:id': edge.node.handle,\n      'g:title': he.encode(edge.node.title),\n      'g:description': he.encode(edge.node.description),\n      // 'g:link': edge.node.onlineStoreUrl,\n      'g:link': template({ handle: edge.node.handle }),\n      'g:image_link': edge.node.images.edges[0].node.originalSrc,\n      'g:brand': edge.node.vendor,\n      'g:condition': 'new',\n      'g:availability': edge.node.availableForSale ? 'in stock' : 'out of stock',\n      'g:price': `${edge.node.priceRange.minVariantPrice.amount} ${edge.node.priceRange.minVariantPrice.currencyCode}`,\n      // 'g:google_product_category': he.encode(edge.node.productType),\n    }));\n\n    const channel = [\n      { name: 'title', text: result.shop.name },\n      // { name: 'link', text: result.shop.primaryDomain.url },\n      { name: 'link', text: shopLink },\n      { name: 'description', text: result.shop.description },\n    ];\n\n    products.forEach((product) => {\n      channel.push({\n        name: 'item',\n        children: product,\n      });\n    });\n\n    return `<?xml version=\"1.0\"?>\n    <rss xmlns:g=\"http://base.google.com/ns/1.0\" version=\"2.0\">\n      ${jsontoxml({ channel })}\n    </rss>`;\n  }\n}\n\nmodule.exports = Shopify;\n","module.exports = require(\"he\");","module.exports = require(\"handlebars\");","module.exports = require(\"jsontoxml\");","const _ = require('lodash');\nconst Stripe = require('stripe');\nconst Promise = require('bluebird');\nconst Hashids = require('hashids');\n\nconst ClientConfig = require('./client-config');\nconst Email = require('./email');\nconst Db = require('./db');\nconst Helpers = require('./helpers');\n\nclass StripeClass {\n  constructor(config) {\n    this.config = config;\n\n    this.stripe = Stripe(this.config.stripe.apiKey);\n    this.email = new Email(this.config);\n\n    this.hashids = new Hashids(this.config.slug, 6, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n  }\n\n  async getSettings() {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    let settings;\n\n    try {\n      settings = clientConfig.module.ecommerce;\n    } catch (error) {\n      throw new Error(error);\n    }\n\n    try {\n      settings.clientStripeAccountId = clientConfig.provider.stripe.stripe_user_id;\n    } catch (error) {\n      throw new Error(error);\n    }\n\n    settings.client = clientConfig.client;\n    settings.assets = clientConfig.assets;\n\n    return settings;\n  }\n\n  checkout(token, order) {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n\n          const listId = _.get(settings, 'createsend.checkoutSubscriberListId');\n\n          if (order.subscribe && listId) {\n            this.email.subscribe(order.customerDetails, 'createsend', listId)\n              .then((result) => {\n                console.log(result);\n              }, (error) => {\n                console.error(error);\n              });\n          }\n\n          // lookup customer by email, create if not found\n          this.findOrCreateCustomer(order.customerDetails.email, order)\n            .then((customer) => {\n\n              // store order data (customer, items, address)\n              this.createOrder(order, customer)\n                .then((order) => {\n\n                  this.updateOrCreateStripeCustomer(settings.clientStripeAccountId, customer, token, order)\n                    .then((stripeCustomer) => {\n\n                      // update customer, append order to customer, update metadata\n                      this.updateCustomer(customer, stripeCustomer, order)\n                        .then((customer) => {\n\n                          // create charge, take fee\n                          this.createCharge(settings, stripeCustomer, customer, order)\n                            .then((updatedOrder) => {\n\n                              this.sendReceipt(settings, customer, order)\n                                .then((orderReceipt) => {\n\n                                  updatedOrder.messages.orderReceipt = orderReceipt;\n\n                                  this.sendNotification(settings, customer, order)\n                                    .then((orderNotification) => {\n\n                                      updatedOrder.messages.orderNotification = orderNotification;\n\n                                      // update order charge status, charge id\n                                      this.updateOrder(updatedOrder)\n                                        .then((finalOrder) => {\n\n                                          resolve(finalOrder);\n\n                                        }, reject);\n                                    }, reject);\n                                }, reject);\n                            }, reject);\n                        }, reject);\n                    }, reject);\n                }, reject);\n            }, reject);\n        }, reject)\n        .catch(reject);\n    });\n  }\n\n  retrieveAccount() {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n          this.stripe.accounts.retrieve(settings.clientStripeAccountId)\n            .then(resolve, reject);\n        }, reject);\n    });\n  }\n\n  refund(order, amount) {\n    return new Promise((resolve, reject) => {\n      this.getSettings()\n        .then((settings) => {\n          this.stripe.refunds.create({\n            refund_application_fee: true,\n            charge: order.charge.id,\n            amount,\n          }, {\n            stripe_account: settings.clientStripeAccountId,\n          })\n            .then((refund) => {\n              this.stripe.charges.retrieve(order.charge.id, {\n                stripe_account: settings.clientStripeAccountId,\n              })\n                .then((charge) => {\n                  order.charge.status = charge.status;\n                  order.charge.amount = charge.amount;\n                  order.charge.amountRefunded = charge.amount_refunded;\n\n                  Helpers.createOrUpdate(this.config, order)\n                    .then(resolve, reject);\n                }, reject);\n            }, reject);\n        }, reject);\n    });\n  }\n\n  findOrCreateCustomer(email, order) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).view('ecommerce', 'customerByEmail', {\n        keys: [email],\n        include_docs: true,\n      })\n        .then((body) => {\n          if (body.rows.length) {\n            resolve(body.rows[0].doc);\n\n          } else {\n            const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n            const newCustomer = {\n              type: 'customer',\n              createdAt: now,\n              modifiedAt: now,\n              email: order.customerDetails.email,\n              name: order.customerDetails.name,\n              phone: order.customerDetails.phone,\n              billingAddress: order.billingAddress,\n              shippingAddress: order.shippingAddress,\n              orders: [],\n            };\n\n            Db.connect(this.config).insert(newCustomer)\n              .then((body) => {\n                newCustomer._id = body.id;\n                newCustomer._rev = body.rev;\n\n                resolve(newCustomer);\n              }, reject);\n          }\n        }, reject);\n    });\n  }\n\n  updateOrCreateStripeCustomer(clientStripeAccountId, customer, token, order) {\n    return new Promise((resolve, reject) => {\n      const stripeCustomer = {\n        source: token,\n        email: order.customer.email,\n        description: order.customer.name,\n        metadata: {\n          customer_id: customer._id,\n        // billingAddress: JSON.stringify(order.billingAddress),\n        // shippingAddress: JSON.stringify(order.shippingAddress)\n        },\n      };\n\n      if (customer.stripe && customer.stripe.customer.id) {\n        this.stripe.customers.update(customer.stripe.customer.id, stripeCustomer, {\n          stripe_account: clientStripeAccountId,\n        })\n          .then(resolve, (error) => {\n            if (error.type === 'StripeInvalidRequestError' && error.param === 'id') {\n              this.stripe.customers.create(stripeCustomer, {\n                stripe_account: clientStripeAccountId,\n              }).then(resolve, reject);\n\n            } else {\n              reject(error);\n            }\n          });\n\n      } else {\n        this.stripe.customers.create(stripeCustomer, {\n          stripe_account: clientStripeAccountId,\n        }).then(resolve, reject);\n      }\n    });\n  }\n\n  createOrder(order, customer) {\n    return new Promise((resolve, reject) => {\n      const items = order.items.map(item => ({\n        id: item.id,\n        title: item.title.replace(/<br\\s?>/ig, ' ').replace(/<\\/?p>|<\\/?span>/ig, ''),\n        price: item.price,\n        quantity: item.quantity,\n        metadata: item.metadata || {},\n      }));\n\n      const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n      const newOrder = {\n        type: 'order',\n        orderId: this.hashids.encode(new Date().getTime()),\n        createdAt: now,\n        modifiedAt: now,\n        customer: {\n          id: customer._id,\n          email: customer.email,\n          name: customer.name,\n        },\n        items,\n        shippingMethod: {\n          name: order.shippingMethod.name,\n          amount: Number(order.shippingMethod.amount),\n        },\n        subtotal: Number(order.subtotal),\n        tax: {\n          rate: order.tax.rate || 0,\n          includedInPrice: order.tax.includedInPrice || false,\n          total: order.tax.total || 0,\n          show: order.tax.show || false,\n        },\n        discount: {\n          code: order.discount.code || '',\n          name: order.discount.name || '',\n          total: order.discount.total || 0,\n        },\n        total: Number(order.total),\n        billingAddress: order.billingAddress,\n        shippingAddress: order.shippingAddress,\n        messages: {},\n        status: 'pending',\n        test: true,\n      };\n\n      Db.connect(this.config).insert(newOrder)\n        .then((body) => {\n          newOrder._id = body.id;\n          newOrder._rev = body.rev;\n\n          resolve(newOrder);\n        }, reject);\n    });\n  }\n\n  updateOrder(order) {\n    return new Promise((resolve, reject) => {\n      Db.connect(this.config).insert(order)\n        .then((body) => {\n          order._rev = body.rev;\n\n          resolve(order);\n        }, reject);\n    });\n  }\n\n  updateCustomer(customer, stripeCustomer, order) {\n    return new Promise((resolve, reject) => {\n      const now = JSON.stringify(new Date()).replace(/\"/g, '');\n\n      customer.modifiedAt = now;\n\n      if (!customer.orders) {\n        customer.orders = [];\n      }\n\n      customer.orders.push(order._id);\n\n      if (!customer.stripe) {\n        customer.stripe = {\n          customer: {\n            id: null,\n          },\n        };\n      }\n\n      customer.stripe.customer.id = stripeCustomer.id;\n\n      Db.connect(this.config).insert(customer)\n        .then((body) => {\n          customer._rev = body.rev;\n\n          resolve(customer);\n        }, reject);\n    });\n  }\n\n  createCharge(settings, stripeCustomer, customer, order) {\n    return new Promise((resolve, reject) => {\n      const amount = Number(order.total) * 100;\n\n      const charge = {\n        amount,\n        currency: settings.currency.iso.toLowerCase(),\n        customer: stripeCustomer.id,\n        capture: true,\n        description: order.orderId,\n        // shipping: order.shippingAddress, // fraud prevention, must follow expected schema\n        metadata: {\n          customer_id: customer._id,\n          order_id: order._id,\n        },\n        statement_descriptor: _.kebabCase(settings.storeName).toUpperCase(),\n        application_fee: Math.ceil(amount * 0.02),\n      };\n\n      this.stripe.charges.create(charge, {\n        stripe_account: settings.clientStripeAccountId,\n      })\n        .then((charge) => {\n\n          order.charge = {\n            paymentGateway: 'stripe',\n            id: charge.id,\n            status: charge.status,\n            currency: charge.currency.toUpperCase(),\n            amount: charge.amount,\n            amountRefunded: charge.amount_refunded,\n          };\n\n          order.test = !charge.livemode;\n\n          resolve(order);\n\n        }, reject);\n    });\n  }\n\n  sendReceipt(settings, customer, order) {\n    return new Promise((resolve, reject) => {\n      const templateData = {\n        settings,\n        order,\n      };\n\n      const emailOptions = {\n        from: `${settings.emailSenderName} <${settings.emailSenderAddress}>`,\n        to: customer.email,\n        subject: `Your order at ${settings.storeName} (${order.orderId})`,\n      };\n\n      const assetSlug = _.get(settings, 'assets.slug', this.config.slug);\n\n      this.email.sendEmail(emailOptions, `${assetSlug}/order-receipt`, templateData).then(resolve, reject);\n    });\n  }\n\n  sendNotification(settings, customer, order) {\n    return new Promise((resolve, reject) => {\n      const templateData = {\n        settings,\n        order,\n      };\n\n      const emailOptions = {\n        from: `${settings.emailSenderName} <${settings.emailSenderAddress}>`,\n        to: settings.emailSenderAddress,\n        subject: `New order at ${settings.storeName} (${order.orderId})`,\n      };\n\n      const assetSlug = _.get(settings, 'assets.slug', this.config.slug);\n\n      this.email.sendEmail(emailOptions, `${assetSlug}/order-notification`, templateData).then(resolve, reject);\n    });\n  }\n\n}\n\nmodule.exports = StripeClass;\n","module.exports = require(\"stripe\");","module.exports = require(\"hashids\");","const _ = require('lodash');\nconst Db = require('./db');\nconst ClientConfig = require('./client-config');\n\nclass Taxonomy {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async create(taxonomy) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.taxonomies.push(taxonomy);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(taxonomySlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const taxonomy = _.find(clientConfig.taxonomies, { slug: taxonomySlug });\n\n    if (!taxonomy) {\n      throw Error(`Taxonomy not found: ${taxonomySlug}`);\n    }\n\n    return taxonomy;\n  }\n\n  async update(taxonomy) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.taxonomies, { slug: taxonomy.slug });\n\n    if (index === -1) {\n      throw Error(`Taxonomy not found: ${taxonomy.slug}`);\n    }\n\n    clientConfig.taxonomies.splice(index, 1, taxonomy);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(taxonomySlug) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    taxonomySlug = _.isArray(taxonomySlug) ? taxonomySlug : [taxonomySlug];\n\n    clientConfig.taxonomies = clientConfig.taxonomies.filter(taxonomy => taxonomySlug.indexOf(taxonomy.slug) === -1);\n\n    return cc.set(clientConfig);\n  }\n\n  async entitiesByTerm(term) {\n    const db = Db.connect(this.config);\n\n    const entityGroups = (await db.view('entity', 'byTaxonomyTerm', { keys: [term.id], group: true })).rows.map(row => row.value)[0];\n\n    if (!entityGroups) {\n      return [];\n    }\n\n    let entityIds = [];\n\n    _.forEach(entityGroups, (entities) => {\n      entityIds = entityIds.concat(entities);\n    });\n\n    entityIds = _.uniq(entityIds);\n\n    const entities = (await db.fetch({ keys: entityIds, include_docs: true })).rows\n      .filter(row => row.doc)\n      .map(row => row.doc);\n\n    return entities;\n  }\n\n  async createTerm(taxonomySlug, term) {\n    const taxonomy = await this.read(taxonomySlug);\n\n    taxonomy.terms.push(term);\n\n    return this.update(taxonomy);\n  }\n\n  async updateTerm(term) {\n    let entities = await this.entitiesByTerm(term);\n\n    entities = entities.map((entity) => {\n      entity.fields = _.mapValues(entity.fields, (field) => {\n        if (field.type === 'taxonomy' && field.value) {\n          if (!field.value.terms) {\n            field.value.terms = [];\n          }\n\n          field.value.terms = field.value.terms.map((_term) => {\n            if (_term.id === term.id) {\n              _term.title = term.title;\n              _term.slug = term.slug;\n            }\n\n            if (!_term.parents) {\n              _term.parents = [];\n            }\n\n            _term.parents = _term.parents.map((parent) => {\n              if (parent.id === term.id) {\n                parent.title = term.title;\n                parent.slug = term.slug;\n              }\n              return parent;\n            });\n\n            return _term;\n          });\n        }\n\n        return field;\n      });\n      return entity;\n    });\n\n    return Db.connect(this.config).bulk({ docs: entities });\n  }\n\n  async deleteTerm(term) {\n    let entities = await this.entitiesByTerm(term);\n\n    entities = entities.map((entity) => {\n      entity.fields = _.mapValues(entity.fields, (field) => {\n        if (field.type === 'taxonomy' && field.value) {\n          if (!field.value.terms) {\n            field.value.terms = [];\n          }\n\n          field.value.terms = field.value.terms.filter((_term) => {\n            if (_term.id === term.id) {\n              return false;\n            }\n\n            if ((_term.parents || []).filter(parent => parent.id === term.id).length) {\n              return false;\n            }\n\n            return true;\n          });\n        }\n\n        return field;\n      });\n      return entity;\n    });\n\n    return Db.connect(this.config).bulk({ docs: entities });\n  }\n}\n\nmodule.exports = Taxonomy;\n","const Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst Cloudant = require('@cloudant/cloudant');\nconst Db = require('./db');\n\nclass Tools {\n  constructor(config) {\n    this.config = config;\n  }\n\n  async getDb() {\n    const result = await Db.connect(this.config).fetch({\n      include_docs: true,\n    });\n\n    return result;\n  }\n\n  async getChanges() {\n    const result = await Db.connect(this.config).changes({\n      limit: 50,\n      include_docs: true,\n      filter: 'tools/changesEntity',\n    });\n\n    return result;\n  }\n\n  async importDb(dbBackupFile) {\n    const dbName = this.config.db.name;\n\n    const fileConents = await fs.readFileAsync(dbBackupFile.path);\n\n    const docs = JSON.parse(fileConents).rows.map((row) => {\n      const { doc } = row;\n      delete doc._rev;\n      return doc;\n    });\n\n    await fs.unlinkAsync(dbBackupFile.path);\n\n    const cloudant = new Cloudant({\n      url: this.config.db.url,\n      plugins: ['promises', 'retry'],\n    }).db;\n\n    try {\n      await cloudant.destroy(dbName);\n    } catch (error) {\n      //\n    }\n\n    await cloudant.create(dbName);\n\n    const result = await Db.connect(this.config, dbName).bulk({ docs });\n\n    return result;\n  }\n\n}\n\nmodule.exports = Tools;\n","const _ = require('lodash');\nconst ClientConfig = require('./client-config');\n\nclass User {\n  constructor(config) {\n    this.config = config;\n\n    return this;\n  }\n\n  async create(user) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    clientConfig.users.push(user);\n\n    return cc.set(clientConfig);\n  }\n\n  async read(userId) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const user = _.find(clientConfig.users, { id: userId });\n\n    if (!user) {\n      throw Error(`User not found: ${userId}`);\n    }\n\n    return user;\n  }\n\n  async update(user) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    const index = _.findIndex(clientConfig.users, { id: user.id });\n\n    if (index === -1) {\n      throw Error(`User not found: ${user.id}`);\n    }\n\n    clientConfig.users.splice(index, 1, user);\n\n    return cc.set(clientConfig);\n  }\n\n  async delete(userId) {\n    const cc = new ClientConfig(this.config);\n\n    const clientConfig = await cc.get();\n\n    userId = _.isArray(userId) ? userId : [userId];\n\n    clientConfig.users = clientConfig.users.filter(user => userId.indexOf(user.id) === -1);\n\n    return cc.set(clientConfig);\n  }\n}\n\nmodule.exports = User;\n"],"sourceRoot":""}